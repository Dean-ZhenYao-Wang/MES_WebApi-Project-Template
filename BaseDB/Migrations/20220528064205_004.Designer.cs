// <auto-generated />
using System;
using BaseDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BaseDB.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20220528064205_004")]
    partial class _004
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BaseDB.用户", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<string>("Code")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("头像")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("头像");

                    b.Property<string>("密码")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("密码");

                    b.Property<int?>("年龄")
                        .HasPrecision(10)
                        .HasColumnType("int")
                        .HasColumnName("年龄");

                    b.Property<int?>("性别")
                        .HasPrecision(10)
                        .HasColumnType("int")
                        .HasColumnName("性别");

                    b.Property<string>("手机")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("手机");

                    b.Property<string>("昵称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("昵称");

                    b.Property<string>("生日")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("生日");

                    b.Property<string>("登录用户名")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("登录用户名");

                    b.Property<string>("邮件")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("邮件");

                    b.HasKey("Key");

                    b.ToTable("用户");
                });

            modelBuilder.Entity("BaseDB.用户_组织", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<string>("用户Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("用户Key");

                    b.Property<string>("组织Key")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("组织Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key", "用户Key", "组织Key");

                    b.HasIndex("用户Key");

                    b.HasIndex("组织Key");

                    b.ToTable("用户_组织");
                });

            modelBuilder.Entity("BaseDB.用户_角色", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<string>("用户Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("用户Key");

                    b.Property<string>("角色Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("角色Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key", "用户Key", "角色Key");

                    b.HasIndex("用户Key");

                    b.HasIndex("角色Key");

                    b.ToTable("用户_角色");
                });

            modelBuilder.Entity("BaseDB.组织", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("上级组织Key")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("上级组织Key");

                    b.Property<string>("全名")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("全名");

                    b.Property<string>("名称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("名称");

                    b.Property<int>("序号")
                        .HasMaxLength(4000)
                        .HasColumnType("int")
                        .HasColumnName("序号");

                    b.Property<string>("编号")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("编号");

                    b.HasKey("Key");

                    b.HasIndex("上级组织Key");

                    b.ToTable("组织");
                });

            modelBuilder.Entity("BaseDB.菜单", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICON")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ICON");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Url");

                    b.Property<string>("上级菜单Key")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("上级菜单Key");

                    b.Property<string>("名称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("名称");

                    b.Property<int>("序号")
                        .HasMaxLength(4000)
                        .HasColumnType("int")
                        .HasColumnName("序号");

                    b.Property<string>("编号")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("编号");

                    b.HasKey("Key");

                    b.HasIndex("上级菜单Key");

                    b.ToTable("菜单");
                });

            modelBuilder.Entity("BaseDB.角色", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("名称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("名称");

                    b.HasKey("Key");

                    b.ToTable("角色");
                });

            modelBuilder.Entity("BaseDB.角色_菜单", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<string>("角色Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("角色Key");

                    b.Property<string>("菜单Key")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("菜单Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key", "角色Key", "菜单Key");

                    b.HasIndex("菜单Key");

                    b.HasIndex("角色Key");

                    b.ToTable("角色_菜单");
                });

            modelBuilder.Entity("BaseDB.附件", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Key");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Category");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ContentType");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("FileName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("FilePath");

                    b.Property<string>("Hash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Hash");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasPrecision(19)
                        .HasColumnType("bigint")
                        .HasColumnName("Size")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Source")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Source");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UploadTime");

                    b.HasKey("Key");

                    b.ToTable("附件");
                });

            modelBuilder.Entity("EquipmentClassPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentClassPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EquipmentClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentClassPropertyTypeKey");

                    b.HasIndex("EquipmentClassTypeKey");

                    b.ToTable("EquipmentClassProperties");
                });

            modelBuilder.Entity("EquipmentClassType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentClassTypeKey");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("EquipmentClasses");
                });

            modelBuilder.Entity("EquipmentPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EquipmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentPropertyTypeKey");

                    b.HasIndex("EquipmentTypeKey");

                    b.ToTable("EquipmentProperties");
                });

            modelBuilder.Entity("EquipmentSegmentSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentSegmentSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EquipmentSegmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentSegmentSpecificationPropertyTypeKey");

                    b.HasIndex("EquipmentSegmentSpecificationTypeKey");

                    b.ToTable("EquipmentSegmentSpecificationProperties");
                });

            modelBuilder.Entity("EquipmentSegmentSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentSegmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentSegmentSpecificationTypeKey");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("ProcessSegmentTypeKey");

                    b.ToTable("EquipmentSegmentSpecifications");
                });

            modelBuilder.Entity("EquipmentType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentTypeKey");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("HierarchyScopeType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeChildKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ItemElementName")
                        .HasColumnType("int");

                    b.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpProcessSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkMasterCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeChildKey");

                    b.HasIndex("OpOperationsSegmentCapabilityTypeKey");

                    b.HasIndex("OpProcessSegmentCapabilityTypeKey");

                    b.HasIndex("WorkMasterCapabilityTypeKey");

                    b.ToTable("HierarchyScopes");
                });

            modelBuilder.Entity("JobListType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("JobLists");
                });

            modelBuilder.Entity("JobOrderType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobListTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkRequestTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobListTypeKey");

                    b.HasIndex("WorkRequestTypeKey");

                    b.ToTable("JobOrders");
                });

            modelBuilder.Entity("JobResponseType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDirectiveKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkDirectiveKey");

                    b.HasIndex("WorkResponseTypeKey");

                    b.ToTable("JobResponses");
                });

            modelBuilder.Entity("MaterialClassPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialClassPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("MaterialClassPropertyTypeKey");

                    b.HasIndex("MaterialClassTypeKey");

                    b.ToTable("MaterialClassProperties");
                });

            modelBuilder.Entity("MaterialClassType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("MaterialClassTypeKey");

                    b.ToTable("MaterialClasses");
                });

            modelBuilder.Entity("MaterialDefinitionPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialDefinitionPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("MaterialDefinitionPropertyTypeKey");

                    b.HasIndex("MaterialDefinitionTypeKey");

                    b.ToTable("MaterialDefinitionProperties");
                });

            modelBuilder.Entity("MaterialDefinitionType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("MaterialDefinitionTypeKey");

                    b.ToTable("MaterialDefinitions");
                });

            modelBuilder.Entity("MaterialLotPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialLotPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialLotTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialSubLotTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("MaterialLotPropertyTypeKey");

                    b.HasIndex("MaterialLotTypeKey");

                    b.HasIndex("MaterialSubLotTypeKey");

                    b.ToTable("MaterialLotProperties");
                });

            modelBuilder.Entity("MaterialLotType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialLotTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("MaterialLotTypeKey");

                    b.ToTable("MaterialLots");
                });

            modelBuilder.Entity("MaterialLotTypeMaterialSubLotType", b =>
                {
                    b.Property<string>("AssemblyLotKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssemblySubLotKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssemblyLotKey", "AssemblySubLotKey");

                    b.HasIndex("AssemblySubLotKey");

                    b.ToTable("MaterialLotTypeMaterialSubLotType");
                });

            modelBuilder.Entity("MaterialSegmentSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialSegmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("MaterialSegmentSpecificationPropertyTypeKey");

                    b.HasIndex("MaterialSegmentSpecificationTypeKey");

                    b.ToTable("MaterialSegmentSpecificationProperties");
                });

            modelBuilder.Entity("MaterialSegmentSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("ProcessSegmentTypeKey");

                    b.ToTable("MaterialSegmentSpecifications");
                });

            modelBuilder.Entity("MaterialSegmentSpecificationTypeMaterialSegmentSpecificationType", b =>
                {
                    b.Property<string>("AssemblySegmentSpecificationKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialSegmentSpecificationChildKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssemblySegmentSpecificationKey", "MaterialSegmentSpecificationChildKey");

                    b.HasIndex("MaterialSegmentSpecificationChildKey");

                    b.ToTable("MaterialSegmentSpecificationTypeMaterialSegmentSpecificationType");
                });

            modelBuilder.Entity("MaterialSubLotType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("MaterialSubLots");
                });

            modelBuilder.Entity("MaterialSubLotTypeMaterialSubLotType", b =>
                {
                    b.Property<string>("AssemblySubLotKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialSubLotChildKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssemblySubLotKey", "MaterialSubLotChildKey");

                    b.HasIndex("MaterialSubLotChildKey");

                    b.ToTable("MaterialSubLotTypeMaterialSubLotType");
                });

            modelBuilder.Entity("OpEquipmentActualPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpEquipmentActualPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpEquipmentActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpEquipmentActualPropertyTypeKey");

                    b.HasIndex("OpEquipmentActualTypeKey");

                    b.ToTable("OpEquipmentActualProperties");
                });

            modelBuilder.Entity("OpEquipmentActualType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpEquipmentActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobResponseTypeKey");

                    b.HasIndex("OpEquipmentActualTypeKey");

                    b.HasIndex("OpSegmentResponseTypeKey");

                    b.ToTable("OpEquipmentActuals");
                });

            modelBuilder.Entity("OpEquipmentCapabilityPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpEquipmentCapabilityPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpEquipmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpEquipmentCapabilityPropertyTypeKey");

                    b.HasIndex("OpEquipmentCapabilityTypeKey");

                    b.ToTable("OpEquipmentCapabilityProperties");
                });

            modelBuilder.Entity("OpEquipmentCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpEquipmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpProcessSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpEquipmentCapabilityTypeKey");

                    b.HasIndex("OpOperationsSegmentCapabilityTypeKey");

                    b.HasIndex("OpProcessSegmentCapabilityTypeKey");

                    b.HasIndex("OperationsCapabilityTypeKey");

                    b.HasIndex("WorkCapabilityTypeKey");

                    b.HasIndex("WorkMasterCapabilityTypeKey");

                    b.ToTable("OpEquipmentCapabilities");
                });

            modelBuilder.Entity("OpEquipmentRequirementPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpEquipmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpEquipmentRequirementPropertyTypeKey");

                    b.HasIndex("OpEquipmentRequirementTypeKey");

                    b.ToTable("OpEquipmentRequirementProperties");
                });

            modelBuilder.Entity("OpEquipmentRequirementType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentLevelKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobOrderTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpEquipmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentLevelKey");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobOrderTypeKey");

                    b.HasIndex("OpEquipmentRequirementTypeKey");

                    b.HasIndex("OpSegmentRequirementTypeKey");

                    b.ToTable("OpEquipmentRequirements");
                });

            modelBuilder.Entity("OpEquipmentSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpEquipmentSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpEquipmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpEquipmentSpecificationPropertyTypeKey");

                    b.HasIndex("OpEquipmentSpecificationTypeKey");

                    b.ToTable("OpEquipmentSpecificationProperties");
                });

            modelBuilder.Entity("OpEquipmentSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpEquipmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDirectiveTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpEquipmentSpecificationTypeKey");

                    b.HasIndex("OperationsSegmentTypeKey");

                    b.HasIndex("WorkDirectiveTypeKey");

                    b.HasIndex("WorkMasterTypeKey");

                    b.ToTable("OpEquipmentSpecifications");
                });

            modelBuilder.Entity("OpMaterialActualPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpMaterialActualPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpMaterialActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpMaterialActualPropertyTypeKey");

                    b.HasIndex("OpMaterialActualTypeKey");

                    b.ToTable("OpMaterialActualProperties");
                });

            modelBuilder.Entity("OpMaterialActualType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpMaterialActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobResponseTypeKey");

                    b.HasIndex("OpMaterialActualTypeKey");

                    b.HasIndex("OpSegmentResponseTypeKey");

                    b.ToTable("OpMaterialActuals");
                });

            modelBuilder.Entity("OpMaterialCapabilityPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpMaterialCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpMaterialCapabilityPropertyTypeKey");

                    b.HasIndex("OpMaterialCapabilityTypeKey");

                    b.ToTable("OpMaterialCapabilityProperties");
                });

            modelBuilder.Entity("OpMaterialCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpMaterialCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpProcessSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpMaterialCapabilityTypeKey");

                    b.HasIndex("OpOperationsSegmentCapabilityTypeKey");

                    b.HasIndex("OpProcessSegmentCapabilityTypeKey");

                    b.HasIndex("OperationsCapabilityTypeKey");

                    b.HasIndex("WorkCapabilityTypeKey");

                    b.HasIndex("WorkMasterCapabilityTypeKey");

                    b.ToTable("OpMaterialCapabilities");
                });

            modelBuilder.Entity("OpMaterialRequirementPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpMaterialRequirementPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpMaterialRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpMaterialRequirementPropertyTypeKey");

                    b.HasIndex("OpMaterialRequirementTypeKey");

                    b.ToTable("OpMaterialRequirementProperties");
                });

            modelBuilder.Entity("OpMaterialRequirementType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobOrderTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpMaterialRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobOrderTypeKey");

                    b.HasIndex("OpMaterialRequirementTypeKey");

                    b.HasIndex("OpSegmentRequirementTypeKey");

                    b.ToTable("OpMaterialRequirements");
                });

            modelBuilder.Entity("OpMaterialSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpMaterialSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpMaterialSpecificationPropertyTypeKey");

                    b.HasIndex("OpMaterialSpecificationTypeKey");

                    b.ToTable("OpMaterialSpecificationProperties");
                });

            modelBuilder.Entity("OpMaterialSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpMaterialSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDirectiveTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpMaterialSpecificationTypeKey");

                    b.HasIndex("OperationsSegmentTypeKey");

                    b.HasIndex("WorkDirectiveTypeKey");

                    b.HasIndex("WorkMasterTypeKey");

                    b.ToTable("OpMaterialSpecifications");
                });

            modelBuilder.Entity("OpOperationsSegmentCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpOperationsSegmentCapabilityTypeKey");

                    b.HasIndex("OperationsCapabilityTypeKey");

                    b.ToTable("OpOperationsSegmentCapabilities");
                });

            modelBuilder.Entity("OpPersonnelActualPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPersonnelActualPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPersonnelActualPropertyTypeKey");

                    b.HasIndex("OpPersonnelActualTypeKey");

                    b.ToTable("OpPersonnelActualProperties");
                });

            modelBuilder.Entity("OpPersonnelActualType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobResponseTypeKey");

                    b.HasIndex("OpPersonnelActualTypeKey");

                    b.HasIndex("OpSegmentResponseTypeKey");

                    b.ToTable("OpPersonnelActuals");
                });

            modelBuilder.Entity("OpPersonnelCapabilityPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPersonnelCapabilityPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPersonnelCapabilityPropertyTypeKey");

                    b.HasIndex("OpPersonnelCapabilityTypeKey");

                    b.ToTable("OpPersonnelCapabilityProperties");
                });

            modelBuilder.Entity("OpPersonnelCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpProcessSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpOperationsSegmentCapabilityTypeKey");

                    b.HasIndex("OpPersonnelCapabilityTypeKey");

                    b.HasIndex("OpProcessSegmentCapabilityTypeKey");

                    b.HasIndex("OperationsCapabilityTypeKey");

                    b.HasIndex("WorkCapabilityTypeKey");

                    b.HasIndex("WorkMasterCapabilityTypeKey");

                    b.ToTable("OpPersonnelCapabilities");
                });

            modelBuilder.Entity("OpPersonnelRequirementPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPersonnelRequirementPropertyTypeKey");

                    b.HasIndex("OpPersonnelRequirementTypeKey");

                    b.ToTable("OpPersonnelRequirementProperties");
                });

            modelBuilder.Entity("OpPersonnelRequirementType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobOrderTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobOrderTypeKey");

                    b.HasIndex("OpPersonnelRequirementTypeKey");

                    b.HasIndex("OpSegmentRequirementTypeKey");

                    b.ToTable("OpPersonnelRequirements");
                });

            modelBuilder.Entity("OpPersonnelSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPersonnelSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPersonnelSpecificationPropertyTypeKey");

                    b.HasIndex("OpPersonnelSpecificationTypeKey");

                    b.ToTable("OpPersonnelSpecificationProperties");
                });

            modelBuilder.Entity("OpPersonnelSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPersonnelSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDirectiveTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpPersonnelSpecificationTypeKey");

                    b.HasIndex("OperationsSegmentTypeKey");

                    b.HasIndex("WorkDirectiveTypeKey");

                    b.HasIndex("WorkMasterTypeKey");

                    b.ToTable("OpPersonnelSpecifications");
                });

            modelBuilder.Entity("OpPhysicalAssetActualPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPhysicalAssetActualPropertyTypeKey");

                    b.HasIndex("OpPhysicalAssetActualTypeKey");

                    b.ToTable("OpPhysicalAssetActualProperties");
                });

            modelBuilder.Entity("OpPhysicalAssetActualType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobResponseTypeKey");

                    b.HasIndex("OpPhysicalAssetActualTypeKey");

                    b.HasIndex("OpSegmentResponseTypeKey");

                    b.ToTable("OpPhysicalAssetActuals");
                });

            modelBuilder.Entity("OpPhysicalAssetCapabilityPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPhysicalAssetCapabilityPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPhysicalAssetCapabilityPropertyTypeKey");

                    b.HasIndex("OpPhysicalAssetCapabilityTypeKey");

                    b.ToTable("OpPhysicalAssetCapabilityProperties");
                });

            modelBuilder.Entity("OpPhysicalAssetCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpProcessSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpOperationsSegmentCapabilityTypeKey");

                    b.HasIndex("OpPhysicalAssetCapabilityTypeKey");

                    b.HasIndex("OpProcessSegmentCapabilityTypeKey");

                    b.HasIndex("OperationsCapabilityTypeKey");

                    b.HasIndex("WorkCapabilityTypeKey");

                    b.HasIndex("WorkMasterCapabilityTypeKey");

                    b.ToTable("OpPhysicalAssetCapabilities");
                });

            modelBuilder.Entity("OpPhysicalAssetRequirementPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPhysicalAssetRequirementPropertyTypeKey");

                    b.HasIndex("OpPhysicalAssetRequirementTypeKey");

                    b.ToTable("OpPhysicalAssetRequirementProperties");
                });

            modelBuilder.Entity("OpPhysicalAssetRequirementType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentLevelKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobOrderTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentLevelKey");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobOrderTypeKey");

                    b.HasIndex("OpPhysicalAssetRequirementTypeKey");

                    b.HasIndex("OpSegmentRequirementTypeKey");

                    b.ToTable("OpPhysicalAssetRequirements");
                });

            modelBuilder.Entity("OpPhysicalAssetSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPhysicalAssetSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpPhysicalAssetSpecificationPropertyTypeKey");

                    b.HasIndex("OpPhysicalAssetSpecificationTypeKey");

                    b.ToTable("OpPhysicalAssetSpecificationProperties");
                });

            modelBuilder.Entity("OpPhysicalAssetSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDirectiveTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpPhysicalAssetSpecificationTypeKey");

                    b.HasIndex("OperationsSegmentTypeKey");

                    b.HasIndex("WorkDirectiveTypeKey");

                    b.HasIndex("WorkMasterTypeKey");

                    b.ToTable("OpPhysicalAssetSpecifications");
                });

            modelBuilder.Entity("OpProcessSegmentCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpProcessSegmentCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OpProcessSegmentCapabilityTypeKey");

                    b.HasIndex("OperationsCapabilityTypeKey");

                    b.ToTable("OpProcessSegmentCapabilityProperties");
                });

            modelBuilder.Entity("OpSegmentDataType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentDataTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("JobResponseTypeKey");

                    b.HasIndex("OpSegmentDataTypeKey");

                    b.HasIndex("OpSegmentResponseTypeKey");

                    b.ToTable("OpSegmentDatas");
                });

            modelBuilder.Entity("OpSegmentRequirementType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpSegmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsRequestTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpSegmentRequirementTypeKey");

                    b.HasIndex("OperationsRequestTypeKey");

                    b.ToTable("OpSegmentRequirements");
                });

            modelBuilder.Entity("OpSegmentResponseType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpSegmentRequirementTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpSegmentResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsRequestTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpSegmentRequirementTypeKey");

                    b.HasIndex("OpSegmentResponseTypeKey");

                    b.HasIndex("OperationsRequestTypeKey");

                    b.HasIndex("OperationsResponseTypeKey");

                    b.ToTable("OpSegmentResponses");
                });

            modelBuilder.Entity("OperationalLocationClassPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationalLocationClassPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationalLocationClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OperationalLocationClassPropertyTypeKey");

                    b.HasIndex("OperationalLocationClassTypeKey");

                    b.ToTable("OperationalLocationClassProperties");
                });

            modelBuilder.Entity("OperationalLocationClassType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationalLocationClassChildKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationalLocationClassChildKey");

                    b.ToTable("OperationalLocationClasses");
                });

            modelBuilder.Entity("OperationalLocationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationalLocationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationalLocationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OperationalLocationPropertyTypeKey");

                    b.HasIndex("OperationalLocationTypeKey");

                    b.ToTable("OperationalLocationProperties");
                });

            modelBuilder.Entity("OperationalLocationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationalLocationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationalLocationTypeKey");

                    b.ToTable("OperationalLocations");
                });

            modelBuilder.Entity("OperationsCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("OperationsCapabilities");
                });

            modelBuilder.Entity("OperationsDefinitionType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("OperationsDefinitions");
                });

            modelBuilder.Entity("OperationsEventClassPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsEventClassPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsEventClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsEventDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OperationsEventClassPropertyTypeKey");

                    b.HasIndex("OperationsEventClassTypeKey");

                    b.HasIndex("OperationsEventDefinitionTypeKey");

                    b.ToTable("OperationsEventClassProperties");
                });

            modelBuilder.Entity("OperationsEventClassType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsEventClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationsEventClassTypeKey");

                    b.ToTable("OperationsEventClasses");
                });

            modelBuilder.Entity("OperationsEventDefinitionType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsEventDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationsEventDefinitionTypeKey");

                    b.ToTable("OperationsEventDefinitions");
                });

            modelBuilder.Entity("OperationsEventPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsEventTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OperationsEventTypeKey");

                    b.ToTable("OperationsEventProperties");
                });

            modelBuilder.Entity("OperationsEventType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsEventTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationsEventTypeKey");

                    b.ToTable("OperationsEvents");
                });

            modelBuilder.Entity("OperationsMaterialBillItemType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsMaterialBillItemTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsMaterialBillTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationsMaterialBillItemTypeKey");

                    b.HasIndex("OperationsMaterialBillTypeKey");

                    b.ToTable("OperationsMaterialBillItems");
                });

            modelBuilder.Entity("OperationsMaterialBillType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("OperationsMaterialBills");
                });

            modelBuilder.Entity("OperationsPerformanceType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("OperationsPerformances");
                });

            modelBuilder.Entity("OperationsRequestType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsScheduleTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationsScheduleTypeKey");

                    b.ToTable("OperationsRequests");
                });

            modelBuilder.Entity("OperationsResponseType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsPerformanceTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationsPerformanceTypeKey");

                    b.ToTable("OperationsResponses");
                });

            modelBuilder.Entity("OperationsScheduleType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("OperationsSchedules");
                });

            modelBuilder.Entity("OperationsSegmentType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OperationsDefinitionTypeKey");

                    b.HasIndex("OperationsSegmentTypeKey");

                    b.ToTable("OperationsSegments");
                });

            modelBuilder.Entity("PersonPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PersonPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("PersonPropertyTypeKey");

                    b.HasIndex("PersonTypeKey");

                    b.ToTable("PeoplesProperties");
                });

            modelBuilder.Entity("PersonType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("PersonnelClassPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PersonnelClassPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonnelClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("PersonnelClassPropertyTypeKey");

                    b.HasIndex("PersonnelClassTypeKey");

                    b.ToTable("PersonnelClassProperties");
                });

            modelBuilder.Entity("PersonnelClassType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("PersonnelClasses");
                });

            modelBuilder.Entity("PersonnelSegmentSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PersonnelSegmentSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonnelSegmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("PersonnelSegmentSpecificationPropertyTypeKey");

                    b.HasIndex("PersonnelSegmentSpecificationTypeKey");

                    b.ToTable("PersonnelSegmentSpecificationProperties");
                });

            modelBuilder.Entity("PersonnelSegmentSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PersonnelSegmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("PersonnelSegmentSpecificationTypeKey");

                    b.HasIndex("ProcessSegmentTypeKey");

                    b.ToTable("PersonnelSegmentSpecifications");
                });

            modelBuilder.Entity("PhysicalAssetClassPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAssetClassPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicalAssetClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("PhysicalAssetClassPropertyTypeKey");

                    b.HasIndex("PhysicalAssetClassTypeKey");

                    b.ToTable("PhysicalAssetClassProperties");
                });

            modelBuilder.Entity("PhysicalAssetClassType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAssetClassTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("PhysicalAssetClassTypeKey");

                    b.ToTable("PhysicalAssetClasses");
                });

            modelBuilder.Entity("PhysicalAssetPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAssetPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicalAssetTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("PhysicalAssetPropertyTypeKey");

                    b.HasIndex("PhysicalAssetTypeKey");

                    b.ToTable("PhysicalAssetProperties");
                });

            modelBuilder.Entity("PhysicalAssetSegmentSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAssetSegmentSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                    b.HasIndex("PhysicalAssetSegmentSpecificationTypeKey");

                    b.ToTable("PhysicalAssetSegmentSpecificationProperties");
                });

            modelBuilder.Entity("PhysicalAssetSegmentSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("PhysicalAssetSegmentSpecificationTypeKey");

                    b.HasIndex("ProcessSegmentTypeKey");

                    b.ToTable("PhysicalAssetSegmentSpecifications");
                });

            modelBuilder.Entity("PhysicalAssetType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentLevelKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAssetTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("EquipmentLevelKey");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("PhysicalAssetTypeKey");

                    b.ToTable("PhysicalAssets");
                });

            modelBuilder.Entity("ProcessSegmentType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("ProcessSegmentTypeKey");

                    b.ToTable("ProcessSegments");
                });

            modelBuilder.Entity("ProcessSegmentTypeProductSegmentType", b =>
                {
                    b.Property<string>("ProcessSgementsKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductSegmentsKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProcessSgementsKey", "ProductSegmentsKey");

                    b.HasIndex("ProductSegmentsKey");

                    b.ToTable("ProcessSegmentTypeProductSegmentType");
                });

            modelBuilder.Entity("ProductInformationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("ProductInformation");
                });

            modelBuilder.Entity("ProductSegmentType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseSegmentKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ProductInformationKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("BaseSegmentKey");

                    b.HasIndex("ProductInformationKey");

                    b.ToTable("ProductSegments");
                });

            modelBuilder.Entity("RNCPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RNCPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceNetworkConnectionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("RNCPropertyTypeKey");

                    b.HasIndex("ResourceNetworkConnectionTypeKey");

                    b.ToTable("ResourceNetworkConnectionProperties");
                });

            modelBuilder.Entity("RNCTypePropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("ResourceNetworkConnectionTypeTypeKey");

                    b.ToTable("ResourceNetworkConnectionTypeProperties");
                });

            modelBuilder.Entity("RRNPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RRNPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceRelationshipNetworkTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("RRNPropertyTypeKey");

                    b.HasIndex("ResourceRelationshipNetworkTypeKey");

                    b.ToTable("ResourceRelationshipNetworkProperties");
                });

            modelBuilder.Entity("ResourceNetworkConnectionType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromResourceReferenceKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceRelationshipNetworkTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToResourceReferenceKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("FromResourceReferenceKey");

                    b.HasIndex("ResourceRelationshipNetworkTypeKey");

                    b.HasIndex("ToResourceReferenceKey");

                    b.ToTable("ResourceNetworkConnections");
                });

            modelBuilder.Entity("ResourceNetworkConnectionTypeType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("ResourceNetworkConnectionTypes");
                });

            modelBuilder.Entity("ResourceReferencePropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceReferencePropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourceReferenceTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("ResourceReferencePropertyTypeKey");

                    b.HasIndex("ResourceReferenceTypeKey");

                    b.ToTable("ResourceReferencesProperties");
                });

            modelBuilder.Entity("ResourceReferenceType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("ResourceReferences");
                });

            modelBuilder.Entity("ResourceRelationshipNetworkType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("ResourceRelationshipNetworks");
                });

            modelBuilder.Entity("SegmentDependencyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OperationsSegmentTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessSegmentKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessSegment_AKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessSegment_BKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("OperationsSegmentTypeKey");

                    b.HasIndex("ProcessSegmentKey");

                    b.HasIndex("ProcessSegment_AKey");

                    b.HasIndex("ProcessSegment_BKey");

                    b.ToTable("SegmentDependencies");
                });

            modelBuilder.Entity("TestResultType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OpEquipmentActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpMaterialActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPersonnelActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpPhysicalAssetActualTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestResultTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("OpEquipmentActualTypeKey");

                    b.HasIndex("OpMaterialActualTypeKey");

                    b.HasIndex("OpPersonnelActualTypeKey");

                    b.HasIndex("OpPhysicalAssetActualTypeKey");

                    b.HasIndex("TestResultTypeKey");

                    b.ToTable("TestSpecificationResults");
                });

            modelBuilder.Entity("TestSpecificationCriteriaType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("TestSpecificationTypeKey");

                    b.ToTable("TestSpecificationCriterias");
                });

            modelBuilder.Entity("TestSpecificationEvaluatedPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("TestSpecificationTypeKey");

                    b.ToTable("TestSpecificationEvaluatedProperties");
                });

            modelBuilder.Entity("TestSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("TestSpecificationPropertyTypeKey");

                    b.HasIndex("TestSpecificationTypeKey");

                    b.ToTable("TestSpecificationProperties");
                });

            modelBuilder.Entity("TestSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("PhysicalSampleRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("PhysicalSampleRequiredSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("RecurrenceTimeInterval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("TestSpecificationTypeKey");

                    b.ToTable("TestSpecifications");
                });

            modelBuilder.Entity("WorkAlertDefinitionPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkAlertDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkAlertDefinitionTypeKey");

                    b.ToTable("WorkAlertDefinitionProperties");
                });

            modelBuilder.Entity("WorkAlertDefinitionType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("WorkAlertDefinitions");
                });

            modelBuilder.Entity("WorkAlertPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkAlertDefinitionPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkAlertPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkAlertTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkAlertDefinitionPropertyTypeKey");

                    b.HasIndex("WorkAlertPropertyTypeKey");

                    b.HasIndex("WorkAlertTypeKey");

                    b.ToTable("WorkAlertProperties");
                });

            modelBuilder.Entity("WorkAlertType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("WorkAlerts");
                });

            modelBuilder.Entity("WorkCalendarDefinitionEntryPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCalendarDefinitionEntryPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkCalendarDefinitionEntryPropertyTypeKey");

                    b.HasIndex("WorkCalendarDefinitionEntryTypeKey");

                    b.ToTable("WorkCalendarDefinitionEntryProperties");
                });

            modelBuilder.Entity("WorkCalendarDefinitionEntryType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkCalendarDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkCalendarDefinitionEntryTypeKey");

                    b.HasIndex("WorkCalendarDefinitionTypeKey");

                    b.ToTable("WorkCalendarDefinitionEntries");
                });

            modelBuilder.Entity("WorkCalendarDefinitionPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCalendarDefinitionPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkCalendarDefinitionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkCalendarDefinitionPropertyTypeKey");

                    b.HasIndex("WorkCalendarDefinitionTypeKey");

                    b.ToTable("WorkCalendarDefinitionProperties");
                });

            modelBuilder.Entity("WorkCalendarDefinitionType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("WorkCalendarDefinitions");
                });

            modelBuilder.Entity("WorkCalendarEntryPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCalendarEntryPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkCalendarEntryTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkCalendarEntryPropertyTypeKey");

                    b.HasIndex("WorkCalendarEntryTypeKey");

                    b.ToTable("WorkCalendarEntryProperties");
                });

            modelBuilder.Entity("WorkCalendarEntryType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCalendarEntryTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkCalendarTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkCalendarEntryTypeKey");

                    b.HasIndex("WorkCalendarTypeKey");

                    b.ToTable("WorkCalendarEntries");
                });

            modelBuilder.Entity("WorkCalendarPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCalendarPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkCalendarTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkCalendarPropertyTypeKey");

                    b.HasIndex("WorkCalendarTypeKey");

                    b.ToTable("WorkCalendarProperties");
                });

            modelBuilder.Entity("WorkCalendarType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("WorkCalendars");
                });

            modelBuilder.Entity("WorkCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("WorkCapabilities");
                });

            modelBuilder.Entity("WorkDirectiveType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDirectiveTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowSpecificationKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkDirectiveTypeKey");

                    b.HasIndex("WorkflowSpecificationKey");

                    b.ToTable("WorkDirectives");
                });

            modelBuilder.Entity("WorkMasterCapabilityType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkMasterCapabilityTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkCapabilityTypeKey");

                    b.HasIndex("WorkMasterCapabilityTypeKey");

                    b.ToTable("WorkMasterCapabilities");
                });

            modelBuilder.Entity("WorkMasterType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkMasterTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowSpecificationKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkMasterTypeKey");

                    b.HasIndex("WorkflowSpecificationKey");

                    b.ToTable("WorkMasters");
                });

            modelBuilder.Entity("WorkPerformanceType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPerformanceTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkPerformanceTypeKey");

                    b.ToTable("WorkPerformances");
                });

            modelBuilder.Entity("WorkRecordEntryType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkRecordEntryTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkRecordTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkRecordEntryTypeKey");

                    b.HasIndex("WorkRecordTypeKey");

                    b.ToTable("WorkRecordEntries");
                });

            modelBuilder.Entity("WorkRecordType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChangeIndication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkRecordTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkRecordTypeKey");

                    b.ToTable("WorkRecords");
                });

            modelBuilder.Entity("WorkRequestType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkRequestTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkScheduleTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkRequestTypeKey");

                    b.HasIndex("WorkScheduleTypeKey");

                    b.ToTable("WorkRequests");
                });

            modelBuilder.Entity("WorkResponseType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPerformanceTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkResponseTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkPerformanceTypeKey");

                    b.HasIndex("WorkResponseTypeKey");

                    b.ToTable("WorkResponses");
                });

            modelBuilder.Entity("WorkScheduleType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkScheduleTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkScheduleTypeKey");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowSpecificationConnectionPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowSpecificationConnectionTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkflowSpecificationConnectionPropertyTypeKey");

                    b.HasIndex("WorkflowSpecificationConnectionTypeKey");

                    b.ToTable("WorkflowSpecificationConnectionProperties");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkflowSpecificationTypeKey");

                    b.ToTable("WorkflowSpecificationConnections");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionTypePropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowSpecificationConnectionTypePropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkflowSpecificationConnectionTypePropertyTypeKey");

                    b.HasIndex("WorkflowSpecificationConnectionTypeTypeKey");

                    b.ToTable("WorkflowSpecificationConnectionTypeProperties");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionTypeType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("WorkflowSpecificationConnectionTypes");
                });

            modelBuilder.Entity("WorkflowSpecificationNodePropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowSpecificationNodePropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowSpecificationNodeTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkflowSpecificationNodePropertyTypeKey");

                    b.HasIndex("WorkflowSpecificationNodeTypeKey");

                    b.ToTable("WorkflowSpecificationNodeProperties");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowSpecificationKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.HasIndex("WorkflowSpecificationKey");

                    b.ToTable("SpecificationNodes");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeTypePropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowSpecificationNodeTypePropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkflowSpecificationNodeTypePropertyTypeKey");

                    b.HasIndex("WorkflowSpecificationNodeTypeTypeKey");

                    b.ToTable("WorkflowSpecificationNodeTypeProperties");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeTypeType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("SpecificationNodeTypes");
                });

            modelBuilder.Entity("WorkflowSpecificationPropertyType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowSpecificationPropertyTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowSpecificationTypeKey")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("WorkflowSpecificationPropertyTypeKey");

                    b.HasIndex("WorkflowSpecificationTypeKey");

                    b.ToTable("WorkflowSpecificationProperties");
                });

            modelBuilder.Entity("WorkflowSpecificationType", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HierarchyScopeKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("HierarchyScopeKey");

                    b.ToTable("WorkflowSpecifications");
                });

            modelBuilder.Entity("BaseDB.用户_组织", b =>
                {
                    b.HasOne("BaseDB.用户", "用户")
                        .WithMany("所属的组织列表")
                        .HasForeignKey("用户Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseDB.组织", "组织")
                        .WithMany("下辖的用户列表")
                        .HasForeignKey("组织Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("用户");

                    b.Navigation("组织");
                });

            modelBuilder.Entity("BaseDB.用户_角色", b =>
                {
                    b.HasOne("BaseDB.用户", "用户")
                        .WithMany("拥有的角色列表")
                        .HasForeignKey("用户Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseDB.角色", "角色")
                        .WithMany("下辖的用户列表")
                        .HasForeignKey("角色Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("角色");

                    b.Navigation("用户");
                });

            modelBuilder.Entity("BaseDB.组织", b =>
                {
                    b.HasOne("BaseDB.组织", "上级组织")
                        .WithMany("下级组织列表")
                        .HasForeignKey("上级组织Key");

                    b.Navigation("上级组织");
                });

            modelBuilder.Entity("BaseDB.菜单", b =>
                {
                    b.HasOne("BaseDB.菜单", "上级菜单")
                        .WithMany("下级菜单列表")
                        .HasForeignKey("上级菜单Key");

                    b.Navigation("上级菜单");
                });

            modelBuilder.Entity("BaseDB.角色_菜单", b =>
                {
                    b.HasOne("BaseDB.菜单", "菜单")
                        .WithMany("可访问的角色列表")
                        .HasForeignKey("菜单Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseDB.角色", "角色")
                        .WithMany("可访问的菜单列表")
                        .HasForeignKey("角色Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("菜单");

                    b.Navigation("角色");
                });

            modelBuilder.Entity("EquipmentClassPropertyType", b =>
                {
                    b.HasOne("EquipmentClassPropertyType", null)
                        .WithMany("EquipmentClassPropertyChild")
                        .HasForeignKey("EquipmentClassPropertyTypeKey");

                    b.HasOne("EquipmentClassType", null)
                        .WithMany("EquipmentClassProperty")
                        .HasForeignKey("EquipmentClassTypeKey");

                    b.OwnsOne("ClassPropertyTypeType", "PropertyType", b1 =>
                        {
                            b1.Property<string>("EquipmentClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassPropertyTypeKey");

                            b1.ToTable("EquipmentClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("EquipmentClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassPropertyTypeKey");

                            b1.ToTable("EquipmentClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("EquipmentClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("EquipmentClassPropertyTypeKey", "Id");

                            b1.ToTable("EquipmentClassProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("ID");

                    b.Navigation("PropertyType");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("EquipmentClassType", b =>
                {
                    b.HasOne("EquipmentClassType", null)
                        .WithMany("EquipmentClassChild")
                        .HasForeignKey("EquipmentClassTypeKey");

                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("EquipmentClassTypeKey");

                            b1.ToTable("EquipmentClasses");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("EquipmentClassTypeKey");

                            b1.ToTable("EquipmentClasses");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("EquipmentClassTypeKey");

                            b1.ToTable("EquipmentClasses");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassTypeKey");

                            b1.ToTable("EquipmentClasses");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsOne("EquipmentLevelType", "EquipmentLevel", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassTypeKey");

                            b1.ToTable("EquipmentClasses");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentClassBaseID", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassTypeKey", "Id");

                            b1.ToTable("EquipmentClasses_EquipmentClassBaseID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentSourceID", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassTypeKey", "Id");

                            b1.ToTable("EquipmentClasses_EquipmentSourceID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassTypeKey");

                            b1.ToTable("EquipmentClasses");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassTypeKey", "Id");

                            b1.ToTable("EquipmentClasses_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("EquipmentClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentClassTypeKey");

                            b1.ToTable("EquipmentClasses");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentClassTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("EquipmentClassBaseID");

                    b.Navigation("EquipmentLevel");

                    b.Navigation("EquipmentSourceID");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("EquipmentPropertyType", b =>
                {
                    b.HasOne("EquipmentPropertyType", null)
                        .WithMany("EquipmentPropertyChild")
                        .HasForeignKey("EquipmentPropertyTypeKey");

                    b.HasOne("EquipmentType", null)
                        .WithMany("EquipmentProperty")
                        .HasForeignKey("EquipmentTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("EquipmentPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentPropertyTypeKey");

                            b1.ToTable("EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentClassPropertyID", b1 =>
                        {
                            b1.Property<string>("EquipmentPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentPropertyTypeKey");

                            b1.ToTable("EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("EquipmentPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentPropertyTypeKey");

                            b1.ToTable("EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("EquipmentPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("EquipmentPropertyTypeKey", "Id");

                            b1.ToTable("EquipmentProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassPropertyID");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("EquipmentSegmentSpecificationPropertyType", b =>
                {
                    b.HasOne("EquipmentSegmentSpecificationPropertyType", null)
                        .WithMany("EquipmentSegmentSpecificationPropertyChild")
                        .HasForeignKey("EquipmentSegmentSpecificationPropertyTypeKey");

                    b.HasOne("EquipmentSegmentSpecificationType", null)
                        .WithMany("EquipmentSegmentSpecificationProperty")
                        .HasForeignKey("EquipmentSegmentSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("EquipmentSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentClassPropertyID", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("EquipmentSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentPropertyID", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("EquipmentSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("EquipmentSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("EquipmentSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("EquipmentSegmentSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("EquipmentSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("EquipmentSegmentSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeEquipmentSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassPropertyID");

                    b.Navigation("EquipmentPropertyID");

                    b.Navigation("ID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("EquipmentSegmentSpecificationType", b =>
                {
                    b.HasOne("EquipmentSegmentSpecificationType", null)
                        .WithMany("EquipmentSegmentSpecificationChild")
                        .HasForeignKey("EquipmentSegmentSpecificationTypeKey");

                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("ProcessSegmentType", null)
                        .WithMany("EquipmentSegmentSpecification")
                        .HasForeignKey("ProcessSegmentTypeKey");

                    b.OwnsOne("CodeType", "EquipmentUse", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey");

                            b1.ToTable("EquipmentSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey");

                            b1.ToTable("EquipmentSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentClassID", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("EquipmentSegmentSpecifications_EquipmentClassID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentID", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("EquipmentSegmentSpecifications_EquipmentID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey");

                            b1.ToTable("EquipmentSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("EquipmentSegmentSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("EquipmentSegmentSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("EquipmentSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeEquipmentSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey");

                            b1.ToTable("EquipmentSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeEquipmentSegmentSpecificationTypeKey");

                                    b2.ToTable("EquipmentSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeEquipmentSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeEquipmentSegmentSpecificationTypeKey");

                                    b2.ToTable("EquipmentSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeEquipmentSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("EquipmentSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("EquipmentSegmentSpecificationTypeKey");

                            b1.ToTable("EquipmentSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentSegmentSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");

                                    b2.ToTable("EquipmentSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");

                                    b2.ToTable("EquipmentSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");

                                    b2.ToTable("EquipmentSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");

                                    b2.ToTable("EquipmentSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassID");

                    b.Navigation("EquipmentID");

                    b.Navigation("EquipmentUse");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("EquipmentType", b =>
                {
                    b.HasOne("EquipmentType", null)
                        .WithMany("EquipmentChild")
                        .HasForeignKey("EquipmentTypeKey");

                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsMany("EquipmentAssetMappingType", "EquipmentAssetMapping", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("EquipmentTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("Equipments_EquipmentAssetMapping");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.OwnsOne("DateTimeType", "EndTime", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("Equipments_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "StartTime", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("Equipments_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "EquipmentID", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("Equipments_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "PhysicalAssetID", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("Equipments_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypeEquipmentTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.Navigation("EndTime");

                            b1.Navigation("EquipmentID");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("PhysicalAssetID");

                            b1.Navigation("StartTime");
                        });

                    b.OwnsOne("EquipmentLevelType", "EquipmentLevel", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentClassID", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentTypeKey", "Id");

                            b1.ToTable("Equipments_EquipmentClassID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetID", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentTypeKey", "Id");

                            b1.ToTable("Equipments_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeEquipmentTypeKey");

                                    b2.ToTable("Equipments");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeEquipmentTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeEquipmentTypeKey");

                                    b2.ToTable("Equipments");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeEquipmentTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("EquipmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("EquipmentTypeKey");

                            b1.ToTable("Equipments");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentTypeKey");

                                    b2.ToTable("Equipments");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentTypeKey");

                                    b2.ToTable("Equipments");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentTypeKey");

                                    b2.ToTable("Equipments");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeEquipmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeEquipmentTypeKey");

                                    b2.ToTable("Equipments");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeEquipmentTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("EquipmentAssetMapping");

                    b.Navigation("EquipmentClassID");

                    b.Navigation("EquipmentLevel");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("PhysicalAssetID");

                    b.Navigation("PublishedDate");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("HierarchyScopeType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScopeChild")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeChildKey");

                    b.HasOne("OpOperationsSegmentCapabilityType", null)
                        .WithMany("HierarchyScope")
                        .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");

                    b.HasOne("OpProcessSegmentCapabilityType", null)
                        .WithMany("HierarchyScope")
                        .HasForeignKey("OpProcessSegmentCapabilityTypeKey");

                    b.HasOne("WorkMasterCapabilityType", null)
                        .WithMany("HierarchyScope")
                        .HasForeignKey("WorkMasterCapabilityTypeKey");

                    b.OwnsOne("EquipmentLevelType", "Item", b1 =>
                        {
                            b1.Property<string>("HierarchyScopeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HierarchyScopeTypeKey");

                            b1.ToTable("HierarchyScopes");

                            b1.WithOwner()
                                .HasForeignKey("HierarchyScopeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentID", b1 =>
                        {
                            b1.Property<string>("HierarchyScopeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HierarchyScopeTypeKey");

                            b1.ToTable("HierarchyScopes");

                            b1.WithOwner()
                                .HasForeignKey("HierarchyScopeTypeKey");
                        });

                    b.Navigation("EquipmentID");

                    b.Navigation("HierarchyScopeChild");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("JobListType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("JobListTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobListTypeKey");

                            b1.ToTable("JobLists");

                            b1.WithOwner()
                                .HasForeignKey("JobListTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("JobListTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobListTypeKey");

                            b1.ToTable("JobLists");

                            b1.WithOwner()
                                .HasForeignKey("JobListTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("JobListTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobListTypeKey");

                            b1.ToTable("JobLists");

                            b1.WithOwner()
                                .HasForeignKey("JobListTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("JobListTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobListTypeKey");

                            b1.ToTable("JobLists");

                            b1.WithOwner()
                                .HasForeignKey("JobListTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("JobListTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobListTypeKey");

                            b1.ToTable("JobLists");

                            b1.WithOwner()
                                .HasForeignKey("JobListTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("JobListTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobListTypeKey");

                            b1.ToTable("JobLists");

                            b1.WithOwner()
                                .HasForeignKey("JobListTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("JobListTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobListTypeKey");

                            b1.ToTable("JobLists");

                            b1.WithOwner()
                                .HasForeignKey("JobListTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("JobOrderType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobListType", null)
                        .WithMany("JobOrder")
                        .HasForeignKey("JobListTypeKey");

                    b.HasOne("WorkRequestType", null)
                        .WithMany("JobOrder")
                        .HasForeignKey("WorkRequestTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "SegmentRequirementID", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey", "Id");

                            b1.ToTable("JobOrders_SegmentRequirementID");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkMasterID", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkMasterVersion", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("JobOrderCommandRuleType", "CommandRule", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("JobOrderCommandType", "Command", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("JobOrderDispatchStatusType", "DispatchStatus", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobOrderTypeKey");

                            b1.ToTable("JobOrders");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");
                        });

                    b.OwnsMany("ParameterType", "JobOrderParameter", b1 =>
                        {
                            b1.Property<string>("JobOrderTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("JobOrderTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("JobOrders_JobOrderParameter");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("JobOrderTypeKey");

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeJobOrderTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId");

                                    b2.ToTable("JobOrders_JobOrderParameter");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeJobOrderTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId");

                                    b2.ToTable("JobOrders_JobOrderParameter");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ParameterSpecificationID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeJobOrderTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("JobOrders_JobOrderParameter_ParameterSpecificationID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ProcessSegmentParameterID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeJobOrderTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("JobOrders_JobOrderParameter_ProcessSegmentParameterID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("ValueType", "Value", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeJobOrderTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("JobOrders_JobOrderParameter_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeJobOrderTypeKey", "ParameterTypeId");

                                    b2.OwnsOne("DataTypeType", "DataType", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeJobOrderTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("JobOrders_JobOrderParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Key", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeJobOrderTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("JobOrders_JobOrderParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeJobOrderTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("JobOrders_JobOrderParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("ValueStringType", "ValueString", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeJobOrderTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("CharacterSetCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("EncodingCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Filename")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageLocaleID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("MimeCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Uri")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("JobOrders_JobOrderParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeJobOrderTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.Navigation("DataType");

                                    b2.Navigation("Key");

                                    b2.Navigation("UnitOfMeasure");

                                    b2.Navigation("ValueString");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("ParameterSpecificationID");

                            b1.Navigation("ProcessSegmentParameterID");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Command");

                    b.Navigation("CommandRule");

                    b.Navigation("Description");

                    b.Navigation("DispatchStatus");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("JobOrderParameter");

                    b.Navigation("PublishedDate");

                    b.Navigation("SegmentRequirementID");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkMasterID");

                    b.Navigation("WorkMasterVersion");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("JobResponseType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkDirectiveType", "WorkDirective")
                        .WithMany()
                        .HasForeignKey("WorkDirectiveKey");

                    b.HasOne("WorkResponseType", null)
                        .WithMany("JobResponse")
                        .HasForeignKey("WorkResponseTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "JobOrderID", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkDirectiveVersion", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkMasterID", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkMasterVersion", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkflowSpecificationID", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkflowSpecificationNodeID", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.OwnsOne("ResponseStateType", "JobState", b1 =>
                        {
                            b1.Property<string>("JobResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("JobResponseTypeKey");

                            b1.ToTable("JobResponses");

                            b1.WithOwner()
                                .HasForeignKey("JobResponseTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("JobOrderID");

                    b.Navigation("JobState");

                    b.Navigation("PublishedDate");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkDirective");

                    b.Navigation("WorkDirectiveVersion");

                    b.Navigation("WorkflowSpecificationID");

                    b.Navigation("WorkflowSpecificationNodeID");

                    b.Navigation("WorkMasterID");

                    b.Navigation("WorkMasterVersion");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("MaterialClassPropertyType", b =>
                {
                    b.HasOne("MaterialClassPropertyType", null)
                        .WithMany("MaterialClassPropertyChild")
                        .HasForeignKey("MaterialClassPropertyTypeKey");

                    b.HasOne("MaterialClassType", null)
                        .WithMany("MaterialClassProperty")
                        .HasForeignKey("MaterialClassTypeKey");

                    b.OwnsOne("ClassPropertyTypeType", "PropertyType", b1 =>
                        {
                            b1.Property<string>("MaterialClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassPropertyTypeKey");

                            b1.ToTable("MaterialClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassPropertyTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassPropertyTypeKey");

                            b1.ToTable("MaterialClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassPropertyTypeKey");

                            b1.ToTable("MaterialClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("MaterialClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialClassPropertyTypeKey", "Id");

                            b1.ToTable("MaterialClassProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PropertyType");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("MaterialClassType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("MaterialClassType", null)
                        .WithMany("AssemblyClass")
                        .HasForeignKey("MaterialClassTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialClassBaseID", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey", "Id");

                            b1.ToTable("MaterialClasses_MaterialClassBaseID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialDefinitionSourceID", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey", "Id");

                            b1.ToTable("MaterialClasses_MaterialDefinitionSourceID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey", "Id");

                            b1.ToTable("MaterialClasses_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("MaterialClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialClassTypeKey");

                            b1.ToTable("MaterialClasses");

                            b1.WithOwner()
                                .HasForeignKey("MaterialClassTypeKey");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassBaseID");

                    b.Navigation("MaterialDefinitionSourceID");

                    b.Navigation("PublishedDate");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("MaterialDefinitionPropertyType", b =>
                {
                    b.HasOne("MaterialDefinitionPropertyType", null)
                        .WithMany("MaterialDefinitionPropertyChild")
                        .HasForeignKey("MaterialDefinitionPropertyTypeKey");

                    b.HasOne("MaterialDefinitionType", null)
                        .WithMany("MaterialDefinitionProperty")
                        .HasForeignKey("MaterialDefinitionTypeKey");

                    b.OwnsOne("ClassPropertyTypeType", "PropertyType", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionPropertyTypeKey");

                            b1.ToTable("MaterialDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionPropertyTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionPropertyTypeKey");

                            b1.ToTable("MaterialDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionPropertyTypeKey");

                            b1.ToTable("MaterialDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialClassPropertyID", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionPropertyTypeKey");

                            b1.ToTable("MaterialDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionPropertyTypeKey");

                            b1.ToTable("MaterialDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialDefinitionPropertyTypeKey", "Id");

                            b1.ToTable("MaterialDefinitionProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassPropertyID");

                    b.Navigation("PropertyType");

                    b.Navigation("Value");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("MaterialDefinitionType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("MaterialDefinitionType", null)
                        .WithMany("AssemblyDefinition")
                        .HasForeignKey("MaterialDefinitionTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialClassID", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey", "Id");

                            b1.ToTable("MaterialDefinitions_MaterialClassID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialLotSourceID", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey", "Id");

                            b1.ToTable("MaterialDefinitions_MaterialLotSourceID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey", "Id");

                            b1.ToTable("MaterialDefinitions_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("MaterialDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("MaterialDefinitionTypeKey");

                            b1.ToTable("MaterialDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");

                                    b2.ToTable("MaterialDefinitions");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");

                                    b2.ToTable("MaterialDefinitions");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");

                                    b2.ToTable("MaterialDefinitions");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");

                                    b2.ToTable("MaterialDefinitions");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialDefinitionTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassID");

                    b.Navigation("MaterialLotSourceID");

                    b.Navigation("PublishedDate");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("MaterialLotPropertyType", b =>
                {
                    b.HasOne("MaterialLotPropertyType", null)
                        .WithMany("MaterialLotPropertyChild")
                        .HasForeignKey("MaterialLotPropertyTypeKey");

                    b.HasOne("MaterialLotType", null)
                        .WithMany("MaterialLotProperty")
                        .HasForeignKey("MaterialLotTypeKey");

                    b.HasOne("MaterialSubLotType", null)
                        .WithMany("MaterialLotProperty")
                        .HasForeignKey("MaterialSubLotTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialLotPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotPropertyTypeKey");

                            b1.ToTable("MaterialLotProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialLotPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotPropertyTypeKey");

                            b1.ToTable("MaterialLotProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialDefinitionPropertyID", b1 =>
                        {
                            b1.Property<string>("MaterialLotPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotPropertyTypeKey");

                            b1.ToTable("MaterialLotProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("MaterialLotPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialLotPropertyTypeKey", "Id");

                            b1.ToTable("MaterialLotProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialLotPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialLotProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialLotPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialLotProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialLotPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialLotProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialLotPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialLotProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialLotPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("MaterialDefinitionPropertyID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("MaterialLotType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("MaterialLotType", null)
                        .WithMany("AssemblyLot")
                        .HasForeignKey("MaterialLotTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("DispositionType", "Disposition", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialDefinitionID", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey", "Id");

                            b1.ToTable("MaterialLots_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialLotTypeKey", "Id");

                            b1.ToTable("MaterialLots_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "StorageLocation", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeMaterialLotTypeKey");

                                    b2.ToTable("MaterialLots");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeMaterialLotTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeMaterialLotTypeKey");

                                    b2.ToTable("MaterialLots");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeMaterialLotTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialLotTypeKey");

                                    b2.ToTable("MaterialLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialLotTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialLotTypeKey");

                                    b2.ToTable("MaterialLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialLotTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialLotTypeKey");

                                    b2.ToTable("MaterialLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialLotTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialLotTypeKey");

                                    b2.ToTable("MaterialLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialLotTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.OwnsOne("StatusType", "Status", b1 =>
                        {
                            b1.Property<string>("MaterialLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialLotTypeKey");

                            b1.ToTable("MaterialLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialLotTypeKey");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("Disposition");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialDefinitionID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("Status");

                    b.Navigation("StorageLocation");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("MaterialLotTypeMaterialSubLotType", b =>
                {
                    b.HasOne("MaterialLotType", null)
                        .WithMany()
                        .HasForeignKey("AssemblyLotKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialSubLotType", null)
                        .WithMany()
                        .HasForeignKey("AssemblySubLotKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialSegmentSpecificationPropertyType", b =>
                {
                    b.HasOne("MaterialSegmentSpecificationPropertyType", null)
                        .WithMany("MaterialSegmentSpecificationPropertyChild")
                        .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");

                    b.HasOne("MaterialSegmentSpecificationType", null)
                        .WithMany("MaterialSegmentSpecificationProperty")
                        .HasForeignKey("MaterialSegmentSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("MaterialSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("MaterialSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialClassPropertyID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("MaterialSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialDefinitionPropertyID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("MaterialSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialLotPropertyID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("MaterialSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeMaterialSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeMaterialSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassPropertyID");

                    b.Navigation("MaterialDefinitionPropertyID");

                    b.Navigation("MaterialLotPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("MaterialSegmentSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("ProcessSegmentType", null)
                        .WithMany("MaterialSegmentSpecification")
                        .HasForeignKey("ProcessSegmentTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey");

                            b1.ToTable("MaterialSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey");

                            b1.ToTable("MaterialSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey");

                            b1.ToTable("MaterialSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey");

                            b1.ToTable("MaterialSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialClassID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecifications_MaterialClassID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialDefinitionID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecifications_MaterialDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialLotID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecifications_MaterialLotID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialSublotID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecifications_MaterialSublotID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("MaterialUseType", "MaterialUse", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey");

                            b1.ToTable("MaterialSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("MaterialSegmentSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "StorageLocation", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey");

                            b1.ToTable("MaterialSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeMaterialSegmentSpecificationTypeKey");

                                    b2.ToTable("MaterialSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeMaterialSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeMaterialSegmentSpecificationTypeKey");

                                    b2.ToTable("MaterialSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeMaterialSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("MaterialSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("MaterialSegmentSpecificationTypeKey");

                            b1.ToTable("MaterialSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSegmentSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");

                                    b2.ToTable("MaterialSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");

                                    b2.ToTable("MaterialSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");

                                    b2.ToTable("MaterialSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");

                                    b2.ToTable("MaterialSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassID");

                    b.Navigation("MaterialDefinitionID");

                    b.Navigation("MaterialLotID");

                    b.Navigation("MaterialSublotID");

                    b.Navigation("MaterialUse");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StorageLocation");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("MaterialSegmentSpecificationTypeMaterialSegmentSpecificationType", b =>
                {
                    b.HasOne("MaterialSegmentSpecificationType", null)
                        .WithMany()
                        .HasForeignKey("AssemblySegmentSpecificationKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialSegmentSpecificationType", null)
                        .WithMany()
                        .HasForeignKey("MaterialSegmentSpecificationChildKey")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialSubLotType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("DispositionType", "Disposition", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialLotID", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey", "Id");

                            b1.ToTable("MaterialSubLots_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("MaterialSubLotTypeKey", "Id");

                            b1.ToTable("MaterialSubLots_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSubLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSubLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSubLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("MaterialSubLots_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeMaterialSubLotTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "StorageLocation", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeMaterialSubLotTypeKey");

                                    b2.ToTable("MaterialSubLots");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeMaterialSubLotTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeMaterialSubLotTypeKey");

                                    b2.ToTable("MaterialSubLots");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeMaterialSubLotTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSubLotTypeKey");

                                    b2.ToTable("MaterialSubLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSubLotTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSubLotTypeKey");

                                    b2.ToTable("MaterialSubLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSubLotTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSubLotTypeKey");

                                    b2.ToTable("MaterialSubLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSubLotTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeMaterialSubLotTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeMaterialSubLotTypeKey");

                                    b2.ToTable("MaterialSubLots");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeMaterialSubLotTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.OwnsOne("StatusType", "Status", b1 =>
                        {
                            b1.Property<string>("MaterialSubLotTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MaterialSubLotTypeKey");

                            b1.ToTable("MaterialSubLots");

                            b1.WithOwner()
                                .HasForeignKey("MaterialSubLotTypeKey");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("Disposition");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialLotID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("Status");

                    b.Navigation("StorageLocation");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("MaterialSubLotTypeMaterialSubLotType", b =>
                {
                    b.HasOne("MaterialSubLotType", null)
                        .WithMany()
                        .HasForeignKey("AssemblySubLotKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialSubLotType", null)
                        .WithMany()
                        .HasForeignKey("MaterialSubLotChildKey")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpEquipmentActualPropertyType", b =>
                {
                    b.HasOne("OpEquipmentActualPropertyType", null)
                        .WithMany("EquipmentActualPropertyChild")
                        .HasForeignKey("OpEquipmentActualPropertyTypeKey");

                    b.HasOne("OpEquipmentActualType", null)
                        .WithMany("EquipmentActualProperty")
                        .HasForeignKey("OpEquipmentActualTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualPropertyTypeKey");

                            b1.ToTable("OpEquipmentActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualPropertyTypeKey");

                            b1.ToTable("OpEquipmentActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualPropertyTypeKey");

                            b1.ToTable("OpEquipmentActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualPropertyTypeKey");

                            b1.ToTable("OpEquipmentActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentActualPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentActualProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualPropertyTypeKey");

                            b1.ToTable("OpEquipmentActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentActualPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentActualProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassPropertyID");

                    b.Navigation("EquipmentPropertyID");

                    b.Navigation("ID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpEquipmentActualType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobResponseType", null)
                        .WithMany("EquipmentActual")
                        .HasForeignKey("JobResponseTypeKey");

                    b.HasOne("OpEquipmentActualType", null)
                        .WithMany("EquipmentActualChild")
                        .HasForeignKey("OpEquipmentActualTypeKey");

                    b.HasOne("OpSegmentResponseType", null)
                        .WithMany("EquipmentActual")
                        .HasForeignKey("OpSegmentResponseTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualTypeKey");

                            b1.ToTable("OpEquipmentActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");
                        });

                    b.OwnsOne("EquipmentUseType", "EquipmentUse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualTypeKey");

                            b1.ToTable("OpEquipmentActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentClassID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualTypeKey", "Id");

                            b1.ToTable("OpEquipmentActuals_EquipmentClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualTypeKey", "Id");

                            b1.ToTable("OpEquipmentActuals_EquipmentID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualTypeKey");

                            b1.ToTable("OpEquipmentActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentActualTypeKey", "Id");

                            b1.ToTable("OpEquipmentActuals_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentActualTypeKey");

                            b1.ToTable("OpEquipmentActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentActualTypeKey");

                            b1.ToTable("OpEquipmentActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentActualTypeKey");

                                    b2.ToTable("OpEquipmentActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentActualTypeKey");

                                    b2.ToTable("OpEquipmentActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentActualTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpEquipmentActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentActualTypeKey");

                            b1.ToTable("OpEquipmentActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentActualTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");

                                    b2.ToTable("OpEquipmentActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");

                                    b2.ToTable("OpEquipmentActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");

                                    b2.ToTable("OpEquipmentActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");

                                    b2.ToTable("OpEquipmentActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentActualTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassID");

                    b.Navigation("EquipmentID");

                    b.Navigation("EquipmentUse");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");
                });

            modelBuilder.Entity("OpEquipmentCapabilityPropertyType", b =>
                {
                    b.HasOne("OpEquipmentCapabilityPropertyType", null)
                        .WithMany("EquipmentCapabilityPropertyChild")
                        .HasForeignKey("OpEquipmentCapabilityPropertyTypeKey");

                    b.HasOne("OpEquipmentCapabilityType", null)
                        .WithMany("EquipmentCapabilityProperty")
                        .HasForeignKey("OpEquipmentCapabilityTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityPropertyTypeKey");

                            b1.ToTable("OpEquipmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityPropertyTypeKey");

                            b1.ToTable("OpEquipmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityPropertyTypeKey");

                            b1.ToTable("OpEquipmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityPropertyTypeKey");

                            b1.ToTable("OpEquipmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentCapabilityProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentCapabilityProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassPropertyID");

                    b.Navigation("EquipmentPropertyID");

                    b.Navigation("ID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpEquipmentCapabilityType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpEquipmentCapabilityType", null)
                        .WithMany("EquipmentCapabilityChild")
                        .HasForeignKey("OpEquipmentCapabilityTypeKey");

                    b.HasOne("OpOperationsSegmentCapabilityType", null)
                        .WithMany("EquipmentCapability")
                        .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");

                    b.HasOne("OpProcessSegmentCapabilityType", null)
                        .WithMany("EquipmentCapability")
                        .HasForeignKey("OpProcessSegmentCapabilityTypeKey");

                    b.HasOne("OperationsCapabilityType", null)
                        .WithMany("EquipmentCapability")
                        .HasForeignKey("OperationsCapabilityTypeKey");

                    b.HasOne("WorkCapabilityType", null)
                        .WithMany("EquipmentCapability")
                        .HasForeignKey("WorkCapabilityTypeKey");

                    b.HasOne("WorkMasterCapabilityType", null)
                        .WithMany("EquipmentCapability")
                        .HasForeignKey("WorkMasterCapabilityTypeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsOne("ConfidenceFactorType", "ConfidenceFactor", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsOne("EquipmentUseType", "EquipmentUse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentClassID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey", "Id");

                            b1.ToTable("OpEquipmentCapabilities_EquipmentClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey", "Id");

                            b1.ToTable("OpEquipmentCapabilities_EquipmentID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentCapabilityTypeKey", "Id");

                            b1.ToTable("OpEquipmentCapabilities_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentCapabilityTypeKey");

                                    b2.ToTable("OpEquipmentCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentCapabilityTypeKey");

                                    b2.ToTable("OpEquipmentCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentCapabilityTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpEquipmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentCapabilityTypeKey");

                            b1.ToTable("OpEquipmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentCapabilityTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");

                                    b2.ToTable("OpEquipmentCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");

                                    b2.ToTable("OpEquipmentCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");

                                    b2.ToTable("OpEquipmentCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");

                                    b2.ToTable("OpEquipmentCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentCapabilityTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("ConfidenceFactor");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("EquipmentClassID");

                    b.Navigation("EquipmentID");

                    b.Navigation("EquipmentUse");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("Reason");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StartTime");
                });

            modelBuilder.Entity("OpEquipmentRequirementPropertyType", b =>
                {
                    b.HasOne("OpEquipmentRequirementPropertyType", null)
                        .WithMany("EquipmentRequirementPropertyChild")
                        .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");

                    b.HasOne("OpEquipmentRequirementType", null)
                        .WithMany("EquipmentRequirementProperty")
                        .HasForeignKey("OpEquipmentRequirementTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementPropertyTypeKey");

                            b1.ToTable("OpEquipmentRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementPropertyTypeKey");

                            b1.ToTable("OpEquipmentRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementPropertyTypeKey");

                            b1.ToTable("OpEquipmentRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementPropertyTypeKey");

                            b1.ToTable("OpEquipmentRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentRequirementProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementPropertyTypeKey");

                            b1.ToTable("OpEquipmentRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentRequirementProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassPropertyID");

                    b.Navigation("EquipmentPropertyID");

                    b.Navigation("ID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpEquipmentRequirementType", b =>
                {
                    b.HasOne("HierarchyScopeType", "EquipmentLevel")
                        .WithMany()
                        .HasForeignKey("EquipmentLevelKey");

                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobOrderType", null)
                        .WithMany("EquipmentRequirement")
                        .HasForeignKey("JobOrderTypeKey");

                    b.HasOne("OpEquipmentRequirementType", null)
                        .WithMany("EquipmentRequirementChild")
                        .HasForeignKey("OpEquipmentRequirementTypeKey");

                    b.HasOne("OpSegmentRequirementType", null)
                        .WithMany("EquipmentRequirement")
                        .HasForeignKey("OpSegmentRequirementTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementTypeKey");

                            b1.ToTable("OpEquipmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");
                        });

                    b.OwnsOne("EquipmentUseType", "EquipmentUse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementTypeKey");

                            b1.ToTable("OpEquipmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentClassID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementTypeKey", "Id");

                            b1.ToTable("OpEquipmentRequirements_EquipmentClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementTypeKey", "Id");

                            b1.ToTable("OpEquipmentRequirements_EquipmentID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementTypeKey");

                            b1.ToTable("OpEquipmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementTypeKey", "Id");

                            b1.ToTable("OpEquipmentRequirements_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentRequirementTypeKey", "Id");

                            b1.ToTable("OpEquipmentRequirements_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentRequirementTypeKey");

                            b1.ToTable("OpEquipmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentRequirementTypeKey");

                            b1.ToTable("OpEquipmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentRequirementTypeKey");

                                    b2.ToTable("OpEquipmentRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentRequirementTypeKey");

                                    b2.ToTable("OpEquipmentRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentRequirementTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpEquipmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentRequirementTypeKey");

                            b1.ToTable("OpEquipmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentRequirementTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");

                                    b2.ToTable("OpEquipmentRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");

                                    b2.ToTable("OpEquipmentRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");

                                    b2.ToTable("OpEquipmentRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");

                                    b2.ToTable("OpEquipmentRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentRequirementTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassID");

                    b.Navigation("EquipmentID");

                    b.Navigation("EquipmentLevel");

                    b.Navigation("EquipmentUse");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpEquipmentSpecificationPropertyType", b =>
                {
                    b.HasOne("OpEquipmentSpecificationPropertyType", null)
                        .WithMany("EquipmentSpecificationPropertyChild")
                        .HasForeignKey("OpEquipmentSpecificationPropertyTypeKey");

                    b.HasOne("OpEquipmentSpecificationType", null)
                        .WithMany("EquipmentSpecificationProperty")
                        .HasForeignKey("OpEquipmentSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationPropertyTypeKey");

                            b1.ToTable("OpEquipmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationPropertyTypeKey");

                            b1.ToTable("OpEquipmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "EquipmentPropertyID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationPropertyTypeKey");

                            b1.ToTable("OpEquipmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationPropertyTypeKey");

                            b1.ToTable("OpEquipmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpEquipmentSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpEquipmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpEquipmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpEquipmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassPropertyID");

                    b.Navigation("EquipmentPropertyID");

                    b.Navigation("ID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpEquipmentSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpEquipmentSpecificationType", null)
                        .WithMany("EquipmentSpecificationChild")
                        .HasForeignKey("OpEquipmentSpecificationTypeKey");

                    b.HasOne("OperationsSegmentType", null)
                        .WithMany("EquipmentSpecification")
                        .HasForeignKey("OperationsSegmentTypeKey");

                    b.HasOne("WorkDirectiveType", null)
                        .WithMany("EquipmentSpecification")
                        .HasForeignKey("WorkDirectiveTypeKey");

                    b.HasOne("WorkMasterType", null)
                        .WithMany("EquipmentSpecification")
                        .HasForeignKey("WorkMasterTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey");

                            b1.ToTable("OpEquipmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");
                        });

                    b.OwnsOne("EquipmentUseType", "EquipmentUse", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey");

                            b1.ToTable("OpEquipmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentClassID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey", "Id");

                            b1.ToTable("OpEquipmentSpecifications_EquipmentClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey", "Id");

                            b1.ToTable("OpEquipmentSpecifications_EquipmentID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey");

                            b1.ToTable("OpEquipmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey", "Id");

                            b1.ToTable("OpEquipmentSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpEquipmentSpecificationTypeKey", "Id");

                            b1.ToTable("OpEquipmentSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpEquipmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpEquipmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey");

                            b1.ToTable("OpEquipmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentSpecificationTypeKey");

                                    b2.ToTable("OpEquipmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpEquipmentSpecificationTypeKey");

                                    b2.ToTable("OpEquipmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpEquipmentSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpEquipmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpEquipmentSpecificationTypeKey");

                            b1.ToTable("OpEquipmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpEquipmentSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");

                                    b2.ToTable("OpEquipmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");

                                    b2.ToTable("OpEquipmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");

                                    b2.ToTable("OpEquipmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");

                                    b2.ToTable("OpEquipmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpEquipmentSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentClassID");

                    b.Navigation("EquipmentID");

                    b.Navigation("EquipmentUse");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpMaterialActualPropertyType", b =>
                {
                    b.HasOne("OpMaterialActualPropertyType", null)
                        .WithMany("MaterialActualPropertyChild")
                        .HasForeignKey("OpMaterialActualPropertyTypeKey");

                    b.HasOne("OpMaterialActualType", null)
                        .WithMany("MaterialActualProperty")
                        .HasForeignKey("OpMaterialActualTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualPropertyTypeKey");

                            b1.ToTable("OpMaterialActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualPropertyTypeKey");

                            b1.ToTable("OpMaterialActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualPropertyTypeKey");

                            b1.ToTable("OpMaterialActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialDefinitionPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualPropertyTypeKey");

                            b1.ToTable("OpMaterialActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialLotPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualPropertyTypeKey");

                            b1.ToTable("OpMaterialActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialActualPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialActualProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualPropertyTypeKey");

                            b1.ToTable("OpMaterialActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialActualPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialActualProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassPropertyID");

                    b.Navigation("MaterialDefinitionPropertyID");

                    b.Navigation("MaterialLotPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpMaterialActualType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobResponseType", null)
                        .WithMany("MaterialActual")
                        .HasForeignKey("JobResponseTypeKey");

                    b.HasOne("OpMaterialActualType", null)
                        .WithMany("AssemblyActual")
                        .HasForeignKey("OpMaterialActualTypeKey");

                    b.HasOne("OpSegmentResponseType", null)
                        .WithMany("MaterialActual")
                        .HasForeignKey("OpSegmentResponseTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialClassID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey", "Id");

                            b1.ToTable("OpMaterialActuals_MaterialClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialDefinitionID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey", "Id");

                            b1.ToTable("OpMaterialActuals_MaterialDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey", "Id");

                            b1.ToTable("OpMaterialActuals_MaterialLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialSubLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey", "Id");

                            b1.ToTable("OpMaterialActuals_MaterialSubLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsOne("MaterialUseType", "MaterialUse", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialActualTypeKey", "Id");

                            b1.ToTable("OpMaterialActuals_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "StorageLocation", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialActualTypeKey");

                                    b2.ToTable("OpMaterialActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialActualTypeKey");

                                    b2.ToTable("OpMaterialActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialActualTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpMaterialActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialActualTypeKey");

                            b1.ToTable("OpMaterialActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialActualTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialActualTypeKey");

                                    b2.ToTable("OpMaterialActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialActualTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialActualTypeKey");

                                    b2.ToTable("OpMaterialActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialActualTypeKey");

                                    b2.ToTable("OpMaterialActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialActualTypeKey");

                                    b2.ToTable("OpMaterialActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialActualTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassID");

                    b.Navigation("MaterialDefinitionID");

                    b.Navigation("MaterialLotID");

                    b.Navigation("MaterialSubLotID");

                    b.Navigation("MaterialUse");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("OpMaterialCapabilityPropertyType", b =>
                {
                    b.HasOne("OpMaterialCapabilityPropertyType", null)
                        .WithMany("MateralCapabilityPropertyChild")
                        .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");

                    b.HasOne("OpMaterialCapabilityType", null)
                        .WithMany("MaterialCapabilityProperty")
                        .HasForeignKey("OpMaterialCapabilityTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityPropertyTypeKey");

                            b1.ToTable("OpMaterialCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityPropertyTypeKey");

                            b1.ToTable("OpMaterialCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityPropertyTypeKey");

                            b1.ToTable("OpMaterialCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialDefinitionPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityPropertyTypeKey");

                            b1.ToTable("OpMaterialCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialLotPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityPropertyTypeKey");

                            b1.ToTable("OpMaterialCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialCapabilityProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialCapabilityProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassPropertyID");

                    b.Navigation("MaterialDefinitionPropertyID");

                    b.Navigation("MaterialLotPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpMaterialCapabilityType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpMaterialCapabilityType", null)
                        .WithMany("AssemblyCapability")
                        .HasForeignKey("OpMaterialCapabilityTypeKey");

                    b.HasOne("OpOperationsSegmentCapabilityType", null)
                        .WithMany("MaterialCapability")
                        .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");

                    b.HasOne("OpProcessSegmentCapabilityType", null)
                        .WithMany("MaterialCapability")
                        .HasForeignKey("OpProcessSegmentCapabilityTypeKey");

                    b.HasOne("OperationsCapabilityType", null)
                        .WithMany("MaterialCapability")
                        .HasForeignKey("OperationsCapabilityTypeKey");

                    b.HasOne("WorkCapabilityType", null)
                        .WithMany("MaterialCapability")
                        .HasForeignKey("WorkCapabilityTypeKey");

                    b.HasOne("WorkMasterCapabilityType", null)
                        .WithMany("MaterialCapability")
                        .HasForeignKey("WorkMasterCapabilityTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("ConfidenceFactorType", "ConfidenceFactor", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialClassID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey", "Id");

                            b1.ToTable("OpMaterialCapabilities_MaterialClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialDefinitionID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey", "Id");

                            b1.ToTable("OpMaterialCapabilities_MaterialDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey", "Id");

                            b1.ToTable("OpMaterialCapabilities_MaterialLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialSubLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey", "Id");

                            b1.ToTable("OpMaterialCapabilities_MaterialSubLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("MaterialUseType", "MaterialUse", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialCapabilityTypeKey", "Id");

                            b1.ToTable("OpMaterialCapabilities_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "StorageLocation", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialCapabilityTypeKey");

                                    b2.ToTable("OpMaterialCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialCapabilityTypeKey");

                                    b2.ToTable("OpMaterialCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialCapabilityTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpMaterialCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialCapabilityTypeKey");

                            b1.ToTable("OpMaterialCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialCapabilityTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");

                                    b2.ToTable("OpMaterialCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");

                                    b2.ToTable("OpMaterialCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");

                                    b2.ToTable("OpMaterialCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");

                                    b2.ToTable("OpMaterialCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialCapabilityTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("CapabilityType");

                    b.Navigation("ConfidenceFactor");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassID");

                    b.Navigation("MaterialDefinitionID");

                    b.Navigation("MaterialLotID");

                    b.Navigation("MaterialSubLotID");

                    b.Navigation("MaterialUse");

                    b.Navigation("Quantity");

                    b.Navigation("Reason");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StartTime");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("OpMaterialRequirementPropertyType", b =>
                {
                    b.HasOne("OpMaterialRequirementPropertyType", null)
                        .WithMany("MaterialRequirementPropertyChild")
                        .HasForeignKey("OpMaterialRequirementPropertyTypeKey");

                    b.HasOne("OpMaterialRequirementType", null)
                        .WithMany("MaterialRequirementProperty")
                        .HasForeignKey("OpMaterialRequirementTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey");

                            b1.ToTable("OpMaterialRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey");

                            b1.ToTable("OpMaterialRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey");

                            b1.ToTable("OpMaterialRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialDefinitionPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey");

                            b1.ToTable("OpMaterialRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialLotPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey");

                            b1.ToTable("OpMaterialRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirementProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey");

                            b1.ToTable("OpMaterialRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirementProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassPropertyID");

                    b.Navigation("MaterialDefinitionPropertyID");

                    b.Navigation("MaterialLotPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpMaterialRequirementType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobOrderType", null)
                        .WithMany("MaterialRequirement")
                        .HasForeignKey("JobOrderTypeKey");

                    b.HasOne("OpMaterialRequirementType", null)
                        .WithMany("AssemblyRequirement")
                        .HasForeignKey("OpMaterialRequirementTypeKey");

                    b.HasOne("OpSegmentRequirementType", null)
                        .WithMany("MaterialRequirement")
                        .HasForeignKey("OpSegmentRequirementTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialClassID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirements_MaterialClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialDefinitionID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirements_MaterialDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirements_MaterialLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialSubLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirements_MaterialSubLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirements_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsOne("MaterialUseType", "MaterialUse", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialRequirementTypeKey", "Id");

                            b1.ToTable("OpMaterialRequirements_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "StorageLocation", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialRequirementTypeKey");

                                    b2.ToTable("OpMaterialRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialRequirementTypeKey");

                                    b2.ToTable("OpMaterialRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialRequirementTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpMaterialRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialRequirementTypeKey");

                            b1.ToTable("OpMaterialRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialRequirementTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");

                                    b2.ToTable("OpMaterialRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");

                                    b2.ToTable("OpMaterialRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");

                                    b2.ToTable("OpMaterialRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");

                                    b2.ToTable("OpMaterialRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialRequirementTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassID");

                    b.Navigation("MaterialDefinitionID");

                    b.Navigation("MaterialLotID");

                    b.Navigation("MaterialSubLotID");

                    b.Navigation("MaterialUse");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StorageLocation");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpMaterialSpecificationPropertyType", b =>
                {
                    b.HasOne("OpMaterialSpecificationPropertyType", null)
                        .WithMany("MaterialSpecificationPropertyChild")
                        .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");

                    b.HasOne("OpMaterialSpecificationType", null)
                        .WithMany("MaterialSpecificationProperty")
                        .HasForeignKey("OpMaterialSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationPropertyTypeKey");

                            b1.ToTable("OpMaterialSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationPropertyTypeKey");

                            b1.ToTable("OpMaterialSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationPropertyTypeKey");

                            b1.ToTable("OpMaterialSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialDefinitionPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationPropertyTypeKey");

                            b1.ToTable("OpMaterialSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "MaterialLotPropertyID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationPropertyTypeKey");

                            b1.ToTable("OpMaterialSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpMaterialSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpMaterialSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpMaterialSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassPropertyID");

                    b.Navigation("MaterialDefinitionPropertyID");

                    b.Navigation("MaterialLotPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpMaterialSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpMaterialSpecificationType", null)
                        .WithMany("AssemblySpecification")
                        .HasForeignKey("OpMaterialSpecificationTypeKey");

                    b.HasOne("OperationsSegmentType", null)
                        .WithMany("MaterialSpecification")
                        .HasForeignKey("OperationsSegmentTypeKey");

                    b.HasOne("WorkDirectiveType", null)
                        .WithMany("MaterialSpecification")
                        .HasForeignKey("WorkDirectiveTypeKey");

                    b.HasOne("WorkMasterType", null)
                        .WithMany("MaterialSpecification")
                        .HasForeignKey("WorkMasterTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey");

                            b1.ToTable("OpMaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey");

                            b1.ToTable("OpMaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey");

                            b1.ToTable("OpMaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey");

                            b1.ToTable("OpMaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialClassID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecifications_MaterialClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialDefinitionID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecifications_MaterialDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecifications_MaterialLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialSubLotID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecifications_MaterialSubLotID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsOne("MaterialUseType", "MaterialUse", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpMaterialSpecificationTypeKey");

                            b1.ToTable("OpMaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpMaterialSpecificationTypeKey", "Id");

                            b1.ToTable("OpMaterialSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpMaterialSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpMaterialSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "StorageLocation", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialSpecificationTypeKey");

                            b1.ToTable("OpMaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialSpecificationTypeKey");

                                    b2.ToTable("OpMaterialSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpMaterialSpecificationTypeKey");

                                    b2.ToTable("OpMaterialSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpMaterialSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpMaterialSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpMaterialSpecificationTypeKey");

                            b1.ToTable("OpMaterialSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpMaterialSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");

                                    b2.ToTable("OpMaterialSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");

                                    b2.ToTable("OpMaterialSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");

                                    b2.ToTable("OpMaterialSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpMaterialSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");

                                    b2.ToTable("OpMaterialSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpMaterialSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialClassID");

                    b.Navigation("MaterialDefinitionID");

                    b.Navigation("MaterialLotID");

                    b.Navigation("MaterialSubLotID");

                    b.Navigation("MaterialUse");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StorageLocation");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpOperationsSegmentCapabilityType", b =>
                {
                    b.HasOne("OpOperationsSegmentCapabilityType", null)
                        .WithMany("OperationsSegmentCapabilityChild")
                        .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");

                    b.HasOne("OperationsCapabilityType", null)
                        .WithMany("OperationsSegmentCapability")
                        .HasForeignKey("OperationsCapabilityTypeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsSegmentID", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey");

                            b1.ToTable("OpOperationsSegmentCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.OwnsMany("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("OpOperationsSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpOperationsSegmentCapabilityTypeKey", "Id");

                            b1.ToTable("OpOperationsSegmentCapabilities_Reason");

                            b1.WithOwner()
                                .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("ID");

                    b.Navigation("OperationsSegmentID");

                    b.Navigation("OperationsType");

                    b.Navigation("PublishedDate");

                    b.Navigation("Reason");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OpPersonnelActualPropertyType", b =>
                {
                    b.HasOne("OpPersonnelActualPropertyType", null)
                        .WithMany("PersonnelActualPropertyChild")
                        .HasForeignKey("OpPersonnelActualPropertyTypeKey");

                    b.HasOne("OpPersonnelActualType", null)
                        .WithMany("PersonnelActualProperty")
                        .HasForeignKey("OpPersonnelActualTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualPropertyTypeKey");

                            b1.ToTable("OpPersonnelActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualPropertyTypeKey");

                            b1.ToTable("OpPersonnelActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualPropertyTypeKey");

                            b1.ToTable("OpPersonnelActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonnelClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualPropertyTypeKey");

                            b1.ToTable("OpPersonnelActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelActualPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelActualProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualPropertyTypeKey");

                            b1.ToTable("OpPersonnelActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelActualPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelActualProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PersonnelClassPropertyID");

                    b.Navigation("PersonPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPersonnelActualType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobResponseType", null)
                        .WithMany("PersonnelActual")
                        .HasForeignKey("JobResponseTypeKey");

                    b.HasOne("OpPersonnelActualType", null)
                        .WithMany("PersonnelActualChild")
                        .HasForeignKey("OpPersonnelActualTypeKey");

                    b.HasOne("OpSegmentResponseType", null)
                        .WithMany("PersonnelActual")
                        .HasForeignKey("OpSegmentResponseTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualTypeKey");

                            b1.ToTable("OpPersonnelActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualTypeKey");

                            b1.ToTable("OpPersonnelActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualTypeKey", "Id");

                            b1.ToTable("OpPersonnelActuals_PersonID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonnelClassID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualTypeKey", "Id");

                            b1.ToTable("OpPersonnelActuals_PersonnelClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");
                        });

                    b.OwnsOne("PersonnelUseType", "PersonnelUse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualTypeKey");

                            b1.ToTable("OpPersonnelActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelActualTypeKey", "Id");

                            b1.ToTable("OpPersonnelActuals_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelActualTypeKey");

                            b1.ToTable("OpPersonnelActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelActualTypeKey");

                            b1.ToTable("OpPersonnelActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelActualTypeKey");

                                    b2.ToTable("OpPersonnelActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelActualTypeKey");

                                    b2.ToTable("OpPersonnelActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelActualTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPersonnelActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelActualTypeKey");

                            b1.ToTable("OpPersonnelActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelActualTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");

                                    b2.ToTable("OpPersonnelActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");

                                    b2.ToTable("OpPersonnelActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");

                                    b2.ToTable("OpPersonnelActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");

                                    b2.ToTable("OpPersonnelActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelActualTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("PersonID");

                    b.Navigation("PersonnelClassID");

                    b.Navigation("PersonnelUse");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");
                });

            modelBuilder.Entity("OpPersonnelCapabilityPropertyType", b =>
                {
                    b.HasOne("OpPersonnelCapabilityPropertyType", null)
                        .WithMany("PersonnelCapabilityPropertyChild")
                        .HasForeignKey("OpPersonnelCapabilityPropertyTypeKey");

                    b.HasOne("OpPersonnelCapabilityType", null)
                        .WithMany("PersonnelCapabilityProperty")
                        .HasForeignKey("OpPersonnelCapabilityTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityPropertyTypeKey");

                            b1.ToTable("OpPersonnelCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityPropertyTypeKey");

                            b1.ToTable("OpPersonnelCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityPropertyTypeKey");

                            b1.ToTable("OpPersonnelCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonnelClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityPropertyTypeKey");

                            b1.ToTable("OpPersonnelCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelCapabilityProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelCapabilityProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PersonnelClassPropertyID");

                    b.Navigation("PersonPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPersonnelCapabilityType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpOperationsSegmentCapabilityType", null)
                        .WithMany("PersonnelCapability")
                        .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");

                    b.HasOne("OpPersonnelCapabilityType", null)
                        .WithMany("PersonnelCapabilityChild")
                        .HasForeignKey("OpPersonnelCapabilityTypeKey");

                    b.HasOne("OpProcessSegmentCapabilityType", null)
                        .WithMany("PersonnelCapability")
                        .HasForeignKey("OpProcessSegmentCapabilityTypeKey");

                    b.HasOne("OperationsCapabilityType", null)
                        .WithMany("PersonnelCapability")
                        .HasForeignKey("OperationsCapabilityTypeKey");

                    b.HasOne("WorkCapabilityType", null)
                        .WithMany("PersonnelCapability")
                        .HasForeignKey("WorkCapabilityTypeKey");

                    b.HasOne("WorkMasterCapabilityType", null)
                        .WithMany("PersonnelCapability")
                        .HasForeignKey("WorkMasterCapabilityTypeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsOne("ConfidenceFactorType", "ConfidenceFactor", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey", "Id");

                            b1.ToTable("OpPersonnelCapabilities_PersonID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonnelClassID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey", "Id");

                            b1.ToTable("OpPersonnelCapabilities_PersonnelClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsOne("PersonnelUseType", "PersonnelUse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelCapabilityTypeKey", "Id");

                            b1.ToTable("OpPersonnelCapabilities_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelCapabilityTypeKey");

                                    b2.ToTable("OpPersonnelCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelCapabilityTypeKey");

                                    b2.ToTable("OpPersonnelCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelCapabilityTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPersonnelCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelCapabilityTypeKey");

                            b1.ToTable("OpPersonnelCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelCapabilityTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");

                                    b2.ToTable("OpPersonnelCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");

                                    b2.ToTable("OpPersonnelCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");

                                    b2.ToTable("OpPersonnelCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");

                                    b2.ToTable("OpPersonnelCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelCapabilityTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("ConfidenceFactor");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("PersonID");

                    b.Navigation("PersonnelClassID");

                    b.Navigation("PersonnelUse");

                    b.Navigation("Quantity");

                    b.Navigation("Reason");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StartTime");
                });

            modelBuilder.Entity("OpPersonnelRequirementPropertyType", b =>
                {
                    b.HasOne("OpPersonnelRequirementPropertyType", null)
                        .WithMany("PersonnelRequirementPropertyChild")
                        .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");

                    b.HasOne("OpPersonnelRequirementType", null)
                        .WithMany("PersonnelRequirementProperty")
                        .HasForeignKey("OpPersonnelRequirementTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementPropertyTypeKey");

                            b1.ToTable("OpPersonnelRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementPropertyTypeKey");

                            b1.ToTable("OpPersonnelRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementPropertyTypeKey");

                            b1.ToTable("OpPersonnelRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonnelClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementPropertyTypeKey");

                            b1.ToTable("OpPersonnelRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelRequirementProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementPropertyTypeKey");

                            b1.ToTable("OpPersonnelRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelRequirementProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PersonnelClassPropertyID");

                    b.Navigation("PersonPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPersonnelRequirementType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobOrderType", null)
                        .WithMany("PersonnelRequirement")
                        .HasForeignKey("JobOrderTypeKey");

                    b.HasOne("OpPersonnelRequirementType", null)
                        .WithMany("PersonnelRequirementChild")
                        .HasForeignKey("OpPersonnelRequirementTypeKey");

                    b.HasOne("OpSegmentRequirementType", null)
                        .WithMany("PersonnelRequirement")
                        .HasForeignKey("OpSegmentRequirementTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementTypeKey");

                            b1.ToTable("OpPersonnelRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementTypeKey");

                            b1.ToTable("OpPersonnelRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementTypeKey", "Id");

                            b1.ToTable("OpPersonnelRequirements_PersonID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonnelClassID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementTypeKey", "Id");

                            b1.ToTable("OpPersonnelRequirements_PersonnelClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementTypeKey", "Id");

                            b1.ToTable("OpPersonnelRequirements_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");
                        });

                    b.OwnsOne("PersonnelUseType", "PersonnelUse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementTypeKey");

                            b1.ToTable("OpPersonnelRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelRequirementTypeKey", "Id");

                            b1.ToTable("OpPersonnelRequirements_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelRequirementTypeKey");

                            b1.ToTable("OpPersonnelRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelRequirementTypeKey");

                            b1.ToTable("OpPersonnelRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelRequirementTypeKey");

                                    b2.ToTable("OpPersonnelRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelRequirementTypeKey");

                                    b2.ToTable("OpPersonnelRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelRequirementTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPersonnelRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelRequirementTypeKey");

                            b1.ToTable("OpPersonnelRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelRequirementTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");

                                    b2.ToTable("OpPersonnelRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");

                                    b2.ToTable("OpPersonnelRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");

                                    b2.ToTable("OpPersonnelRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");

                                    b2.ToTable("OpPersonnelRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelRequirementTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("PersonID");

                    b.Navigation("PersonnelClassID");

                    b.Navigation("PersonnelUse");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpPersonnelSpecificationPropertyType", b =>
                {
                    b.HasOne("OpPersonnelSpecificationPropertyType", null)
                        .WithMany("PersonnelSpecificationPropertyChild")
                        .HasForeignKey("OpPersonnelSpecificationPropertyTypeKey");

                    b.HasOne("OpPersonnelSpecificationType", null)
                        .WithMany("PersonnelSpecificationProperty")
                        .HasForeignKey("OpPersonnelSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationPropertyTypeKey");

                            b1.ToTable("OpPersonnelSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationPropertyTypeKey");

                            b1.ToTable("OpPersonnelSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationPropertyTypeKey");

                            b1.ToTable("OpPersonnelSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonnelClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationPropertyTypeKey");

                            b1.ToTable("OpPersonnelSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpPersonnelSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPersonnelSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPersonnelSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPersonnelSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PersonnelClassPropertyID");

                    b.Navigation("PersonPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPersonnelSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpPersonnelSpecificationType", null)
                        .WithMany("PersonnelSpecificationChild")
                        .HasForeignKey("OpPersonnelSpecificationTypeKey");

                    b.HasOne("OperationsSegmentType", null)
                        .WithMany("PersonnelSpecification")
                        .HasForeignKey("OperationsSegmentTypeKey");

                    b.HasOne("WorkDirectiveType", null)
                        .WithMany("PersonnelSpecification")
                        .HasForeignKey("WorkDirectiveTypeKey");

                    b.HasOne("WorkMasterType", null)
                        .WithMany("PersonnelSpecification")
                        .HasForeignKey("WorkMasterTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey");

                            b1.ToTable("OpPersonnelSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey");

                            b1.ToTable("OpPersonnelSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey", "Id");

                            b1.ToTable("OpPersonnelSpecifications_PersonID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonnelClassID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey", "Id");

                            b1.ToTable("OpPersonnelSpecifications_PersonnelClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey", "Id");

                            b1.ToTable("OpPersonnelSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");
                        });

                    b.OwnsOne("PersonnelUseType", "PersonnelUse", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey");

                            b1.ToTable("OpPersonnelSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPersonnelSpecificationTypeKey", "Id");

                            b1.ToTable("OpPersonnelSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPersonnelSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPersonnelSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey");

                            b1.ToTable("OpPersonnelSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelSpecificationTypeKey");

                                    b2.ToTable("OpPersonnelSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPersonnelSpecificationTypeKey");

                                    b2.ToTable("OpPersonnelSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPersonnelSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPersonnelSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPersonnelSpecificationTypeKey");

                            b1.ToTable("OpPersonnelSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPersonnelSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");

                                    b2.ToTable("OpPersonnelSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");

                                    b2.ToTable("OpPersonnelSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");

                                    b2.ToTable("OpPersonnelSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");

                                    b2.ToTable("OpPersonnelSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPersonnelSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("PersonID");

                    b.Navigation("PersonnelClassID");

                    b.Navigation("PersonnelUse");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpPhysicalAssetActualPropertyType", b =>
                {
                    b.HasOne("OpPhysicalAssetActualPropertyType", null)
                        .WithMany("PhysicalAssetActualPropertyChild")
                        .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");

                    b.HasOne("OpPhysicalAssetActualType", null)
                        .WithMany("PhysicalAssetActualProperty")
                        .HasForeignKey("OpPhysicalAssetActualTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetActualPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetActualProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetActualProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetActualPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetActualProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetActualPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActualProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetActualPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassPropertyID");

                    b.Navigation("PhysicalAssetPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPhysicalAssetActualType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobResponseType", null)
                        .WithMany("PhysicalAssetActual")
                        .HasForeignKey("JobResponseTypeKey");

                    b.HasOne("OpPhysicalAssetActualType", null)
                        .WithMany("PhysicalAssetActualChild")
                        .HasForeignKey("OpPhysicalAssetActualTypeKey");

                    b.HasOne("OpSegmentResponseType", null)
                        .WithMany("PhysicalAssetActual")
                        .HasForeignKey("OpSegmentResponseTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey");

                            b1.ToTable("OpPhysicalAssetActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey");

                            b1.ToTable("OpPhysicalAssetActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetClassID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetActuals_PhysicalAssetClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetActuals_PhysicalAssetID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");
                        });

                    b.OwnsOne("PhysicalAssetUseType", "PhysicalAssetUse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey");

                            b1.ToTable("OpPhysicalAssetActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetActualTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetActuals_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetActuals_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetActualTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey");

                            b1.ToTable("OpPhysicalAssetActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "PhysicalLocation", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey");

                            b1.ToTable("OpPhysicalAssetActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetActualTypeKey");

                                    b2.ToTable("OpPhysicalAssetActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetActualTypeKey");

                                    b2.ToTable("OpPhysicalAssetActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetActualTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetActualTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetActualTypeKey");

                            b1.ToTable("OpPhysicalAssetActuals");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetActualTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");

                                    b2.ToTable("OpPhysicalAssetActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");

                                    b2.ToTable("OpPhysicalAssetActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");

                                    b2.ToTable("OpPhysicalAssetActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");

                                    b2.ToTable("OpPhysicalAssetActuals");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetActualTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassID");

                    b.Navigation("PhysicalAssetID");

                    b.Navigation("PhysicalAssetUse");

                    b.Navigation("PhysicalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");
                });

            modelBuilder.Entity("OpPhysicalAssetCapabilityPropertyType", b =>
                {
                    b.HasOne("OpPhysicalAssetCapabilityPropertyType", null)
                        .WithMany("PhysicalAssetCapabilityPropertyChild")
                        .HasForeignKey("OpPhysicalAssetCapabilityPropertyTypeKey");

                    b.HasOne("OpPhysicalAssetCapabilityType", null)
                        .WithMany("PhysicalAssetCapabilityProperty")
                        .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetCapabilityProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetCapabilityPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetCapabilityProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilityProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetCapabilityPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassPropertyID");

                    b.Navigation("PhysicalAssetPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPhysicalAssetCapabilityType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpOperationsSegmentCapabilityType", null)
                        .WithMany("PhysicalAssetCapability")
                        .HasForeignKey("OpOperationsSegmentCapabilityTypeKey");

                    b.HasOne("OpPhysicalAssetCapabilityType", null)
                        .WithMany("PhysicalAssetCapabilityChild")
                        .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");

                    b.HasOne("OpProcessSegmentCapabilityType", null)
                        .WithMany("PhysicalAssetCapability")
                        .HasForeignKey("OpProcessSegmentCapabilityTypeKey");

                    b.HasOne("OperationsCapabilityType", null)
                        .WithMany("PhysicalAssetCapability")
                        .HasForeignKey("OperationsCapabilityTypeKey");

                    b.HasOne("WorkCapabilityType", null)
                        .WithMany("PhysicalAssetCapability")
                        .HasForeignKey("WorkCapabilityTypeKey");

                    b.HasOne("WorkMasterCapabilityType", null)
                        .WithMany("PhysicalAssetCapability")
                        .HasForeignKey("WorkMasterCapabilityTypeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsOne("ConfidenceFactorType", "ConfidenceFactor", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetClassID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetCapabilities_PhysicalAssetClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetCapabilities_PhysicalAssetID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsOne("PhysicalAssetUseType", "PhysicalAssetUse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetCapabilities_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetCapabilities_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetCapabilityTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "PhysicalLocation", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetCapabilityTypeKey");

                                    b2.ToTable("OpPhysicalAssetCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetCapabilityTypeKey");

                                    b2.ToTable("OpPhysicalAssetCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetCapabilityTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.ToTable("OpPhysicalAssetCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetCapabilityTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");

                                    b2.ToTable("OpPhysicalAssetCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");

                                    b2.ToTable("OpPhysicalAssetCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");

                                    b2.ToTable("OpPhysicalAssetCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");

                                    b2.ToTable("OpPhysicalAssetCapabilities");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetCapabilityTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("ConfidenceFactor");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassID");

                    b.Navigation("PhysicalAssetID");

                    b.Navigation("PhysicalAssetUse");

                    b.Navigation("PhysicalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("Reason");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("StartTime");
                });

            modelBuilder.Entity("OpPhysicalAssetRequirementPropertyType", b =>
                {
                    b.HasOne("OpPhysicalAssetRequirementPropertyType", null)
                        .WithMany("PhysicalAssetRequirementPropertyChild")
                        .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");

                    b.HasOne("OpPhysicalAssetRequirementType", null)
                        .WithMany("PhysicalAssetRequirementProperty")
                        .HasForeignKey("OpPhysicalAssetRequirementTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetRequirementProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirementProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetRequirementPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetRequirementProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirementProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetRequirementPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassPropertyID");

                    b.Navigation("PhysicalAssetPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPhysicalAssetRequirementType", b =>
                {
                    b.HasOne("HierarchyScopeType", "EquipmentLevel")
                        .WithMany()
                        .HasForeignKey("EquipmentLevelKey");

                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobOrderType", null)
                        .WithMany("PhysicalAssetRequirement")
                        .HasForeignKey("JobOrderTypeKey");

                    b.HasOne("OpPhysicalAssetRequirementType", null)
                        .WithMany("PhysicalAssetRequirementChild")
                        .HasForeignKey("OpPhysicalAssetRequirementTypeKey");

                    b.HasOne("OpSegmentRequirementType", null)
                        .WithMany("PhysicalAssetRequirement")
                        .HasForeignKey("OpSegmentRequirementTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetClassID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetRequirements_PhysicalAssetClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetRequirements_PhysicalAssetID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetRequirements_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");
                        });

                    b.OwnsOne("PhysicalAssetUseType", "PhysicalAssetUse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetRequirements_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetRequirements_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetRequirementTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "PhysicalLocation", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetRequirementTypeKey");

                                    b2.ToTable("OpPhysicalAssetRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetRequirementTypeKey");

                                    b2.ToTable("OpPhysicalAssetRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetRequirementTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetRequirementTypeKey");

                            b1.ToTable("OpPhysicalAssetRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetRequirementTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");

                                    b2.ToTable("OpPhysicalAssetRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");

                                    b2.ToTable("OpPhysicalAssetRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");

                                    b2.ToTable("OpPhysicalAssetRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");

                                    b2.ToTable("OpPhysicalAssetRequirements");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetRequirementTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EquipmentLevel");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassID");

                    b.Navigation("PhysicalAssetID");

                    b.Navigation("PhysicalAssetUse");

                    b.Navigation("PhysicalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpPhysicalAssetSpecificationPropertyType", b =>
                {
                    b.HasOne("OpPhysicalAssetSpecificationPropertyType", null)
                        .WithMany("PhysicalAssetSpecificationPropertyChild")
                        .HasForeignKey("OpPhysicalAssetSpecificationPropertyTypeKey");

                    b.HasOne("OpPhysicalAssetSpecificationType", null)
                        .WithMany("PhysicalAssetSpecificationProperty")
                        .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetPropertyID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationPropertyTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpPhysicalAssetSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassPropertyID");

                    b.Navigation("PhysicalAssetPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpPhysicalAssetSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpPhysicalAssetSpecificationType", null)
                        .WithMany("PhysicalAssetSpecificationChild")
                        .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");

                    b.HasOne("OperationsSegmentType", null)
                        .WithMany("PhysicalAssetSpecification")
                        .HasForeignKey("OperationsSegmentTypeKey");

                    b.HasOne("WorkDirectiveType", null)
                        .WithMany("PhysicalAssetSpecification")
                        .HasForeignKey("WorkDirectiveTypeKey");

                    b.HasOne("WorkMasterType", null)
                        .WithMany("PhysicalAssetSpecification")
                        .HasForeignKey("WorkMasterTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetClassID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetSpecifications_PhysicalAssetClassID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetSpecifications_PhysicalAssetID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");
                        });

                    b.OwnsOne("PhysicalAssetUseType", "PhysicalAssetUse", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey", "Id");

                            b1.ToTable("OpPhysicalAssetSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OpPhysicalAssetSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOpPhysicalAssetSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "PhysicalLocation", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetSpecificationTypeKey");

                                    b2.ToTable("OpPhysicalAssetSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypeOpPhysicalAssetSpecificationTypeKey");

                                    b2.ToTable("OpPhysicalAssetSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypeOpPhysicalAssetSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OpPhysicalAssetSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.ToTable("OpPhysicalAssetSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("OpPhysicalAssetSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");

                                    b2.ToTable("OpPhysicalAssetSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");

                                    b2.ToTable("OpPhysicalAssetSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");

                                    b2.ToTable("OpPhysicalAssetSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");

                                    b2.ToTable("OpPhysicalAssetSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOpPhysicalAssetSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassID");

                    b.Navigation("PhysicalAssetID");

                    b.Navigation("PhysicalAssetUse");

                    b.Navigation("PhysicalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("OpProcessSegmentCapabilityType", b =>
                {
                    b.HasOne("OpProcessSegmentCapabilityType", null)
                        .WithMany("ProcessSegmentCapabilityChild")
                        .HasForeignKey("OpProcessSegmentCapabilityTypeKey");

                    b.HasOne("OperationsCapabilityType", null)
                        .WithMany("ProcessSegmentCapability")
                        .HasForeignKey("OperationsCapabilityTypeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "ProcessSegmentID", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey", "Id");

                            b1.ToTable("OpProcessSegmentCapabilityProperties_ProcessSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey");

                            b1.ToTable("OpProcessSegmentCapabilityProperties");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.OwnsMany("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("OpProcessSegmentCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpProcessSegmentCapabilityTypeKey", "Id");

                            b1.ToTable("OpProcessSegmentCapabilityProperties_Reason");

                            b1.WithOwner()
                                .HasForeignKey("OpProcessSegmentCapabilityTypeKey");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("ID");

                    b.Navigation("OperationsType");

                    b.Navigation("ProcessSegmentID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Reason");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OpSegmentDataType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("JobResponseType", null)
                        .WithMany("JobResponseData")
                        .HasForeignKey("JobResponseTypeKey");

                    b.HasOne("OpSegmentDataType", null)
                        .WithMany("SegmentDataChild")
                        .HasForeignKey("OpSegmentDataTypeKey");

                    b.HasOne("OpSegmentResponseType", null)
                        .WithMany("SegmentData")
                        .HasForeignKey("OpSegmentResponseTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpSegmentDataTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentDataTypeKey");

                            b1.ToTable("OpSegmentDatas");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentDataTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpSegmentDataTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentDataTypeKey");

                            b1.ToTable("OpSegmentDatas");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentDataTypeKey");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpSegmentDataTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentDataTypeKey");

                            b1.ToTable("OpSegmentDatas");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentDataTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OpSegmentDataTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OpSegmentDataTypeKey", "Id");

                            b1.ToTable("OpSegmentDatas_Value");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentDataTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpSegmentDataTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");

                                    b2.ToTable("OpSegmentDatas_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpSegmentDataTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");

                                    b2.ToTable("OpSegmentDatas_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpSegmentDataTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");

                                    b2.ToTable("OpSegmentDatas_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOpSegmentDataTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");

                                    b2.ToTable("OpSegmentDatas_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOpSegmentDataTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OpSegmentRequirementType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpSegmentRequirementType", null)
                        .WithMany("SegmentRequirementChild")
                        .HasForeignKey("OpSegmentRequirementTypeKey");

                    b.HasOne("OperationsRequestType", null)
                        .WithMany("SegmentRequirement")
                        .HasForeignKey("OperationsRequestTypeKey");

                    b.OwnsOne("DateTimeType", "EarliestStartTime", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "LatestEndTime", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsDefinitionID", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsSegmentID", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ProcessSegmentID", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsMany("ParameterType", "SegmentParameter", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OpSegmentRequirementTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("OpSegmentRequirements_SegmentParameter");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOpSegmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId");

                                    b2.ToTable("OpSegmentRequirements_SegmentParameter");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOpSegmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId");

                                    b2.ToTable("OpSegmentRequirements_SegmentParameter");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ParameterSpecificationID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOpSegmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("OpSegmentRequirements_SegmentParameter_ParameterSpecificationID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ProcessSegmentParameterID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOpSegmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("OpSegmentRequirements_SegmentParameter_ProcessSegmentParameterID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("ValueType", "Value", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOpSegmentRequirementTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("OpSegmentRequirements_SegmentParameter_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOpSegmentRequirementTypeKey", "ParameterTypeId");

                                    b2.OwnsOne("DataTypeType", "DataType", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOpSegmentRequirementTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OpSegmentRequirements_SegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Key", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOpSegmentRequirementTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OpSegmentRequirements_SegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOpSegmentRequirementTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OpSegmentRequirements_SegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("ValueStringType", "ValueString", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOpSegmentRequirementTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("CharacterSetCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("EncodingCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Filename")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageLocaleID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("MimeCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Uri")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OpSegmentRequirements_SegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOpSegmentRequirementTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.Navigation("DataType");

                                    b2.Navigation("Key");

                                    b2.Navigation("UnitOfMeasure");

                                    b2.Navigation("ValueString");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("ParameterSpecificationID");

                            b1.Navigation("ProcessSegmentParameterID");

                            b1.Navigation("Value");
                        });

                    b.OwnsOne("RequestStateType", "SegmentState", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpSegmentRequirementTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentRequirementTypeKey");

                            b1.ToTable("OpSegmentRequirements");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentRequirementTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EarliestStartTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("LatestEndTime");

                    b.Navigation("OperationsDefinitionID");

                    b.Navigation("OperationsSegmentID");

                    b.Navigation("OperationsType");

                    b.Navigation("ProcessSegmentID");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SegmentParameter");

                    b.Navigation("SegmentState");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OpSegmentResponseType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpSegmentRequirementType", null)
                        .WithMany("RequestedSegmentResponse")
                        .HasForeignKey("OpSegmentRequirementTypeKey");

                    b.HasOne("OpSegmentResponseType", null)
                        .WithMany("SegmentResponseChild")
                        .HasForeignKey("OpSegmentResponseTypeKey");

                    b.HasOne("OperationsRequestType", null)
                        .WithMany("RequestedSegmentResponse")
                        .HasForeignKey("OperationsRequestTypeKey");

                    b.HasOne("OperationsResponseType", null)
                        .WithMany("SegmentResponse")
                        .HasForeignKey("OperationsResponseTypeKey");

                    b.OwnsOne("DateTimeType", "ActualEndTime", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "ActualStartTime", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PostingDate", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "JobResponseID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey", "Id");

                            b1.ToTable("OpSegmentResponses_JobResponseID");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsDefinitionID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey", "Id");

                            b1.ToTable("OpSegmentResponses_OperationsDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsRequestID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey", "Id");

                            b1.ToTable("OpSegmentResponses_OperationsRequestID");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsSegmentID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey", "Id");

                            b1.ToTable("OpSegmentResponses_OperationsSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "ProcessSegmentID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey", "Id");

                            b1.ToTable("OpSegmentResponses_ProcessSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "SegmentRequirementID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey", "Id");

                            b1.ToTable("OpSegmentResponses_SegmentRequirementID");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkResponseID", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey", "Id");

                            b1.ToTable("OpSegmentResponses_WorkResponseID");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.OwnsOne("ResponseStateType", "SegmentState", b1 =>
                        {
                            b1.Property<string>("OpSegmentResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OpSegmentResponseTypeKey");

                            b1.ToTable("OpSegmentResponses");

                            b1.WithOwner()
                                .HasForeignKey("OpSegmentResponseTypeKey");
                        });

                    b.Navigation("ActualEndTime");

                    b.Navigation("ActualStartTime");

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("JobResponseID");

                    b.Navigation("OperationsDefinitionID");

                    b.Navigation("OperationsRequestID");

                    b.Navigation("OperationsSegmentID");

                    b.Navigation("OperationsType");

                    b.Navigation("PostingDate");

                    b.Navigation("ProcessSegmentID");

                    b.Navigation("PublishedDate");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("SegmentRequirementID");

                    b.Navigation("SegmentState");

                    b.Navigation("WorkResponseID");
                });

            modelBuilder.Entity("OperationalLocationClassPropertyType", b =>
                {
                    b.HasOne("OperationalLocationClassPropertyType", null)
                        .WithMany("OperationalLocationClassPropertyChild")
                        .HasForeignKey("OperationalLocationClassPropertyTypeKey");

                    b.HasOne("OperationalLocationClassType", null)
                        .WithMany("OperationalLocationClassProperty")
                        .HasForeignKey("OperationalLocationClassTypeKey");

                    b.OwnsOne("ClassPropertyTypeType", "PropertyType", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassPropertyTypeKey");

                            b1.ToTable("OperationalLocationClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassPropertyTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassPropertyTypeKey");

                            b1.ToTable("OperationalLocationClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassPropertyTypeKey");

                            b1.ToTable("OperationalLocationClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OperationalLocationClassPropertyTypeKey", "Id");

                            b1.ToTable("OperationalLocationClassProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PropertyType");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OperationalLocationClassType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationalLocationClassType", "OperationalLocationClassChild")
                        .WithMany()
                        .HasForeignKey("OperationalLocationClassChildKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationalLocationClassTypeKey");

                            b1.ToTable("OperationalLocationClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationalLocationClassTypeKey");

                            b1.ToTable("OperationalLocationClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationalLocationClassTypeKey");

                            b1.ToTable("OperationalLocationClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassTypeKey");

                            b1.ToTable("OperationalLocationClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassTypeKey");

                            b1.ToTable("OperationalLocationClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationalLocationClassBaseID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassTypeKey", "Id");

                            b1.ToTable("OperationalLocationClasses_OperationalLocationClassBaseID");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationalLocationSourceID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassTypeKey", "Id");

                            b1.ToTable("OperationalLocationClasses_OperationalLocationSourceID");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationalLocationClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationClassTypeKey");

                            b1.ToTable("OperationalLocationClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationClassTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocationClassBaseID");

                    b.Navigation("OperationalLocationClassChild");

                    b.Navigation("OperationalLocationSourceID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationalLocationPropertyType", b =>
                {
                    b.HasOne("OperationalLocationPropertyType", null)
                        .WithMany("OperationalLocationPropertyChild")
                        .HasForeignKey("OperationalLocationPropertyTypeKey");

                    b.HasOne("OperationalLocationType", null)
                        .WithMany("OperationalLocationProperty")
                        .HasForeignKey("OperationalLocationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationalLocationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationPropertyTypeKey");

                            b1.ToTable("OperationalLocationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationPropertyTypeKey");

                            b1.ToTable("OperationalLocationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationalClassPropertyID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationPropertyTypeKey");

                            b1.ToTable("OperationalLocationProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OperationalLocationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OperationalLocationPropertyTypeKey", "Id");

                            b1.ToTable("OperationalLocationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationalLocationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationalLocationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationalLocationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("OperationalClassPropertyID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OperationalLocationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationalLocationType", null)
                        .WithMany("OperationalLocationChild")
                        .HasForeignKey("OperationalLocationTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationalClassID", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("OperationalLocationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OperationalLocationTypeKey");

                            b1.ToTable("OperationalLocations");

                            b1.WithOwner()
                                .HasForeignKey("OperationalLocationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOperationalLocationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOperationalLocationTypeKey");

                                    b2.ToTable("OperationalLocations");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOperationalLocationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOperationalLocationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOperationalLocationTypeKey");

                                    b2.ToTable("OperationalLocations");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOperationalLocationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOperationalLocationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOperationalLocationTypeKey");

                                    b2.ToTable("OperationalLocations");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOperationalLocationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypeOperationalLocationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypeOperationalLocationTypeKey");

                                    b2.ToTable("OperationalLocations");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypeOperationalLocationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalClassID");

                    b.Navigation("PublishedDate");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsCapabilityType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("ConfidenceFactorType", "ConfidenceFactor", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.OwnsOne("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("OperationsCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsCapabilityTypeKey");

                            b1.ToTable("OperationsCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("OperationsCapabilityTypeKey");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("ConfidenceFactor");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsType");

                    b.Navigation("PublishedDate");

                    b.Navigation("Reason");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsDefinitionType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("DefinitionTypeType", "DefinitionType", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "BillOfMaterialsID", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsDefinitions_BillOfMaterialsID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "BillOfResourcesID", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsDefinitions_BillOfResourcesID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsDefinitionPatternID", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsMaterialBillID", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsDefinitions_OperationsMaterialBillID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkMasterSourceID", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsDefinitions_WorkMasterSourceID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsDefinitionTypeKey");

                            b1.ToTable("OperationsDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsDefinitionTypeKey");
                        });

                    b.Navigation("BillOfMaterialsID");

                    b.Navigation("BillOfResourcesID");

                    b.Navigation("DefinitionType");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsDefinitionPatternID");

                    b.Navigation("OperationsMaterialBillID");

                    b.Navigation("OperationsType");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");

                    b.Navigation("WorkMasterSourceID");
                });

            modelBuilder.Entity("OperationsEventClassPropertyType", b =>
                {
                    b.HasOne("OperationsEventClassPropertyType", null)
                        .WithMany("OperationsEventClassPropertyChild")
                        .HasForeignKey("OperationsEventClassPropertyTypeKey");

                    b.HasOne("OperationsEventClassType", null)
                        .WithMany("OperationsEventClassProperty")
                        .HasForeignKey("OperationsEventClassTypeKey");

                    b.HasOne("OperationsEventDefinitionType", null)
                        .WithMany("OperationsEventDefinitionProperty")
                        .HasForeignKey("OperationsEventDefinitionTypeKey");

                    b.OwnsOne("ClassPropertyTypeType", "PropertyType", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassPropertyTypeKey");

                            b1.ToTable("OperationsEventClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassPropertyTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassPropertyTypeKey");

                            b1.ToTable("OperationsEventClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassPropertyTypeKey");

                            b1.ToTable("OperationsEventClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OperationsEventClassPropertyTypeKey", "Id");

                            b1.ToTable("OperationsEventClassProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationsEventClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationsEventClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationsEventClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationsEventClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationsEventClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationsEventClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeOperationsEventClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("OperationsEventClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeOperationsEventClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PropertyType");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("OperationsEventClassType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationsEventClassType", null)
                        .WithMany("OperationsEventClassChild")
                        .HasForeignKey("OperationsEventClassTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventClassTypeKey");

                            b1.ToTable("OperationsEventClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventClassTypeKey");

                            b1.ToTable("OperationsEventClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventClassTypeKey");

                            b1.ToTable("OperationsEventClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassTypeKey");

                            b1.ToTable("OperationsEventClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassTypeKey");

                            b1.ToTable("OperationsEventClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsEventClassBaseID", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassTypeKey", "Id");

                            b1.ToTable("OperationsEventClasses_OperationsEventClassBaseID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsEventDefinitionSourceID", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassTypeKey", "Id");

                            b1.ToTable("OperationsEventClasses_OperationsEventDefinitionSourceID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassTypeKey");

                            b1.ToTable("OperationsEventClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsOne("OperationsEventExtensionType", "Extension", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventClassTypeKey");

                            b1.ToTable("OperationsEventClasses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");
                        });

                    b.OwnsMany("OperationsRecordSpecTemplateType", "OpsEventClassRecordSpecification", b1 =>
                        {
                            b1.Property<string>("OperationsEventClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OperationsEventClassTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventClassTypeKey");

                            b1.OwnsOne("DateTimeType", "EffectiveEndDate", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "EffectiveStartDate", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "PublishedDate", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DefinitionTypeType", "DefinitionType", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "OperationsRecordSpecificationPatternID", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Version", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsMany("InformationObjectTypeType", "InformationObjectType", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId", "Id");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification_InformationObjectType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("OperationsRecordActionType", "Action", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsMany("TextType", "ActionMultiplicity", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId", "Id");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification_ActionMultiplicity");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsMany("TextType", "InformationObjectTypeMultiplicity", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId", "Id");

                                    b2.ToTable("OperationsEventClasses_OpsEventClassRecordSpecification_InformationObjectTypeMultiplicity");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventClassTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.Navigation("Action");

                            b1.Navigation("ActionMultiplicity");

                            b1.Navigation("DefinitionType");

                            b1.Navigation("Description");

                            b1.Navigation("EffectiveEndDate");

                            b1.Navigation("EffectiveStartDate");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("InformationObjectType");

                            b1.Navigation("InformationObjectTypeMultiplicity");

                            b1.Navigation("OperationsRecordSpecificationPatternID");

                            b1.Navigation("PublishedDate");

                            b1.Navigation("Version");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("Extension");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsEventClassBaseID");

                    b.Navigation("OperationsEventDefinitionSourceID");

                    b.Navigation("OpsEventClassRecordSpecification");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsEventDefinitionType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationsEventDefinitionType", null)
                        .WithMany("OperationsEventDefinitionChild")
                        .HasForeignKey("OperationsEventDefinitionTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("EnterpriseFunctionType", "EnterpriseFunction", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "Acknowledgement", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsEventDefinitions_Acknowledgement");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "Category", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsEventDefinitions_Category");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsEventClassID", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsEventDefinitions_OperationsEventClassID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "Source", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey", "Id");

                            b1.ToTable("OperationsEventDefinitions_Source");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("MOMFunctionType", "MOMFunction", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("OperationsEventLevelType", "OperationsEventLevel", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsOne("OperationsEventTypeType", "OperationsEventType", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.OwnsMany("OperationsRecordSpecTemplateType", "OpsEventDefinitionRecordSpecification", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OperationsEventDefinitionTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");

                            b1.OwnsOne("DateTimeType", "EffectiveEndDate", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "EffectiveStartDate", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "PublishedDate", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DefinitionTypeType", "DefinitionType", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "OperationsRecordSpecificationPatternID", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Version", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsMany("InformationObjectTypeType", "InformationObjectType", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId", "Id");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification_InformationObjectType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsOne("OperationsRecordActionType", "Action", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsMany("TextType", "ActionMultiplicity", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId", "Id");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification_ActionMultiplicity");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.OwnsMany("TextType", "InformationObjectTypeMultiplicity", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordSpecTemplateTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId", "Id");

                                    b2.ToTable("OperationsEventDefinitions_OpsEventDefinitionRecordSpecification_InformationObjectTypeMultiplicity");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordSpecTemplateTypeOperationsEventDefinitionTypeKey", "OperationsRecordSpecTemplateTypeId");
                                });

                            b1.Navigation("Action");

                            b1.Navigation("ActionMultiplicity");

                            b1.Navigation("DefinitionType");

                            b1.Navigation("Description");

                            b1.Navigation("EffectiveEndDate");

                            b1.Navigation("EffectiveStartDate");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("InformationObjectType");

                            b1.Navigation("InformationObjectTypeMultiplicity");

                            b1.Navigation("OperationsRecordSpecificationPatternID");

                            b1.Navigation("PublishedDate");

                            b1.Navigation("Version");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsEventDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventDefinitionTypeKey");

                            b1.ToTable("OperationsEventDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventDefinitionTypeKey");
                        });

                    b.Navigation("Acknowledgement");

                    b.Navigation("Category");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("EnterpriseFunction");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MOMFunction");

                    b.Navigation("OperationsEventClassID");

                    b.Navigation("OperationsEventLevel");

                    b.Navigation("OperationsEventType");

                    b.Navigation("OperationsType");

                    b.Navigation("OpsEventDefinitionRecordSpecification");

                    b.Navigation("PublishedDate");

                    b.Navigation("Source");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsEventPropertyType", b =>
                {
                    b.HasOne("OperationsEventType", null)
                        .WithMany("OperationsEventProperty")
                        .HasForeignKey("OperationsEventTypeKey");
                });

            modelBuilder.Entity("OperationsEventType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationsEventType", null)
                        .WithMany("OperationsEventChild")
                        .HasForeignKey("OperationsEventTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveTimeStamp", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "RecordTimeStamp", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("EnterpriseFunctionType", "EnterpriseFunction", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "Acknowledgement", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey", "Id");

                            b1.ToTable("OperationsEvents_Acknowledgement");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "Category", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey", "Id");

                            b1.ToTable("OperationsEvents_Category");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsDefinitionID", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "Source", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey", "Id");

                            b1.ToTable("OperationsEvents_Source");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("MOMFunctionType", "MOMFunction", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("OperationsEventLevelType", "OperationsEventLevel", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsOne("OperationsEventTypeType", "OperationsEventType1", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.OwnsMany("OperationsRecordTemplateType", "OperationsEventRecord", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OperationsEventTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("OperationsRecordTemplateType");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");

                            b1.OwnsOne("DateTimeType", "EffectiveEndDate", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "EffectiveTimestamp", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "RecordTimestamp", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "OperationsRecordSpecificationID", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Version", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsOne("OperationsRecordActionType", "Action", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.ToTable("OperationsRecordTemplateType");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");
                                });

                            b1.OwnsMany("OperationsRecordEntryTemplateType", "OperationsRecordEntry", b2 =>
                                {
                                    b2.Property<string>("OperationsRecordTemplateTypeOperationsEventTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("OperationsRecordTemplateTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("HierarchyScopeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.HasKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId", "Id");

                                    b2.HasIndex("HierarchyScopeKey");

                                    b2.ToTable("OperationsRecordEntryTemplateType");

                                    b2.HasOne("HierarchyScopeType", "HierarchyScope")
                                        .WithMany()
                                        .HasForeignKey("HierarchyScopeKey");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordTemplateTypeId");

                                    b2.OwnsOne("DateTimeType", "EffectiveEndDate", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<DateTime>("Value")
                                                .HasColumnType("datetime2");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("DateTimeType", "EffectiveTimestamp", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<DateTime>("Value")
                                                .HasColumnType("datetime2");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("DateTimeType", "RecordTimestamp", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<DateTime>("Value")
                                                .HasColumnType("datetime2");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("DescriptionType", "Description", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "ExternalReferenceID", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "ID", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "InformationObjectID", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Version", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.OwnsOne("InformationObjectTypeType", "InformationObjectType", b3 =>
                                        {
                                            b3.Property<string>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("OperationsRecordEntryTemplateTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");

                                            b3.ToTable("OperationsRecordEntryTemplateType");

                                            b3.WithOwner()
                                                .HasForeignKey("OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeOperationsEventTypeKey", "OperationsRecordEntryTemplateTypeOperationsRecordTemplateTypeId", "OperationsRecordEntryTemplateTypeId");
                                        });

                                    b2.Navigation("Description");

                                    b2.Navigation("EffectiveEndDate");

                                    b2.Navigation("EffectiveTimestamp");

                                    b2.Navigation("ExternalReferenceID");

                                    b2.Navigation("HierarchyScope");

                                    b2.Navigation("ID");

                                    b2.Navigation("InformationObjectID");

                                    b2.Navigation("InformationObjectType");

                                    b2.Navigation("RecordTimestamp");

                                    b2.Navigation("Version");
                                });

                            b1.Navigation("Action");

                            b1.Navigation("Description");

                            b1.Navigation("EffectiveEndDate");

                            b1.Navigation("EffectiveTimestamp");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("OperationsRecordEntry");

                            b1.Navigation("OperationsRecordSpecificationID");

                            b1.Navigation("RecordTimestamp");

                            b1.Navigation("Version");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsEventTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsEventTypeKey");

                            b1.ToTable("OperationsEvents");

                            b1.WithOwner()
                                .HasForeignKey("OperationsEventTypeKey");
                        });

                    b.Navigation("Acknowledgement");

                    b.Navigation("Category");

                    b.Navigation("Description");

                    b.Navigation("EffectiveTimeStamp");

                    b.Navigation("EnterpriseFunction");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MOMFunction");

                    b.Navigation("OperationsDefinitionID");

                    b.Navigation("OperationsEventLevel");

                    b.Navigation("OperationsEventRecord");

                    b.Navigation("OperationsEventType1");

                    b.Navigation("OperationsType");

                    b.Navigation("RecordTimeStamp");

                    b.Navigation("Source");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsMaterialBillItemType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationsMaterialBillItemType", null)
                        .WithMany("AssemblyBillOfMaterialItem")
                        .HasForeignKey("OperationsMaterialBillItemTypeKey");

                    b.HasOne("OperationsMaterialBillType", null)
                        .WithMany("OperationsMaterialBillItem")
                        .HasForeignKey("OperationsMaterialBillTypeKey");

                    b.OwnsOne("AssemblyRelationshipType", "AssemblyRelationship", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("AssemblyTypeType", "AssemblyType", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("CodeType", "UseType", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialSpecificationID", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillItemTypeKey", "Id");

                            b1.ToTable("OperationsMaterialBillItems_MaterialSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillItemTypeKey");

                            b1.ToTable("OperationsMaterialBillItems");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillItemTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("OperationsMaterialBillItemTypeKey", "Id");

                            b1.ToTable("OperationsMaterialBillItems_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillItemTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOperationsMaterialBillItemTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OperationsMaterialBillItems_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOperationsMaterialBillItemTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OperationsMaterialBillItems_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOperationsMaterialBillItemTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OperationsMaterialBillItems_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypeOperationsMaterialBillItemTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("OperationsMaterialBillItems_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypeOperationsMaterialBillItemTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.Navigation("AssemblyRelationship");

                    b.Navigation("AssemblyType");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MaterialSpecificationID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Quantity");

                    b.Navigation("UseType");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsMaterialBillType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("CodeType", "UseType", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillTypeKey");

                            b1.ToTable("OperationsMaterialBills");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsMaterialBillTypeKey");

                            b1.ToTable("OperationsMaterialBills");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsMaterialBillTypeKey");

                            b1.ToTable("OperationsMaterialBills");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsMaterialBillTypeKey");

                            b1.ToTable("OperationsMaterialBills");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillTypeKey");

                            b1.ToTable("OperationsMaterialBills");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "BillOfMaterialsID", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillTypeKey", "Id");

                            b1.ToTable("OperationsMaterialBills_BillOfMaterialsID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillTypeKey");

                            b1.ToTable("OperationsMaterialBills");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsMaterialBillTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsMaterialBillTypeKey");

                            b1.ToTable("OperationsMaterialBills");

                            b1.WithOwner()
                                .HasForeignKey("OperationsMaterialBillTypeKey");
                        });

                    b.Navigation("BillOfMaterialsID");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("UseType");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsPerformanceType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "Endtime", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsScheduleID", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.OwnsOne("ResponseStateType", "PerformanceState", b1 =>
                        {
                            b1.Property<string>("OperationsPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsPerformanceTypeKey");

                            b1.ToTable("OperationsPerformances");

                            b1.WithOwner()
                                .HasForeignKey("OperationsPerformanceTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("Endtime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsScheduleID");

                    b.Navigation("OperationsType");

                    b.Navigation("PerformanceState");

                    b.Navigation("PublishedDate");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsRequestType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationsScheduleType", null)
                        .WithMany("OperationsRequest")
                        .HasForeignKey("OperationsScheduleTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsDefinitionID", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsSegmentID", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("RequestStateType", "RequestState", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("OperationsRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsRequestTypeKey");

                            b1.ToTable("OperationsRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationsRequestTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsDefinitionID");

                    b.Navigation("OperationsSegmentID");

                    b.Navigation("OperationsType");

                    b.Navigation("RequestState");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsResponseType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationsPerformanceType", null)
                        .WithMany("OperationsResponse")
                        .HasForeignKey("OperationsPerformanceTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsResponseTypeKey");

                            b1.ToTable("OperationsResponses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsResponseTypeKey");

                            b1.ToTable("OperationsResponses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey");

                            b1.ToTable("OperationsResponses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey");

                            b1.ToTable("OperationsResponses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsDefinitionID", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey", "Id");

                            b1.ToTable("OperationsResponses_OperationsDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsRequestID", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey", "Id");

                            b1.ToTable("OperationsResponses_OperationsRequestID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsSegmentID", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey", "Id");

                            b1.ToTable("OperationsResponses_OperationsSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "SegmentRequirementID", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey", "Id");

                            b1.ToTable("OperationsResponses_SegmentRequirementID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey");

                            b1.ToTable("OperationsResponses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey");

                            b1.ToTable("OperationsResponses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.OwnsOne("ResponseStateType", "ResponseState", b1 =>
                        {
                            b1.Property<string>("OperationsResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsResponseTypeKey");

                            b1.ToTable("OperationsResponses");

                            b1.WithOwner()
                                .HasForeignKey("OperationsResponseTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsDefinitionID");

                    b.Navigation("OperationsRequestID");

                    b.Navigation("OperationsSegmentID");

                    b.Navigation("OperationsType");

                    b.Navigation("ResponseState");

                    b.Navigation("SegmentRequirementID");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsScheduleType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.OwnsOne("RequestStateType", "ScheduleState", b1 =>
                        {
                            b1.Property<string>("OperationsScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsScheduleTypeKey");

                            b1.ToTable("OperationsSchedules");

                            b1.WithOwner()
                                .HasForeignKey("OperationsScheduleTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsType");

                    b.Navigation("PublishedDate");

                    b.Navigation("ScheduleState");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("OperationsSegmentType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OperationsDefinitionType", null)
                        .WithMany("OperationsSegment")
                        .HasForeignKey("OperationsDefinitionTypeKey");

                    b.HasOne("OperationsSegmentType", null)
                        .WithMany("OperationsSegmentChild")
                        .HasForeignKey("OperationsSegmentTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("DefinitionTypeType", "DefinitionType", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "BillOfMaterialsID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey", "Id");

                            b1.ToTable("OperationsSegments_BillOfMaterialsID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "BillOfResourcesID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey", "Id");

                            b1.ToTable("OperationsSegments_BillOfResourcesID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "DependentOperationsSegmentID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey", "Id");

                            b1.ToTable("OperationsSegments_DependentOperationsSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsMaterialBillID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey", "Id");

                            b1.ToTable("OperationsSegments_OperationsMaterialBillID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsSegmentPatternID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "ProcessSegmentID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey", "Id");

                            b1.ToTable("OperationsSegments_ProcessSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkMasterSourceID", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey", "Id");

                            b1.ToTable("OperationsSegments_WorkMasterSourceID");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OperationsSegmentTypeKey");

                            b1.ToTable("OperationsSegments");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");
                        });

                    b.OwnsMany("ParameterType", "ParameterSpecification", b1 =>
                        {
                            b1.Property<string>("OperationsSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("OperationsSegmentTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("OperationsSegments_ParameterSpecification");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("OperationsSegmentTypeKey");

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOperationsSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId");

                                    b2.ToTable("OperationsSegments_ParameterSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOperationsSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId");

                                    b2.ToTable("OperationsSegments_ParameterSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ParameterSpecificationID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOperationsSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("OperationsSegments_ParameterSpecification_ParameterSpecificationID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ProcessSegmentParameterID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOperationsSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("OperationsSegments_ParameterSpecification_ProcessSegmentParameterID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("ValueType", "Value", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeOperationsSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("OperationsSegments_ParameterSpecification_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeOperationsSegmentTypeKey", "ParameterTypeId");

                                    b2.OwnsOne("DataTypeType", "DataType", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOperationsSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OperationsSegments_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Key", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOperationsSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OperationsSegments_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOperationsSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OperationsSegments_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("ValueStringType", "ValueString", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeOperationsSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("CharacterSetCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("EncodingCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Filename")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageLocaleID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("MimeCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Uri")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("OperationsSegments_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeOperationsSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.Navigation("DataType");

                                    b2.Navigation("Key");

                                    b2.Navigation("UnitOfMeasure");

                                    b2.Navigation("ValueString");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("ParameterSpecificationID");

                            b1.Navigation("ProcessSegmentParameterID");

                            b1.Navigation("Value");
                        });

                    b.Navigation("BillOfMaterialsID");

                    b.Navigation("BillOfResourcesID");

                    b.Navigation("DefinitionType");

                    b.Navigation("DependentOperationsSegmentID");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsMaterialBillID");

                    b.Navigation("OperationsSegmentPatternID");

                    b.Navigation("OperationsType");

                    b.Navigation("ParameterSpecification");

                    b.Navigation("ProcessSegmentID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");

                    b.Navigation("WorkMasterSourceID");
                });

            modelBuilder.Entity("PersonPropertyType", b =>
                {
                    b.HasOne("PersonPropertyType", null)
                        .WithMany("PersonPropertyChild")
                        .HasForeignKey("PersonPropertyTypeKey");

                    b.HasOne("PersonType", null)
                        .WithMany("PersonProperty")
                        .HasForeignKey("PersonTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PersonPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonPropertyTypeKey");

                            b1.ToTable("PeoplesProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PersonPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonPropertyTypeKey");

                            b1.ToTable("PeoplesProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonnelClassPropertyID", b1 =>
                        {
                            b1.Property<string>("PersonPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonPropertyTypeKey");

                            b1.ToTable("PeoplesProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("PersonPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PersonPropertyTypeKey", "Id");

                            b1.ToTable("PeoplesProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("PersonPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PeoplesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PeoplesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PeoplesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PeoplesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PersonnelClassPropertyID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("PersonType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonnelClassID", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonTypeKey", "Id");

                            b1.ToTable("Peoples_PersonnelClassID");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonTypeKey", "Id");

                            b1.ToTable("Peoples_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsOne("PersonNameType", "PersonName", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePersonTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePersonTypeKey");

                                    b2.ToTable("Peoples");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePersonTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePersonTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePersonTypeKey");

                                    b2.ToTable("Peoples");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePersonTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("PersonTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PersonTypeKey");

                            b1.ToTable("Peoples");

                            b1.WithOwner()
                                .HasForeignKey("PersonTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonTypeKey");

                                    b2.ToTable("Peoples");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonTypeKey");

                                    b2.ToTable("Peoples");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonTypeKey");

                                    b2.ToTable("Peoples");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonTypeKey");

                                    b2.ToTable("Peoples");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("PersonName");

                    b.Navigation("PersonnelClassID");

                    b.Navigation("PublishedDate");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("PersonnelClassPropertyType", b =>
                {
                    b.HasOne("PersonnelClassPropertyType", null)
                        .WithMany("PersonnelClassPropertyChild")
                        .HasForeignKey("PersonnelClassPropertyTypeKey");

                    b.HasOne("PersonnelClassType", null)
                        .WithMany("PersonnelClassProperty")
                        .HasForeignKey("PersonnelClassTypeKey");

                    b.OwnsOne("ClassPropertyTypeType", "PropertyType", b1 =>
                        {
                            b1.Property<string>("PersonnelClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassPropertyTypeKey");

                            b1.ToTable("PersonnelClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassPropertyTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PersonnelClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassPropertyTypeKey");

                            b1.ToTable("PersonnelClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PersonnelClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassPropertyTypeKey");

                            b1.ToTable("PersonnelClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("PersonnelClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PersonnelClassPropertyTypeKey", "Id");

                            b1.ToTable("PersonnelClassProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PropertyType");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("PersonnelClassType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PersonnelClassTypeKey");

                            b1.ToTable("PersonnelClasses");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PersonnelClassTypeKey");

                            b1.ToTable("PersonnelClasses");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PersonnelClassTypeKey");

                            b1.ToTable("PersonnelClasses");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassTypeKey");

                            b1.ToTable("PersonnelClasses");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassTypeKey");

                            b1.ToTable("PersonnelClasses");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonSourceID", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassTypeKey", "Id");

                            b1.ToTable("PersonnelClasses_PersonSourceID");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonnelClassBaseID", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassTypeKey", "Id");

                            b1.ToTable("PersonnelClasses_PersonnelClassBaseID");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassTypeKey", "Id");

                            b1.ToTable("PersonnelClasses_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("PersonnelClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelClassTypeKey");

                            b1.ToTable("PersonnelClasses");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelClassTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PersonnelClassBaseID");

                    b.Navigation("PersonSourceID");

                    b.Navigation("PublishedDate");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("PersonnelSegmentSpecificationPropertyType", b =>
                {
                    b.HasOne("PersonnelSegmentSpecificationPropertyType", null)
                        .WithMany("PersonnalSegmentSpecificationPropertyChild")
                        .HasForeignKey("PersonnelSegmentSpecificationPropertyTypeKey");

                    b.HasOne("PersonnelSegmentSpecificationType", null)
                        .WithMany("PersonnelSegmentSpecificationProperty")
                        .HasForeignKey("PersonnelSegmentSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PersonnelSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PersonnelSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonPropertyID", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PersonnelSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PersonnelClassPropertyID", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PersonnelSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PersonnelSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("PersonnelSegmentSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PersonnelSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("PersonnelSegmentSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypePersonnelSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePersonnelSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PersonnelClassPropertyID");

                    b.Navigation("PersonPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("PersonnelSegmentSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("PersonnelSegmentSpecificationType", null)
                        .WithMany("PersonnelSegmentSpecificationChild")
                        .HasForeignKey("PersonnelSegmentSpecificationTypeKey");

                    b.HasOne("ProcessSegmentType", null)
                        .WithMany("PersonnelSegmentSpecification")
                        .HasForeignKey("ProcessSegmentTypeKey");

                    b.OwnsOne("CodeType", "PersonnelUse", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey");

                            b1.ToTable("PersonnelSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey");

                            b1.ToTable("PersonnelSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey");

                            b1.ToTable("PersonnelSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonID", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PersonnelSegmentSpecifications_PersonID");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PersonnelClassID", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PersonnelSegmentSpecifications_PersonnelClassID");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PersonnelSegmentSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PersonnelSegmentSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PersonnelSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePersonnelSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "OperationalLocation", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey");

                            b1.ToTable("PersonnelSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePersonnelSegmentSpecificationTypeKey");

                                    b2.ToTable("PersonnelSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePersonnelSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePersonnelSegmentSpecificationTypeKey");

                                    b2.ToTable("PersonnelSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePersonnelSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("PersonnelSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PersonnelSegmentSpecificationTypeKey");

                            b1.ToTable("PersonnelSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PersonnelSegmentSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");

                                    b2.ToTable("PersonnelSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");

                                    b2.ToTable("PersonnelSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");

                                    b2.ToTable("PersonnelSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");

                                    b2.ToTable("PersonnelSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePersonnelSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationalLocation");

                    b.Navigation("PersonID");

                    b.Navigation("PersonnelClassID");

                    b.Navigation("PersonnelUse");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("PhysicalAssetClassPropertyType", b =>
                {
                    b.HasOne("PhysicalAssetClassPropertyType", null)
                        .WithMany("PhysicalAssetClassPropertyChild")
                        .HasForeignKey("PhysicalAssetClassPropertyTypeKey");

                    b.HasOne("PhysicalAssetClassType", null)
                        .WithMany("PhysicalAssetClassProperty")
                        .HasForeignKey("PhysicalAssetClassTypeKey");

                    b.OwnsOne("ClassPropertyTypeType", "PropertyType", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassPropertyTypeKey");

                            b1.ToTable("PhysicalAssetClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassPropertyTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassPropertyTypeKey");

                            b1.ToTable("PhysicalAssetClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassPropertyTypeKey");

                            b1.ToTable("PhysicalAssetClassProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PhysicalAssetClassPropertyTypeKey", "Id");

                            b1.ToTable("PhysicalAssetClassProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetClassPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetClassProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetClassPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PropertyType");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("PhysicalAssetClassType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("PhysicalAssetClassType", null)
                        .WithMany("PhysicalAssetClassChild")
                        .HasForeignKey("PhysicalAssetClassTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PhysicalAssetClassTypeKey");

                            b1.ToTable("PhysicalAssetClasses");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PhysicalAssetClassTypeKey");

                            b1.ToTable("PhysicalAssetClasses");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PhysicalAssetClassTypeKey");

                            b1.ToTable("PhysicalAssetClasses");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassTypeKey");

                            b1.ToTable("PhysicalAssetClasses");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassTypeKey");

                            b1.ToTable("PhysicalAssetClasses");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetClassBaseID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassTypeKey", "Id");

                            b1.ToTable("PhysicalAssetClasses_PhysicalAssetClassBaseID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetSourceID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassTypeKey", "Id");

                            b1.ToTable("PhysicalAssetClasses_PhysicalAssetSourceID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassTypeKey", "Id");

                            b1.ToTable("PhysicalAssetClasses_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassTypeKey");

                            b1.ToTable("PhysicalAssetClasses");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.OwnsMany("NameType", "Manufacturer", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetClassTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetClassTypeKey", "Id");

                            b1.ToTable("PhysicalAssetClasses_Manufacturer");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetClassTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("Manufacturer");

                    b.Navigation("PhysicalAssetClassBaseID");

                    b.Navigation("PhysicalAssetSourceID");

                    b.Navigation("PublishedDate");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("PhysicalAssetPropertyType", b =>
                {
                    b.HasOne("PhysicalAssetPropertyType", null)
                        .WithMany("PhysicalAssetPropertyChild")
                        .HasForeignKey("PhysicalAssetPropertyTypeKey");

                    b.HasOne("PhysicalAssetType", null)
                        .WithMany("PhysicalAssetProperty")
                        .HasForeignKey("PhysicalAssetTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetPropertyTypeKey");

                            b1.ToTable("PhysicalAssetProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetPropertyTypeKey");

                            b1.ToTable("PhysicalAssetProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetClassPropertyID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetPropertyTypeKey");

                            b1.ToTable("PhysicalAssetProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PhysicalAssetPropertyTypeKey", "Id");

                            b1.ToTable("PhysicalAssetProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassPropertyID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("PhysicalAssetSegmentSpecificationPropertyType", b =>
                {
                    b.HasOne("PhysicalAssetSegmentSpecificationPropertyType", null)
                        .WithMany("PhysicalAssetSegmentSpecificationPropertyChild")
                        .HasForeignKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                    b.HasOne("PhysicalAssetSegmentSpecificationType", null)
                        .WithMany("PhysicalAssetSegmentSpecificationProperty")
                        .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetClassPropertyID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "PhysicalAssetPropertyID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PhysicalAssetSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("PhysicalAssetSegmentSpecificationProperties_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PhysicalAssetSegmentSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("PhysicalAssetSegmentSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypePhysicalAssetSegmentSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassPropertyID");

                    b.Navigation("PhysicalAssetPropertyID");

                    b.Navigation("Quantity");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("PhysicalAssetSegmentSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("PhysicalAssetSegmentSpecificationType", null)
                        .WithMany("PhysicalAssetSegmentSpecificationChild")
                        .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");

                    b.HasOne("ProcessSegmentType", null)
                        .WithMany("PhysicalAssetSegmentSpecification")
                        .HasForeignKey("ProcessSegmentTypeKey");

                    b.OwnsOne("CodeType", "PhysicalAssetUse", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetClassID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PhysicalAssetSegmentSpecifications_PhysicalAssetClassID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PhysicalAssetSegmentSpecifications_PhysicalAssetID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PhysicalAssetSegmentSpecifications_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");
                        });

                    b.OwnsMany("QuantityValueType", "Quantity", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey", "Id");

                            b1.ToTable("PhysicalAssetSegmentSpecifications_Quantity");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("QuantityStringType", "QuantityString", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("QuantityValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications_Quantity");

                                    b2.WithOwner()
                                        .HasForeignKey("QuantityValueTypePhysicalAssetSegmentSpecificationTypeKey", "QuantityValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("QuantityString");

                            b1.Navigation("UnitOfMeasure");
                        });

                    b.OwnsOne("ResourceLocationType", "PhysicalLocation", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePhysicalAssetSegmentSpecificationTypeKey");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePhysicalAssetSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePhysicalAssetSegmentSpecificationTypeKey");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePhysicalAssetSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetSegmentSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.ToTable("PhysicalAssetSegmentSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetSegmentSpecificationTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");

                                    b2.ToTable("PhysicalAssetSegmentSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetSegmentSpecificationTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassID");

                    b.Navigation("PhysicalAssetID");

                    b.Navigation("PhysicalAssetUse");

                    b.Navigation("PhysicalLocation");

                    b.Navigation("Quantity");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");
                });

            modelBuilder.Entity("PhysicalAssetType", b =>
                {
                    b.HasOne("HierarchyScopeType", "EquipmentLevel")
                        .WithMany()
                        .HasForeignKey("EquipmentLevelKey");

                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("PhysicalAssetType", null)
                        .WithMany("PhysicalAssetChild")
                        .HasForeignKey("PhysicalAssetTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsMany("EquipmentAssetMappingType", "EquipmentAssetMapping", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PhysicalAssetTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("PhysicalAssets_EquipmentAssetMapping");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");

                            b1.OwnsOne("DateTimeType", "EndTime", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("PhysicalAssets_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "StartTime", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("PhysicalAssets_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "EquipmentID", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("PhysicalAssets_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "PhysicalAssetID", b2 =>
                                {
                                    b2.Property<string>("EquipmentAssetMappingTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("EquipmentAssetMappingTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");

                                    b2.ToTable("PhysicalAssets_EquipmentAssetMapping");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentAssetMappingTypePhysicalAssetTypeKey", "EquipmentAssetMappingTypeId");
                                });

                            b1.Navigation("EndTime");

                            b1.Navigation("EquipmentID");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("PhysicalAssetID");

                            b1.Navigation("StartTime");
                        });

                    b.OwnsOne("IdentifierType", "FixedAssetID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "PhysicalAssetClassID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetTypeKey", "Id");

                            b1.ToTable("PhysicalAssets_PhysicalAssetClassID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetTypeKey", "Id");

                            b1.ToTable("PhysicalAssets_TestSpecificationID");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "VendorID", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");
                        });

                    b.OwnsOne("ResourceLocationType", "PhysicalLocation", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");

                            b1.OwnsOne("ResourceLocationTypeType", "LocationType", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePhysicalAssetTypeKey");

                                    b2.ToTable("PhysicalAssets");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePhysicalAssetTypeKey");
                                });

                            b1.OwnsOne("TextType", "Location", b2 =>
                                {
                                    b2.Property<string>("ResourceLocationTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ResourceLocationTypePhysicalAssetTypeKey");

                                    b2.ToTable("PhysicalAssets");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceLocationTypePhysicalAssetTypeKey");
                                });

                            b1.Navigation("Location");

                            b1.Navigation("LocationType");
                        });

                    b.OwnsOne("SpatialDefinitionType", "SpatialDefinition", b1 =>
                        {
                            b1.Property<string>("PhysicalAssetTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("PhysicalAssetTypeKey");

                            b1.ToTable("PhysicalAssets");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalAssetTypeKey");

                            b1.OwnsOne("IdentifierType", "SRID", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetTypeKey");

                                    b2.ToTable("PhysicalAssets");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetTypeKey");
                                });

                            b1.OwnsOne("SpatialDefinitionFormatType", "Format", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetTypeKey");

                                    b2.ToTable("PhysicalAssets");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetTypeKey");
                                });

                            b1.OwnsOne("TextType", "SRIDAuthority", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetTypeKey");

                                    b2.ToTable("PhysicalAssets");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetTypeKey");
                                });

                            b1.OwnsOne("TextType", "Value", b2 =>
                                {
                                    b2.Property<string>("SpatialDefinitionTypePhysicalAssetTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("SpatialDefinitionTypePhysicalAssetTypeKey");

                                    b2.ToTable("PhysicalAssets");

                                    b2.WithOwner()
                                        .HasForeignKey("SpatialDefinitionTypePhysicalAssetTypeKey");
                                });

                            b1.Navigation("Format");

                            b1.Navigation("SRID");

                            b1.Navigation("SRIDAuthority");

                            b1.Navigation("Value");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("EquipmentAssetMapping");

                    b.Navigation("EquipmentLevel");

                    b.Navigation("FixedAssetID");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PhysicalAssetClassID");

                    b.Navigation("PhysicalLocation");

                    b.Navigation("PublishedDate");

                    b.Navigation("SpatialDefinition");

                    b.Navigation("TestSpecificationID");

                    b.Navigation("VendorID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ProcessSegmentType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("ProcessSegmentType", null)
                        .WithMany("ProcessSegmentChild")
                        .HasForeignKey("ProcessSegmentTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("DefinitionTypeType", "DefinitionType", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "DependentProcessSegmentID", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey", "Id");

                            b1.ToTable("ProcessSegments_DependentProcessSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsSegmentSourceID", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey", "Id");

                            b1.ToTable("ProcessSegments_OperationsSegmentSourceID");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ProcessSegmentPatternID", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "SegmentRequirementSourceID", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey", "Id");

                            b1.ToTable("ProcessSegments_SegmentRequirementSourceID");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkMasterSourceID", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey", "Id");

                            b1.ToTable("ProcessSegments_WorkMasterSourceID");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProcessSegmentTypeKey");

                            b1.ToTable("ProcessSegments");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");
                        });

                    b.OwnsMany("ParameterType", "ProcessSegmentParameter", b1 =>
                        {
                            b1.Property<string>("ProcessSegmentTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ProcessSegmentTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("ProcessSegments_ProcessSegmentParameter");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("ProcessSegmentTypeKey");

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeProcessSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId");

                                    b2.ToTable("ProcessSegments_ProcessSegmentParameter");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeProcessSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId");

                                    b2.ToTable("ProcessSegments_ProcessSegmentParameter");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ParameterSpecificationID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeProcessSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("ProcessSegments_ProcessSegmentParameter_ParameterSpecificationID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ProcessSegmentParameterID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeProcessSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("ProcessSegments_ProcessSegmentParameter_ProcessSegmentParameterID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("ValueType", "Value", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeProcessSegmentTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("ProcessSegments_ProcessSegmentParameter_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeProcessSegmentTypeKey", "ParameterTypeId");

                                    b2.OwnsOne("DataTypeType", "DataType", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeProcessSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("ProcessSegments_ProcessSegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Key", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeProcessSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("ProcessSegments_ProcessSegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeProcessSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("ProcessSegments_ProcessSegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("ValueStringType", "ValueString", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeProcessSegmentTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("CharacterSetCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("EncodingCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Filename")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageLocaleID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("MimeCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Uri")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("ProcessSegments_ProcessSegmentParameter_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeProcessSegmentTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.Navigation("DataType");

                                    b2.Navigation("Key");

                                    b2.Navigation("UnitOfMeasure");

                                    b2.Navigation("ValueString");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("ParameterSpecificationID");

                            b1.Navigation("ProcessSegmentParameterID");

                            b1.Navigation("Value");
                        });

                    b.Navigation("DefinitionType");

                    b.Navigation("DependentProcessSegmentID");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsSegmentSourceID");

                    b.Navigation("OperationsType");

                    b.Navigation("ProcessSegmentParameter");

                    b.Navigation("ProcessSegmentPatternID");

                    b.Navigation("PublishedDate");

                    b.Navigation("SegmentRequirementSourceID");

                    b.Navigation("Version");

                    b.Navigation("WorkMasterSourceID");
                });

            modelBuilder.Entity("ProcessSegmentTypeProductSegmentType", b =>
                {
                    b.HasOne("ProcessSegmentType", null)
                        .WithMany()
                        .HasForeignKey("ProcessSgementsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductSegmentType", null)
                        .WithMany()
                        .HasForeignKey("ProductSegmentsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductInformationType", b =>
                {
                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("ProductInformationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductInformationTypeKey");

                            b1.ToTable("ProductInformation");

                            b1.WithOwner()
                                .HasForeignKey("ProductInformationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ProductID", b1 =>
                        {
                            b1.Property<string>("ProductInformationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductInformationTypeKey");

                            b1.ToTable("ProductInformation");

                            b1.WithOwner()
                                .HasForeignKey("ProductInformationTypeKey");
                        });

                    b.OwnsOne("NameType", "ProductName", b1 =>
                        {
                            b1.Property<string>("ProductInformationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductInformationTypeKey");

                            b1.ToTable("ProductInformation");

                            b1.WithOwner()
                                .HasForeignKey("ProductInformationTypeKey");
                        });

                    b.OwnsOne("ValueType", "BatchSize", b1 =>
                        {
                            b1.Property<string>("ProductInformationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ProductInformationTypeKey");

                            b1.ToTable("ProductInformation");

                            b1.WithOwner()
                                .HasForeignKey("ProductInformationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeProductInformationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeProductInformationTypeKey");

                                    b2.ToTable("ProductInformation");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeProductInformationTypeKey");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeProductInformationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeProductInformationTypeKey");

                                    b2.ToTable("ProductInformation");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeProductInformationTypeKey");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeProductInformationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeProductInformationTypeKey");

                                    b2.ToTable("ProductInformation");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeProductInformationTypeKey");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeProductInformationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeProductInformationTypeKey");

                                    b2.ToTable("ProductInformation");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeProductInformationTypeKey");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("BatchSize");

                    b.Navigation("Description");

                    b.Navigation("ProductID");

                    b.Navigation("ProductName");
                });

            modelBuilder.Entity("ProductSegmentType", b =>
                {
                    b.HasOne("ProductSegmentType", "BaseSegment")
                        .WithMany("SegmentChilds")
                        .HasForeignKey("BaseSegmentKey");

                    b.HasOne("ProductInformationType", "ProductInformation")
                        .WithMany("ProductSegments")
                        .HasForeignKey("ProductInformationKey");

                    b.Navigation("BaseSegment");

                    b.Navigation("ProductInformation");
                });

            modelBuilder.Entity("RNCPropertyType", b =>
                {
                    b.HasOne("RNCPropertyType", null)
                        .WithMany("RNCPropertyChild")
                        .HasForeignKey("RNCPropertyTypeKey");

                    b.HasOne("ResourceNetworkConnectionType", null)
                        .WithMany("RNCProperty")
                        .HasForeignKey("ResourceNetworkConnectionTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("RNCPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RNCPropertyTypeKey");

                            b1.ToTable("ResourceNetworkConnectionProperties");

                            b1.WithOwner()
                                .HasForeignKey("RNCPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("RNCPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RNCPropertyTypeKey");

                            b1.ToTable("ResourceNetworkConnectionProperties");

                            b1.WithOwner()
                                .HasForeignKey("RNCPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "RNCTypePropertyID", b1 =>
                        {
                            b1.Property<string>("RNCPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RNCPropertyTypeKey");

                            b1.ToTable("ResourceNetworkConnectionProperties");

                            b1.WithOwner()
                                .HasForeignKey("RNCPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("RNCPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("RNCPropertyTypeKey", "Id");

                            b1.ToTable("ResourceNetworkConnectionProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("RNCPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("RNCTypePropertyID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("RNCTypePropertyType", b =>
                {
                    b.HasOne("ResourceNetworkConnectionTypeType", null)
                        .WithMany("RNCTypeProperty")
                        .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("RNCTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RNCTypePropertyTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypeProperties");

                            b1.WithOwner()
                                .HasForeignKey("RNCTypePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("RNCTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RNCTypePropertyTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypeProperties");

                            b1.WithOwner()
                                .HasForeignKey("RNCTypePropertyTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "RNCTypePropertyChild", b1 =>
                        {
                            b1.Property<string>("RNCTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RNCTypePropertyTypeKey", "Id");

                            b1.ToTable("ResourceNetworkConnectionTypeProperties_RNCTypePropertyChild");

                            b1.WithOwner()
                                .HasForeignKey("RNCTypePropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("RNCTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("RNCTypePropertyTypeKey", "Id");

                            b1.ToTable("ResourceNetworkConnectionTypeProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("RNCTypePropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRNCTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceNetworkConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRNCTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("RNCTypePropertyChild");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("RRNPropertyType", b =>
                {
                    b.HasOne("RRNPropertyType", null)
                        .WithMany("RRNPropertyChild")
                        .HasForeignKey("RRNPropertyTypeKey");

                    b.HasOne("ResourceRelationshipNetworkType", null)
                        .WithMany("RRNProperty")
                        .HasForeignKey("ResourceRelationshipNetworkTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("RRNPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RRNPropertyTypeKey");

                            b1.ToTable("ResourceRelationshipNetworkProperties");

                            b1.WithOwner()
                                .HasForeignKey("RRNPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("RRNPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RRNPropertyTypeKey");

                            b1.ToTable("ResourceRelationshipNetworkProperties");

                            b1.WithOwner()
                                .HasForeignKey("RRNPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("RRNPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("RRNPropertyTypeKey", "Id");

                            b1.ToTable("ResourceRelationshipNetworkProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("RRNPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRRNPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceRelationshipNetworkProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRRNPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceRelationshipNetworkProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRRNPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceRelationshipNetworkProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeRRNPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceRelationshipNetworkProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeRRNPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("ResourceNetworkConnectionType", b =>
                {
                    b.HasOne("ResourceReferenceType", "FromResourceReference")
                        .WithMany()
                        .HasForeignKey("FromResourceReferenceKey");

                    b.HasOne("ResourceRelationshipNetworkType", null)
                        .WithMany("ResourceNetworkConnection")
                        .HasForeignKey("ResourceRelationshipNetworkTypeKey");

                    b.HasOne("ResourceReferenceType", "ToResourceReference")
                        .WithMany()
                        .HasForeignKey("ToResourceReferenceKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeKey");

                            b1.ToTable("ResourceNetworkConnections");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeKey");

                            b1.ToTable("ResourceNetworkConnections");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ResourceNetworkConnectionTypeID", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeKey");

                            b1.ToTable("ResourceNetworkConnections");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("FromResourceReference");

                    b.Navigation("ID");

                    b.Navigation("ResourceNetworkConnectionTypeID");

                    b.Navigation("ToResourceReference");
                });

            modelBuilder.Entity("ResourceNetworkConnectionTypeType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ConnectionType", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ResourceNetworkConnectionSourceID", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("ResourceNetworkConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceNetworkConnectionTypeTypeKey");

                            b1.ToTable("ResourceNetworkConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("ResourceNetworkConnectionTypeTypeKey");
                        });

                    b.Navigation("ConnectionType");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("ResourceNetworkConnectionSourceID");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ResourceReferencePropertyType", b =>
                {
                    b.HasOne("ResourceReferencePropertyType", null)
                        .WithMany("ResourceReferencePropertyChild")
                        .HasForeignKey("ResourceReferencePropertyTypeKey");

                    b.HasOne("ResourceReferenceType", null)
                        .WithMany("ResourceReferenceProperty")
                        .HasForeignKey("ResourceReferenceTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("ResourceReferencePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferencePropertyTypeKey");

                            b1.ToTable("ResourceReferencesProperties");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferencePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("ResourceReferencePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferencePropertyTypeKey");

                            b1.ToTable("ResourceReferencesProperties");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferencePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ResourceClassPropertyID", b1 =>
                        {
                            b1.Property<string>("ResourceReferencePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferencePropertyTypeKey");

                            b1.ToTable("ResourceReferencesProperties");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferencePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ResourcePropertyID", b1 =>
                        {
                            b1.Property<string>("ResourceReferencePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferencePropertyTypeKey");

                            b1.ToTable("ResourceReferencesProperties");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferencePropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("ResourceReferencePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("ResourceReferencePropertyTypeKey", "Id");

                            b1.ToTable("ResourceReferencesProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferencePropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeResourceReferencePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceReferencesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeResourceReferencePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceReferencesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeResourceReferencePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceReferencesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeResourceReferencePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("ResourceReferencesProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeResourceReferencePropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("ResourceClassPropertyID");

                    b.Navigation("ResourcePropertyID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("ResourceReferenceType", b =>
                {
                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("ResourceReferenceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferenceTypeKey");

                            b1.ToTable("ResourceReferences");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferenceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ResourceClassID", b1 =>
                        {
                            b1.Property<string>("ResourceReferenceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferenceTypeKey");

                            b1.ToTable("ResourceReferences");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferenceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ResourceID", b1 =>
                        {
                            b1.Property<string>("ResourceReferenceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferenceTypeKey");

                            b1.ToTable("ResourceReferences");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferenceTypeKey");
                        });

                    b.OwnsOne("ResourceReferenceTypeType", "ResourceType", b1 =>
                        {
                            b1.Property<string>("ResourceReferenceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceReferenceTypeKey");

                            b1.ToTable("ResourceReferences");

                            b1.WithOwner()
                                .HasForeignKey("ResourceReferenceTypeKey");
                        });

                    b.Navigation("ID");

                    b.Navigation("ResourceClassID");

                    b.Navigation("ResourceID");

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("ResourceRelationshipNetworkType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.OwnsOne("RelationshipFormType", "RelationshipForm", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.OwnsOne("RelationshipTypeType", "RelationshipType", b1 =>
                        {
                            b1.Property<string>("ResourceRelationshipNetworkTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ResourceRelationshipNetworkTypeKey");

                            b1.ToTable("ResourceRelationshipNetworks");

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("RelationshipForm");

                    b.Navigation("RelationshipType");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("SegmentDependencyType", b =>
                {
                    b.HasOne("OperationsSegmentType", null)
                        .WithMany("SegmentDependency")
                        .HasForeignKey("OperationsSegmentTypeKey");

                    b.HasOne("ProcessSegmentType", "ProcessSegment")
                        .WithMany("SegmentDependency")
                        .HasForeignKey("ProcessSegmentKey");

                    b.HasOne("ProcessSegmentType", "ProcessSegment_A")
                        .WithMany()
                        .HasForeignKey("ProcessSegment_AKey");

                    b.HasOne("ProcessSegmentType", "ProcessSegment_B")
                        .WithMany()
                        .HasForeignKey("ProcessSegment_BKey");

                    b.OwnsOne("DependencyType", "Dependency", b1 =>
                        {
                            b1.Property<string>("SegmentDependencyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SegmentDependencyTypeKey");

                            b1.ToTable("SegmentDependencies");

                            b1.WithOwner()
                                .HasForeignKey("SegmentDependencyTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("SegmentDependencyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SegmentDependencyTypeKey");

                            b1.ToTable("SegmentDependencies");

                            b1.WithOwner()
                                .HasForeignKey("SegmentDependencyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("SegmentDependencyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SegmentDependencyTypeKey");

                            b1.ToTable("SegmentDependencies");

                            b1.WithOwner()
                                .HasForeignKey("SegmentDependencyTypeKey");
                        });

                    b.OwnsOne("ValueType", "DependencyFactor", b1 =>
                        {
                            b1.Property<string>("SegmentDependencyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("SegmentDependencyTypeKey");

                            b1.ToTable("SegmentDependencies");

                            b1.WithOwner()
                                .HasForeignKey("SegmentDependencyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeSegmentDependencyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeSegmentDependencyTypeKey");

                                    b2.ToTable("SegmentDependencies");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeSegmentDependencyTypeKey");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeSegmentDependencyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeSegmentDependencyTypeKey");

                                    b2.ToTable("SegmentDependencies");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeSegmentDependencyTypeKey");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeSegmentDependencyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeSegmentDependencyTypeKey");

                                    b2.ToTable("SegmentDependencies");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeSegmentDependencyTypeKey");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeSegmentDependencyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeSegmentDependencyTypeKey");

                                    b2.ToTable("SegmentDependencies");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeSegmentDependencyTypeKey");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Dependency");

                    b.Navigation("DependencyFactor");

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("ProcessSegment");

                    b.Navigation("ProcessSegment_A");

                    b.Navigation("ProcessSegment_B");
                });

            modelBuilder.Entity("TestResultType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("OpEquipmentActualType", null)
                        .WithMany("TestResult")
                        .HasForeignKey("OpEquipmentActualTypeKey");

                    b.HasOne("OpMaterialActualType", null)
                        .WithMany("TestResult")
                        .HasForeignKey("OpMaterialActualTypeKey");

                    b.HasOne("OpPersonnelActualType", null)
                        .WithMany("TestResult")
                        .HasForeignKey("OpPersonnelActualTypeKey");

                    b.HasOne("OpPhysicalAssetActualType", null)
                        .WithMany("TestResult")
                        .HasForeignKey("OpPhysicalAssetActualTypeKey");

                    b.HasOne("TestResultType", null)
                        .WithMany("TestResultChild")
                        .HasForeignKey("TestResultTypeKey");

                    b.OwnsOne("DateTimeType", "EvaluationDate", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestResultTypeKey");

                            b1.ToTable("TestSpecificationResults");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "Expiration", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestResultTypeKey");

                            b1.ToTable("TestSpecificationResults");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultTypeKey");

                            b1.ToTable("TestSpecificationResults");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultTypeKey");

                            b1.ToTable("TestSpecificationResults");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsTestRequirementID", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultTypeKey");

                            b1.ToTable("TestSpecificationResults");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "TestableObjectID", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultTypeKey");

                            b1.ToTable("TestSpecificationResults");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");
                        });

                    b.OwnsMany("PropertyMeasurementType", "PropertyMeasurement", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("TestResultTypeKey", "Id");

                            b1.ToTable("PropertyMeasurementType");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");

                            b1.OwnsOne("DateTimeType", "Expiration", b2 =>
                                {
                                    b2.Property<string>("PropertyMeasurementTypeTestResultTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("PropertyMeasurementTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");

                                    b2.ToTable("PropertyMeasurementType");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");
                                });

                            b1.OwnsOne("DateTimeType", "MeasurementDate", b2 =>
                                {
                                    b2.Property<string>("PropertyMeasurementTypeTestResultTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("PropertyMeasurementTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Value")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");

                                    b2.ToTable("PropertyMeasurementType");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");
                                });

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("PropertyMeasurementTypeTestResultTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("PropertyMeasurementTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");

                                    b2.ToTable("PropertyMeasurementType");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("PropertyMeasurementTypeTestResultTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("PropertyMeasurementTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");

                                    b2.ToTable("PropertyMeasurementType");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "TestableObjectPropertyID", b2 =>
                                {
                                    b2.Property<string>("PropertyMeasurementTypeTestResultTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("PropertyMeasurementTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId", "Id");

                                    b2.ToTable("PropertyMeasurementType_TestableObjectPropertyID");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "WorkDefinitionID", b2 =>
                                {
                                    b2.Property<string>("PropertyMeasurementTypeTestResultTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("PropertyMeasurementTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");

                                    b2.ToTable("PropertyMeasurementType");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");
                                });

                            b1.OwnsOne("ValueType", "Value", b2 =>
                                {
                                    b2.Property<string>("PropertyMeasurementTypeTestResultTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("PropertyMeasurementTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");

                                    b2.ToTable("PropertyMeasurementType");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyMeasurementTypeTestResultTypeKey", "PropertyMeasurementTypeId");

                                    b2.OwnsOne("DataTypeType", "DataType", b3 =>
                                        {
                                            b3.Property<string>("ValueTypePropertyMeasurementTypeTestResultTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypePropertyMeasurementTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");

                                            b3.ToTable("PropertyMeasurementType");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Key", b3 =>
                                        {
                                            b3.Property<string>("ValueTypePropertyMeasurementTypeTestResultTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypePropertyMeasurementTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");

                                            b3.ToTable("PropertyMeasurementType");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");
                                        });

                                    b2.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b3 =>
                                        {
                                            b3.Property<string>("ValueTypePropertyMeasurementTypeTestResultTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypePropertyMeasurementTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");

                                            b3.ToTable("PropertyMeasurementType");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");
                                        });

                                    b2.OwnsOne("ValueStringType", "ValueString", b3 =>
                                        {
                                            b3.Property<string>("ValueTypePropertyMeasurementTypeTestResultTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypePropertyMeasurementTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("CharacterSetCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("EncodingCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Filename")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageLocaleID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("MimeCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Uri")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");

                                            b3.ToTable("PropertyMeasurementType");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypePropertyMeasurementTypeTestResultTypeKey", "ValueTypePropertyMeasurementTypeId");
                                        });

                                    b2.Navigation("DataType");

                                    b2.Navigation("Key");

                                    b2.Navigation("UnitOfMeasure");

                                    b2.Navigation("ValueString");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("Expiration");

                            b1.Navigation("ID");

                            b1.Navigation("MeasurementDate");

                            b1.Navigation("TestableObjectPropertyID");

                            b1.Navigation("Value");

                            b1.Navigation("WorkDefinitionID");
                        });

                    b.OwnsOne("TextType", "EvaluatedCriterionResult", b1 =>
                        {
                            b1.Property<string>("TestResultTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestResultTypeKey");

                            b1.ToTable("TestSpecificationResults");

                            b1.WithOwner()
                                .HasForeignKey("TestResultTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EvaluatedCriterionResult");

                    b.Navigation("EvaluationDate");

                    b.Navigation("Expiration");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsTestRequirementID");

                    b.Navigation("PropertyMeasurement");

                    b.Navigation("TestableObjectID");
                });

            modelBuilder.Entity("TestSpecificationCriteriaType", b =>
                {
                    b.HasOne("TestSpecificationType", null)
                        .WithMany("TestSpecificationCriteria")
                        .HasForeignKey("TestSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("TestSpecificationCriteriaTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationCriteriaTypeKey");

                            b1.ToTable("TestSpecificationCriterias");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationCriteriaTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EvaluatedPropertyID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationCriteriaTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationCriteriaTypeKey", "Id");

                            b1.ToTable("TestSpecificationCriterias_EvaluatedPropertyID");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationCriteriaTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationCriteriaTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationCriteriaTypeKey");

                            b1.ToTable("TestSpecificationCriterias");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationCriteriaTypeKey");
                        });

                    b.OwnsMany("TextType", "Expression", b1 =>
                        {
                            b1.Property<string>("TestSpecificationCriteriaTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationCriteriaTypeKey", "Id");

                            b1.ToTable("TestSpecificationCriterias_Expression");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationCriteriaTypeKey");
                        });

                    b.OwnsMany("TextType", "Result", b1 =>
                        {
                            b1.Property<string>("TestSpecificationCriteriaTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationCriteriaTypeKey", "Id");

                            b1.ToTable("TestSpecificationCriterias_Result");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationCriteriaTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EvaluatedPropertyID");

                    b.Navigation("Expression");

                    b.Navigation("ID");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("TestSpecificationEvaluatedPropertyType", b =>
                {
                    b.HasOne("TestSpecificationType", null)
                        .WithMany("EvaluatedProperty")
                        .HasForeignKey("TestSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("TestSpecificationEvaluatedPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationEvaluatedPropertyTypeKey");

                            b1.ToTable("TestSpecificationEvaluatedProperties");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationEvaluatedPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationEvaluatedPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationEvaluatedPropertyTypeKey");

                            b1.ToTable("TestSpecificationEvaluatedProperties");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationEvaluatedPropertyTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestSpecificationCriteriaID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationEvaluatedPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationEvaluatedPropertyTypeKey", "Id");

                            b1.ToTable("TestSpecificationEvaluatedProperties_TestSpecificationCriteriaID");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationEvaluatedPropertyTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "TestableObjectPropertyID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationEvaluatedPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationEvaluatedPropertyTypeKey", "Id");

                            b1.ToTable("TestSpecificationEvaluatedProperties_TestableObjectPropertyID");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationEvaluatedPropertyTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkDefinitionID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationEvaluatedPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationEvaluatedPropertyTypeKey", "Id");

                            b1.ToTable("TestSpecificationEvaluatedProperties_WorkDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationEvaluatedPropertyTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("TestableObjectPropertyID");

                    b.Navigation("TestSpecificationCriteriaID");

                    b.Navigation("WorkDefinitionID");
                });

            modelBuilder.Entity("TestSpecificationPropertyType", b =>
                {
                    b.HasOne("TestSpecificationPropertyType", null)
                        .WithMany("TestSpecificationPropertyChild")
                        .HasForeignKey("TestSpecificationPropertyTypeKey");

                    b.HasOne("TestSpecificationType", null)
                        .WithMany("TestSpecificationProperty")
                        .HasForeignKey("TestSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("TestSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationPropertyTypeKey");

                            b1.ToTable("TestSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationPropertyTypeKey");

                            b1.ToTable("TestSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("TestSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("TestSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("TestSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("TestSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("TestSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("TestSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("TestSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("TestSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("TestSpecificationType", null)
                        .WithMany("TestSpecificationChild")
                        .HasForeignKey("TestSpecificationTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedEndDate", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsTestRequirementID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "TestableObjectID", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");
                        });

                    b.OwnsOne("ValueType", "RecurrenceQuantity", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.OwnsOne("ValueType", "TestSampleSize", b1 =>
                        {
                            b1.Property<string>("TestSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("TestSpecificationTypeKey");

                            b1.ToTable("TestSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("TestSpecificationTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeTestSpecificationTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeTestSpecificationTypeKey");

                                    b2.ToTable("TestSpecifications");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeTestSpecificationTypeKey");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsTestRequirementID");

                    b.Navigation("PublishedEndDate");

                    b.Navigation("RecurrenceQuantity");

                    b.Navigation("TestableObjectID");

                    b.Navigation("TestSampleSize");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WorkAlertDefinitionPropertyType", b =>
                {
                    b.HasOne("WorkAlertDefinitionType", null)
                        .WithMany("WorkAlertDefinitionProperty")
                        .HasForeignKey("WorkAlertDefinitionTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertDefinitionPropertyTypeKey");

                            b1.ToTable("WorkAlertDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertDefinitionPropertyTypeKey");

                            b1.ToTable("WorkAlertDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkAlertDefinitionPropertyTypeKey", "Id");

                            b1.ToTable("WorkAlertDefinitionProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("WorkAlertDefinitionType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkAlertDefinitionTypeKey");

                            b1.ToTable("WorkAlertDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkAlertDefinitionTypeKey");

                            b1.ToTable("WorkAlertDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkAlertDefinitionTypeKey");

                            b1.ToTable("WorkAlertDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertDefinitionTypeKey");

                            b1.ToTable("WorkAlertDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "Category", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertDefinitionTypeKey", "Id");

                            b1.ToTable("WorkAlertDefinitions_Category");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertDefinitionTypeKey");

                            b1.ToTable("WorkAlertDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkAlertDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertDefinitionTypeKey");

                            b1.ToTable("WorkAlertDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertDefinitionTypeKey");
                        });

                    b.Navigation("Category");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WorkAlertPropertyType", b =>
                {
                    b.HasOne("WorkAlertDefinitionPropertyType", null)
                        .WithMany("WorkAlertDefinitionPropertyChild")
                        .HasForeignKey("WorkAlertDefinitionPropertyTypeKey");

                    b.HasOne("WorkAlertPropertyType", null)
                        .WithMany("WorkAlertPropertyChid")
                        .HasForeignKey("WorkAlertPropertyTypeKey");

                    b.HasOne("WorkAlertType", null)
                        .WithMany("WorkAlertProperty")
                        .HasForeignKey("WorkAlertTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkAlertPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertPropertyTypeKey");

                            b1.ToTable("WorkAlertProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkAlertPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertPropertyTypeKey");

                            b1.ToTable("WorkAlertProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkAlertDefinitionPropertyID", b1 =>
                        {
                            b1.Property<string>("WorkAlertPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertPropertyTypeKey");

                            b1.ToTable("WorkAlertProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkAlertPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkAlertPropertyTypeKey", "Id");

                            b1.ToTable("WorkAlertProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkAlertPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkAlertProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkAlertPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");

                    b.Navigation("WorkAlertDefinitionPropertyID");
                });

            modelBuilder.Entity("WorkAlertType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "TimeStamp", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "MessageText", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Category", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkAlertTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkAlertTypeKey");

                            b1.ToTable("WorkAlerts");

                            b1.WithOwner()
                                .HasForeignKey("WorkAlertTypeKey");
                        });

                    b.Navigation("Category");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("MessageText");

                    b.Navigation("PublishedDate");

                    b.Navigation("TimeStamp");
                });

            modelBuilder.Entity("WorkCalendarDefinitionEntryPropertyType", b =>
                {
                    b.HasOne("WorkCalendarDefinitionEntryPropertyType", null)
                        .WithMany("WorkCalendarDefinitionEntryPropertyChild")
                        .HasForeignKey("WorkCalendarDefinitionEntryPropertyTypeKey");

                    b.HasOne("WorkCalendarDefinitionEntryType", null)
                        .WithMany("WorkCalendarDefinitionEntryProperty")
                        .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryPropertyTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntryProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryPropertyTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntryProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkCalendarDefinitionEntryPropertyTypeKey", "Id");

                            b1.ToTable("WorkCalendarDefinitionEntryProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("WorkCalendarDefinitionEntryType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkCalendarDefinitionEntryType", null)
                        .WithMany("WorkCalendarDefinitionEntryChild")
                        .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");

                    b.HasOne("WorkCalendarDefinitionType", null)
                        .WithMany("WorkCalendarDefinitionEntry")
                        .HasForeignKey("WorkCalendarDefinitionTypeKey");

                    b.OwnsOne("CodeType", "DurationRule", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("CodeType", "EntryType", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("CodeType", "RecurrenceTime", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionEntryTypeKey");

                            b1.ToTable("WorkCalendarDefinitionEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionEntryTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("DurationRule");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("EntryType");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("RecurrenceTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WorkCalendarDefinitionPropertyType", b =>
                {
                    b.HasOne("WorkCalendarDefinitionPropertyType", null)
                        .WithMany("WorkCalendarDefinitionPropertyChild")
                        .HasForeignKey("WorkCalendarDefinitionPropertyTypeKey");

                    b.HasOne("WorkCalendarDefinitionType", null)
                        .WithMany("WorkCalendarDefinitionProperty")
                        .HasForeignKey("WorkCalendarDefinitionTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionPropertyTypeKey");

                            b1.ToTable("WorkCalendarDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionPropertyTypeKey");

                            b1.ToTable("WorkCalendarDefinitionProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkCalendarDefinitionPropertyTypeKey", "Id");

                            b1.ToTable("WorkCalendarDefinitionProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarDefinitionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarDefinitionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarDefinitionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("WorkCalendarDefinitionType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarDefinitionTypeKey");

                            b1.ToTable("WorkCalendarDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarDefinitionTypeKey");

                            b1.ToTable("WorkCalendarDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarDefinitionTypeKey");

                            b1.ToTable("WorkCalendarDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionTypeKey");

                            b1.ToTable("WorkCalendarDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionTypeKey");

                            b1.ToTable("WorkCalendarDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkCalendarDefinitionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarDefinitionTypeKey");

                            b1.ToTable("WorkCalendarDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarDefinitionTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WorkCalendarEntryPropertyType", b =>
                {
                    b.HasOne("WorkCalendarEntryPropertyType", null)
                        .WithMany("WorkCalendarEntryPropertyChild")
                        .HasForeignKey("WorkCalendarEntryPropertyTypeKey");

                    b.HasOne("WorkCalendarEntryType", null)
                        .WithMany("WorkCalendarEntryProperty")
                        .HasForeignKey("WorkCalendarEntryTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarEntryPropertyTypeKey");

                            b1.ToTable("WorkCalendarEntryProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarEntryPropertyTypeKey");

                            b1.ToTable("WorkCalendarEntryProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkCalendarDefintionEntryPropertyID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarEntryPropertyTypeKey");

                            b1.ToTable("WorkCalendarEntryProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkCalendarEntryPropertyTypeKey", "Id");

                            b1.ToTable("WorkCalendarEntryProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarEntryPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarEntryProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarEntryPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");

                    b.Navigation("WorkCalendarDefintionEntryPropertyID");
                });

            modelBuilder.Entity("WorkCalendarEntryType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkCalendarEntryType", null)
                        .WithMany("WorkCalendarEntryChild")
                        .HasForeignKey("WorkCalendarEntryTypeKey");

                    b.HasOne("WorkCalendarType", null)
                        .WithMany("WorkCalendarEntry")
                        .HasForeignKey("WorkCalendarTypeKey");

                    b.OwnsOne("CodeType", "EntryType", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarEntryTypeKey");

                            b1.ToTable("WorkCalendarEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "FinishDateTime", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarEntryTypeKey");

                            b1.ToTable("WorkCalendarEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarEntryTypeKey");

                            b1.ToTable("WorkCalendarEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartDateTime", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarEntryTypeKey");

                            b1.ToTable("WorkCalendarEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarEntryTypeKey");

                            b1.ToTable("WorkCalendarEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarEntryTypeKey");

                            b1.ToTable("WorkCalendarEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkCalendarDefintionEntryID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarEntryTypeKey");

                            b1.ToTable("WorkCalendarEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarEntryTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EntryType");

                    b.Navigation("FinishDateTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("StartDateTime");

                    b.Navigation("WorkCalendarDefintionEntryID");
                });

            modelBuilder.Entity("WorkCalendarPropertyType", b =>
                {
                    b.HasOne("WorkCalendarPropertyType", null)
                        .WithMany("WorkCalendarPropertyChild")
                        .HasForeignKey("WorkCalendarPropertyTypeKey");

                    b.HasOne("WorkCalendarType", null)
                        .WithMany("WorkCalendarProperty")
                        .HasForeignKey("WorkCalendarTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarPropertyTypeKey");

                            b1.ToTable("WorkCalendarProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarPropertyTypeKey");

                            b1.ToTable("WorkCalendarProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkCalendarDefintionPropertyID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarPropertyTypeKey");

                            b1.ToTable("WorkCalendarProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkCalendarPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkCalendarPropertyTypeKey", "Id");

                            b1.ToTable("WorkCalendarProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkCalendarPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkCalendarProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkCalendarPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");

                    b.Navigation("WorkCalendarDefintionPropertyID");
                });

            modelBuilder.Entity("WorkCalendarType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarTypeKey");

                            b1.ToTable("WorkCalendars");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarTypeKey");

                            b1.ToTable("WorkCalendars");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkCalendarTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCalendarTypeKey");

                            b1.ToTable("WorkCalendars");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCalendarTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarTypeKey");

                            b1.ToTable("WorkCalendars");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCalendarTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarTypeKey");

                            b1.ToTable("WorkCalendars");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkCalendarTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCalendarTypeKey");

                            b1.ToTable("WorkCalendars");

                            b1.WithOwner()
                                .HasForeignKey("WorkCalendarTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WorkCapabilityType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("ConfidenceFactorType", "ConfidenceFactor", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "OperationsType", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.OwnsOne("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("WorkCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkCapabilityTypeKey");

                            b1.ToTable("WorkCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkCapabilityTypeKey");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("ConfidenceFactor");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsType");

                    b.Navigation("PublishedDate");

                    b.Navigation("Reason");

                    b.Navigation("StartTime");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WorkDirectiveType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkDirectiveType", null)
                        .WithMany("WorkDirectiveChild")
                        .HasForeignKey("WorkDirectiveTypeKey");

                    b.HasOne("WorkflowSpecificationType", "WorkflowSpecification")
                        .WithMany()
                        .HasForeignKey("WorkflowSpecificationKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "JobOrderSourceID", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkMasterID", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.OwnsMany("ParameterType", "ParameterSpecification", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("WorkDirectiveTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("WorkDirectives_ParameterSpecification");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkDirectiveTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId");

                                    b2.ToTable("WorkDirectives_ParameterSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkDirectiveTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId");

                                    b2.ToTable("WorkDirectives_ParameterSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ParameterSpecificationID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkDirectiveTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("WorkDirectives_ParameterSpecification_ParameterSpecificationID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ProcessSegmentParameterID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkDirectiveTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("WorkDirectives_ParameterSpecification_ProcessSegmentParameterID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("ValueType", "Value", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkDirectiveTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("WorkDirectives_ParameterSpecification_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkDirectiveTypeKey", "ParameterTypeId");

                                    b2.OwnsOne("DataTypeType", "DataType", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkDirectiveTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkDirectives_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Key", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkDirectiveTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkDirectives_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkDirectiveTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkDirectives_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("ValueStringType", "ValueString", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkDirectiveTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("CharacterSetCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("EncodingCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Filename")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageLocaleID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("MimeCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Uri")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkDirectives_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkDirectiveTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.Navigation("DataType");

                                    b2.Navigation("Key");

                                    b2.Navigation("UnitOfMeasure");

                                    b2.Navigation("ValueString");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("ParameterSpecificationID");

                            b1.Navigation("ProcessSegmentParameterID");

                            b1.Navigation("Value");
                        });

                    b.OwnsOne("ResponseStateType", "WorkDirectiveState", b1 =>
                        {
                            b1.Property<string>("WorkDirectiveTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkDirectiveTypeKey");

                            b1.ToTable("WorkDirectives");

                            b1.WithOwner()
                                .HasForeignKey("WorkDirectiveTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("JobOrderSourceID");

                    b.Navigation("ParameterSpecification");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");

                    b.Navigation("WorkDirectiveState");

                    b.Navigation("WorkflowSpecification");

                    b.Navigation("WorkMasterID");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("WorkMasterCapabilityType", b =>
                {
                    b.HasOne("WorkCapabilityType", null)
                        .WithMany("WorkMasterCapability")
                        .HasForeignKey("WorkCapabilityTypeKey");

                    b.HasOne("WorkMasterCapabilityType", null)
                        .WithMany("WorkMasterCapability")
                        .HasForeignKey("WorkMasterCapabilityTypeKey");

                    b.OwnsOne("CapabilityTypeType", "CapabilityType", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkMasterID", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterCapabilityTypeKey");

                            b1.ToTable("WorkMasterCapabilities");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.OwnsMany("ReasonType", "Reason", b1 =>
                        {
                            b1.Property<string>("WorkMasterCapabilityTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterCapabilityTypeKey", "Id");

                            b1.ToTable("WorkMasterCapabilities_Reason");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterCapabilityTypeKey");
                        });

                    b.Navigation("CapabilityType");

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Reason");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkMasterID");
                });

            modelBuilder.Entity("WorkMasterType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkMasterType", null)
                        .WithMany("WorkMasterChild")
                        .HasForeignKey("WorkMasterTypeKey");

                    b.HasOne("WorkflowSpecificationType", "WorkflowSpecification")
                        .WithMany()
                        .HasForeignKey("WorkflowSpecificationKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("DefinitionTypeType", "DefinitionType", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "JobOrderSourceID", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsDefinitionID", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey", "Id");

                            b1.ToTable("WorkMasters_OperationsDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "OperationsSegmentID", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey", "Id");

                            b1.ToTable("WorkMasters_OperationsSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "ProcessSegmentID", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey", "Id");

                            b1.ToTable("WorkMasters_ProcessSegmentID");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkMasterPatternID", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkMasterTypeKey");

                            b1.ToTable("WorkMasters");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");
                        });

                    b.OwnsMany("ParameterType", "ParameterSpecification", b1 =>
                        {
                            b1.Property<string>("WorkMasterTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("HierarchyScopeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("WorkMasterTypeKey", "Id");

                            b1.HasIndex("HierarchyScopeKey");

                            b1.ToTable("WorkMasters_ParameterSpecification");

                            b1.HasOne("HierarchyScopeType", "HierarchyScope")
                                .WithMany()
                                .HasForeignKey("HierarchyScopeKey");

                            b1.WithOwner()
                                .HasForeignKey("WorkMasterTypeKey");

                            b1.OwnsOne("DescriptionType", "Description", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkMasterTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId");

                                    b2.ToTable("WorkMasters_ParameterSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "ID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkMasterTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId");

                                    b2.ToTable("WorkMasters_ParameterSpecification");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ParameterSpecificationID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkMasterTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("WorkMasters_ParameterSpecification_ParameterSpecificationID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("IdentifierType", "ProcessSegmentParameterID", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkMasterTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("WorkMasters_ParameterSpecification_ProcessSegmentParameterID");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId");
                                });

                            b1.OwnsMany("ValueType", "Value", b2 =>
                                {
                                    b2.Property<string>("ParameterTypeWorkMasterTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ParameterTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.HasKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId", "Id");

                                    b2.ToTable("WorkMasters_ParameterSpecification_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ParameterTypeWorkMasterTypeKey", "ParameterTypeId");

                                    b2.OwnsOne("DataTypeType", "DataType", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkMasterTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("OtherValue")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkMasters_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("IdentifierType", "Key", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkMasterTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("SchemeAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemeVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkMasters_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkMasterTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemeURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkMasters_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.OwnsOne("ValueStringType", "ValueString", b3 =>
                                        {
                                            b3.Property<string>("ValueTypeParameterTypeWorkMasterTypeKey")
                                                .HasColumnType("nvarchar(450)");

                                            b3.Property<int>("ValueTypeParameterTypeId")
                                                .HasColumnType("int");

                                            b3.Property<int>("ValueTypeId")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int")
                                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                            b3.Property<string>("CharacterSetCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("CurrencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("EncodingCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Filename")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Format")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("LanguageLocaleID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListSchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("ListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("MimeCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Name")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaDataURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaURI")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("SchemaVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCode")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListAgencyName")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("UnitCodeListVersionID")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Uri")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Value")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");

                                            b3.ToTable("WorkMasters_ParameterSpecification_Value");

                                            b3.WithOwner()
                                                .HasForeignKey("ValueTypeParameterTypeWorkMasterTypeKey", "ValueTypeParameterTypeId", "ValueTypeId");
                                        });

                                    b2.Navigation("DataType");

                                    b2.Navigation("Key");

                                    b2.Navigation("UnitOfMeasure");

                                    b2.Navigation("ValueString");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("HierarchyScope");

                            b1.Navigation("ID");

                            b1.Navigation("ParameterSpecificationID");

                            b1.Navigation("ProcessSegmentParameterID");

                            b1.Navigation("Value");
                        });

                    b.Navigation("DefinitionType");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("JobOrderSourceID");

                    b.Navigation("OperationsDefinitionID");

                    b.Navigation("OperationsSegmentID");

                    b.Navigation("ParameterSpecification");

                    b.Navigation("ProcessSegmentID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");

                    b.Navigation("WorkflowSpecification");

                    b.Navigation("WorkMasterPatternID");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("WorkPerformanceType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkPerformanceType", null)
                        .WithMany("WorkPerformanceChild")
                        .HasForeignKey("WorkPerformanceTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkScheduleID", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.OwnsOne("ResponseStateType", "WorkState", b1 =>
                        {
                            b1.Property<string>("WorkPerformanceTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkPerformanceTypeKey");

                            b1.ToTable("WorkPerformances");

                            b1.WithOwner()
                                .HasForeignKey("WorkPerformanceTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkScheduleID");

                    b.Navigation("WorkState");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("WorkRecordEntryType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkRecordEntryType", null)
                        .WithMany("WorkRecordEntryChild")
                        .HasForeignKey("WorkRecordEntryTypeKey");

                    b.HasOne("WorkRecordType", null)
                        .WithMany("WorkRecordEntry")
                        .HasForeignKey("WorkRecordTypeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveTimestamp", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "RecordTimestamp", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ExternalReferenceID", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "InformationObjectID", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.OwnsOne("InformationObjectTypeType", "InformationObjectType", b1 =>
                        {
                            b1.Property<string>("WorkRecordEntryTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordEntryTypeKey");

                            b1.ToTable("WorkRecordEntries");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordEntryTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveTimestamp");

                    b.Navigation("ExternalReferenceID");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("InformationObjectID");

                    b.Navigation("InformationObjectType");

                    b.Navigation("RecordTimestamp");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("WorkRecordType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkRecordType", null)
                        .WithMany("WorkRecordChild")
                        .HasForeignKey("WorkRecordTypeKey");

                    b.OwnsOne("CodeType", "Language", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("CodeType", "RecordStatus", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveTimestamp", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "LastChangedDate", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "RecordTimestamp", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "BatchID", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey", "Id");

                            b1.ToTable("WorkRecords_BatchID");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "CampaignID", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey", "Id");

                            b1.ToTable("WorkRecords_CampaignID");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "EquipmentID", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey", "Id");

                            b1.ToTable("WorkRecords_EquipmentID");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialDefinitionID", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey", "Id");

                            b1.ToTable("WorkRecords_MaterialDefinitionID");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "MaterialLotID", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey", "Id");

                            b1.ToTable("WorkRecords_MaterialLotID");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkRecordSpecificationID", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("OperationsRecordActionType", "Action", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.OwnsOne("TextType", "Delimiter", b1 =>
                        {
                            b1.Property<string>("WorkRecordTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRecordTypeKey");

                            b1.ToTable("WorkRecords");

                            b1.WithOwner()
                                .HasForeignKey("WorkRecordTypeKey");
                        });

                    b.Navigation("Action");

                    b.Navigation("BatchID");

                    b.Navigation("CampaignID");

                    b.Navigation("Delimiter");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveTimestamp");

                    b.Navigation("EquipmentID");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("Language");

                    b.Navigation("LastChangedDate");

                    b.Navigation("MaterialDefinitionID");

                    b.Navigation("MaterialLotID");

                    b.Navigation("RecordStatus");

                    b.Navigation("RecordTimestamp");

                    b.Navigation("Version");

                    b.Navigation("WorkRecordSpecificationID");
                });

            modelBuilder.Entity("WorkRequestType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkRequestType", null)
                        .WithMany("WorkRequestChild")
                        .HasForeignKey("WorkRequestTypeKey");

                    b.HasOne("WorkScheduleType", null)
                        .WithMany("WorkRequest")
                        .HasForeignKey("WorkScheduleTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "OperationsRequestID", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "SegmentRequirementID", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.OwnsOne("RequestStateType", "RequestState", b1 =>
                        {
                            b1.Property<string>("WorkRequestTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkRequestTypeKey");

                            b1.ToTable("WorkRequests");

                            b1.WithOwner()
                                .HasForeignKey("WorkRequestTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("OperationsRequestID");

                    b.Navigation("RequestState");

                    b.Navigation("SegmentRequirementID");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("WorkResponseType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkPerformanceType", null)
                        .WithMany("WorkResponse")
                        .HasForeignKey("WorkPerformanceTypeKey");

                    b.HasOne("WorkResponseType", null)
                        .WithMany("WorkResponseChild")
                        .HasForeignKey("WorkResponseTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkRequestID", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("RequiredByRequestedSegmentResponseType", "RequiredByRequestedSegmentResponse", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.OwnsOne("ResponseStateType", "ResponseState", b1 =>
                        {
                            b1.Property<string>("WorkResponseTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkResponseTypeKey");

                            b1.ToTable("WorkResponses");

                            b1.WithOwner()
                                .HasForeignKey("WorkResponseTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("RequiredByRequestedSegmentResponse");

                    b.Navigation("ResponseState");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkRequestID");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("WorkScheduleType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkScheduleType", null)
                        .WithMany("WorkScheduleChild")
                        .HasForeignKey("WorkScheduleTypeKey");

                    b.OwnsOne("DateTimeType", "EndTime", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "StartTime", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.OwnsOne("OperationsTypeType", "WorkType", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.OwnsOne("RequestStateType", "ScheduleState", b1 =>
                        {
                            b1.Property<string>("WorkScheduleTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkScheduleTypeKey");

                            b1.ToTable("WorkSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkScheduleTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EndTime");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("ScheduleState");

                    b.Navigation("StartTime");

                    b.Navigation("Version");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionPropertyType", b =>
                {
                    b.HasOne("WorkflowSpecificationConnectionPropertyType", null)
                        .WithMany("WorkflowSpecificationConnectionPropertyChild")
                        .HasForeignKey("WorkflowSpecificationConnectionPropertyTypeKey");

                    b.HasOne("WorkflowSpecificationConnectionType", null)
                        .WithMany("WorkflowSpecificationConnectionProperty")
                        .HasForeignKey("WorkflowSpecificationConnectionTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionPropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionPropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkflowSpecificationConnectionTypePropertyID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionPropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkflowSpecificationConnectionPropertyTypeKey", "Id");

                            b1.ToTable("WorkflowSpecificationConnectionProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");

                    b.Navigation("WorkflowSpecificationConnectionTypePropertyID");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionType", b =>
                {
                    b.HasOne("WorkflowSpecificationType", null)
                        .WithMany("WorkflowSpecificationConnection")
                        .HasForeignKey("WorkflowSpecificationTypeKey");

                    b.OwnsOne("DependencyType", "Dependency", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeKey");

                            b1.ToTable("WorkflowSpecificationConnections");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeKey");

                            b1.ToTable("WorkflowSpecificationConnections");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "FromWSNodeID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeKey");

                            b1.ToTable("WorkflowSpecificationConnections");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "ToWSNodeID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeKey");

                            b1.ToTable("WorkflowSpecificationConnections");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeKey");

                            b1.ToTable("WorkflowSpecificationConnections");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkflowSpecificationConnectionTypeID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeKey");

                            b1.ToTable("WorkflowSpecificationConnections");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeKey");
                        });

                    b.OwnsOne("ValueType", "DependencyFactor", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeKey");

                            b1.ToTable("WorkflowSpecificationConnections");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnections");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeKey");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnections");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeKey");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnections");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeKey");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnections");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeKey");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Dependency");

                    b.Navigation("DependencyFactor");

                    b.Navigation("Description");

                    b.Navigation("FromWSNodeID");

                    b.Navigation("ID");

                    b.Navigation("ToWSNodeID");

                    b.Navigation("WorkflowSpecificationConnectionTypeID");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionTypePropertyType", b =>
                {
                    b.HasOne("WorkflowSpecificationConnectionTypePropertyType", null)
                        .WithMany("WorkflowSpecificationConnectionTypePropertyChild")
                        .HasForeignKey("WorkflowSpecificationConnectionTypePropertyTypeKey");

                    b.HasOne("WorkflowSpecificationConnectionTypeType", null)
                        .WithMany("WorkflowSpecificationConnectionTypeProperty")
                        .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypePropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypeProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypePropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypeProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypePropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkflowSpecificationConnectionTypePropertyTypeKey", "Id");

                            b1.ToTable("WorkflowSpecificationConnectionTypeProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypePropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationConnectionTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionTypeType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DependencyType", "Dependency", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "FromWSNodeMultiplicity", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "ToWSNodeMultiplicity", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkflowSpecificationConnectionTypeBaseID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey", "Id");

                            b1.ToTable("WorkflowSpecificationConnectionTypes_WorkflowSpecificationConnectionTypeBaseID");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");
                        });

                    b.OwnsOne("ValueType", "DependencyFactor", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationConnectionTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.ToTable("WorkflowSpecificationConnectionTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationConnectionTypeTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnectionTypes");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnectionTypes");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnectionTypes");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationConnectionTypeTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");

                                    b2.ToTable("WorkflowSpecificationConnectionTypes");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationConnectionTypeTypeKey");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Dependency");

                    b.Navigation("DependencyFactor");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("FromWSNodeMultiplicity");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("ToWSNodeMultiplicity");

                    b.Navigation("Version");

                    b.Navigation("WorkflowSpecificationConnectionTypeBaseID");
                });

            modelBuilder.Entity("WorkflowSpecificationNodePropertyType", b =>
                {
                    b.HasOne("WorkflowSpecificationNodePropertyType", null)
                        .WithMany("WorkflowSpecificationNodePropertyChild")
                        .HasForeignKey("WorkflowSpecificationNodePropertyTypeKey");

                    b.HasOne("WorkflowSpecificationNodeType", null)
                        .WithMany("WorkflowSpecifictionNodeProperty")
                        .HasForeignKey("WorkflowSpecificationNodeTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodePropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationNodeProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodePropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationNodeProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkflowSpecificationNodeTypePropertyID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodePropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationNodeProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodePropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkflowSpecificationNodePropertyTypeKey", "Id");

                            b1.ToTable("WorkflowSpecificationNodeProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodePropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodePropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");

                    b.Navigation("WorkflowSpecificationNodeTypePropertyID");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.HasOne("WorkflowSpecificationType", "WorkflowSpecification")
                        .WithMany("WorkflowSpecificationNode")
                        .HasForeignKey("WorkflowSpecificationKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeKey");

                            b1.ToTable("SpecificationNodes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeKey");

                            b1.ToTable("SpecificationNodes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkDirectiveID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeKey", "Id");

                            b1.ToTable("SpecificationNodes_WorkDirectiveID");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkMasterID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeKey", "Id");

                            b1.ToTable("SpecificationNodes_WorkMasterID");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkflowSpecificationNodeTypeID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeKey");

                            b1.ToTable("SpecificationNodes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("WorkDirectiveID");

                    b.Navigation("WorkflowSpecification");

                    b.Navigation("WorkflowSpecificationNodeTypeID");

                    b.Navigation("WorkMasterID");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeTypePropertyType", b =>
                {
                    b.HasOne("WorkflowSpecificationNodeTypePropertyType", null)
                        .WithMany("WorkflowSpecificationNodeTypePropertyChild")
                        .HasForeignKey("WorkflowSpecificationNodeTypePropertyTypeKey");

                    b.HasOne("WorkflowSpecificationNodeTypeType", null)
                        .WithMany("WorkflowSpecificationNodeTypeProperty")
                        .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypePropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationNodeTypeProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypePropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypePropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationNodeTypeProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypePropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypePropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkflowSpecificationNodeTypePropertyTypeKey", "Id");

                            b1.ToTable("WorkflowSpecificationNodeTypeProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypePropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationNodeTypeProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationNodeTypePropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeTypeType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationNodeTypeTypeKey");

                            b1.ToTable("SpecificationNodeTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationNodeTypeTypeKey");

                            b1.ToTable("SpecificationNodeTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationNodeTypeTypeKey");

                            b1.ToTable("SpecificationNodeTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeTypeKey");

                            b1.ToTable("SpecificationNodeTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeTypeKey");

                            b1.ToTable("SpecificationNodeTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeTypeKey");

                            b1.ToTable("SpecificationNodeTypes");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");
                        });

                    b.OwnsMany("IdentifierType", "WorkflowSpecificationNodeTypeBaseID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationNodeTypeTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationNodeTypeTypeKey", "Id");

                            b1.ToTable("SpecificationNodeTypes_WorkflowSpecificationNodeTypeBaseID");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationNodeTypeTypeKey");
                        });

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");

                    b.Navigation("WorkflowSpecificationNodeTypeBaseID");
                });

            modelBuilder.Entity("WorkflowSpecificationPropertyType", b =>
                {
                    b.HasOne("WorkflowSpecificationPropertyType", null)
                        .WithMany("WorkflowSpecificationPropertyChild")
                        .HasForeignKey("WorkflowSpecificationPropertyTypeKey");

                    b.HasOne("WorkflowSpecificationType", null)
                        .WithMany("WorkflowSpecificationProperty")
                        .HasForeignKey("WorkflowSpecificationTypeKey");

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationPropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationPropertyTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationPropertyTypeKey");

                            b1.ToTable("WorkflowSpecificationProperties");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationPropertyTypeKey");
                        });

                    b.OwnsMany("ValueType", "Value", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationPropertyTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.HasKey("WorkflowSpecificationPropertyTypeKey", "Id");

                            b1.ToTable("WorkflowSpecificationProperties_Value");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationPropertyTypeKey");

                            b1.OwnsOne("DataTypeType", "DataType", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OtherValue")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("IdentifierType", "Key", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("SchemeAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemeVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("UnitOfMeasureType", "UnitOfMeasure", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemeURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.OwnsOne("ValueStringType", "ValueString", b2 =>
                                {
                                    b2.Property<string>("ValueTypeWorkflowSpecificationPropertyTypeKey")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ValueTypeId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("CharacterSetCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("CurrencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EncodingCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Filename")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Format")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LanguageLocaleID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListSchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("MimeCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaDataURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaURI")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SchemaVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListAgencyName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("UnitCodeListVersionID")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Uri")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");

                                    b2.ToTable("WorkflowSpecificationProperties_Value");

                                    b2.WithOwner()
                                        .HasForeignKey("ValueTypeWorkflowSpecificationPropertyTypeKey", "ValueTypeId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Key");

                            b1.Navigation("UnitOfMeasure");

                            b1.Navigation("ValueString");
                        });

                    b.Navigation("Description");

                    b.Navigation("ID");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("WorkflowSpecificationType", b =>
                {
                    b.HasOne("HierarchyScopeType", "HierarchyScope")
                        .WithMany()
                        .HasForeignKey("HierarchyScopeKey");

                    b.OwnsOne("DateTimeType", "EffectiveEndDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "EffectiveStartDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.OwnsOne("DateTimeType", "PublishedDate", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Format")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.OwnsOne("DefinitionTypeType", "DefinitionType", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListSchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ListVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.OwnsOne("DescriptionType", "Description", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("LanguageID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "ID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "Version", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.OwnsOne("IdentifierType", "WorkflowSpecificationPatternID", b1 =>
                        {
                            b1.Property<string>("WorkflowSpecificationTypeKey")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SchemeAgencyID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeAgencyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeDataURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeURI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SchemeVersionID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkflowSpecificationTypeKey");

                            b1.ToTable("WorkflowSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowSpecificationTypeKey");
                        });

                    b.Navigation("DefinitionType");

                    b.Navigation("Description");

                    b.Navigation("EffectiveEndDate");

                    b.Navigation("EffectiveStartDate");

                    b.Navigation("HierarchyScope");

                    b.Navigation("ID");

                    b.Navigation("PublishedDate");

                    b.Navigation("Version");

                    b.Navigation("WorkflowSpecificationPatternID");
                });

            modelBuilder.Entity("BaseDB.用户", b =>
                {
                    b.Navigation("所属的组织列表");

                    b.Navigation("拥有的角色列表");
                });

            modelBuilder.Entity("BaseDB.组织", b =>
                {
                    b.Navigation("下级组织列表");

                    b.Navigation("下辖的用户列表");
                });

            modelBuilder.Entity("BaseDB.菜单", b =>
                {
                    b.Navigation("可访问的角色列表");

                    b.Navigation("下级菜单列表");
                });

            modelBuilder.Entity("BaseDB.角色", b =>
                {
                    b.Navigation("可访问的菜单列表");

                    b.Navigation("下辖的用户列表");
                });

            modelBuilder.Entity("EquipmentClassPropertyType", b =>
                {
                    b.Navigation("EquipmentClassPropertyChild");
                });

            modelBuilder.Entity("EquipmentClassType", b =>
                {
                    b.Navigation("EquipmentClassChild");

                    b.Navigation("EquipmentClassProperty");
                });

            modelBuilder.Entity("EquipmentPropertyType", b =>
                {
                    b.Navigation("EquipmentPropertyChild");
                });

            modelBuilder.Entity("EquipmentSegmentSpecificationPropertyType", b =>
                {
                    b.Navigation("EquipmentSegmentSpecificationPropertyChild");
                });

            modelBuilder.Entity("EquipmentSegmentSpecificationType", b =>
                {
                    b.Navigation("EquipmentSegmentSpecificationChild");

                    b.Navigation("EquipmentSegmentSpecificationProperty");
                });

            modelBuilder.Entity("EquipmentType", b =>
                {
                    b.Navigation("EquipmentChild");

                    b.Navigation("EquipmentProperty");
                });

            modelBuilder.Entity("JobListType", b =>
                {
                    b.Navigation("JobOrder");
                });

            modelBuilder.Entity("JobOrderType", b =>
                {
                    b.Navigation("EquipmentRequirement");

                    b.Navigation("MaterialRequirement");

                    b.Navigation("PersonnelRequirement");

                    b.Navigation("PhysicalAssetRequirement");
                });

            modelBuilder.Entity("JobResponseType", b =>
                {
                    b.Navigation("EquipmentActual");

                    b.Navigation("JobResponseData");

                    b.Navigation("MaterialActual");

                    b.Navigation("PersonnelActual");

                    b.Navigation("PhysicalAssetActual");
                });

            modelBuilder.Entity("MaterialClassPropertyType", b =>
                {
                    b.Navigation("MaterialClassPropertyChild");
                });

            modelBuilder.Entity("MaterialClassType", b =>
                {
                    b.Navigation("AssemblyClass");

                    b.Navigation("MaterialClassProperty");
                });

            modelBuilder.Entity("MaterialDefinitionPropertyType", b =>
                {
                    b.Navigation("MaterialDefinitionPropertyChild");
                });

            modelBuilder.Entity("MaterialDefinitionType", b =>
                {
                    b.Navigation("AssemblyDefinition");

                    b.Navigation("MaterialDefinitionProperty");
                });

            modelBuilder.Entity("MaterialLotPropertyType", b =>
                {
                    b.Navigation("MaterialLotPropertyChild");
                });

            modelBuilder.Entity("MaterialLotType", b =>
                {
                    b.Navigation("AssemblyLot");

                    b.Navigation("MaterialLotProperty");
                });

            modelBuilder.Entity("MaterialSegmentSpecificationPropertyType", b =>
                {
                    b.Navigation("MaterialSegmentSpecificationPropertyChild");
                });

            modelBuilder.Entity("MaterialSegmentSpecificationType", b =>
                {
                    b.Navigation("MaterialSegmentSpecificationProperty");
                });

            modelBuilder.Entity("MaterialSubLotType", b =>
                {
                    b.Navigation("MaterialLotProperty");
                });

            modelBuilder.Entity("OpEquipmentActualPropertyType", b =>
                {
                    b.Navigation("EquipmentActualPropertyChild");
                });

            modelBuilder.Entity("OpEquipmentActualType", b =>
                {
                    b.Navigation("EquipmentActualChild");

                    b.Navigation("EquipmentActualProperty");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("OpEquipmentCapabilityPropertyType", b =>
                {
                    b.Navigation("EquipmentCapabilityPropertyChild");
                });

            modelBuilder.Entity("OpEquipmentCapabilityType", b =>
                {
                    b.Navigation("EquipmentCapabilityChild");

                    b.Navigation("EquipmentCapabilityProperty");
                });

            modelBuilder.Entity("OpEquipmentRequirementPropertyType", b =>
                {
                    b.Navigation("EquipmentRequirementPropertyChild");
                });

            modelBuilder.Entity("OpEquipmentRequirementType", b =>
                {
                    b.Navigation("EquipmentRequirementChild");

                    b.Navigation("EquipmentRequirementProperty");
                });

            modelBuilder.Entity("OpEquipmentSpecificationPropertyType", b =>
                {
                    b.Navigation("EquipmentSpecificationPropertyChild");
                });

            modelBuilder.Entity("OpEquipmentSpecificationType", b =>
                {
                    b.Navigation("EquipmentSpecificationChild");

                    b.Navigation("EquipmentSpecificationProperty");
                });

            modelBuilder.Entity("OpMaterialActualPropertyType", b =>
                {
                    b.Navigation("MaterialActualPropertyChild");
                });

            modelBuilder.Entity("OpMaterialActualType", b =>
                {
                    b.Navigation("AssemblyActual");

                    b.Navigation("MaterialActualProperty");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("OpMaterialCapabilityPropertyType", b =>
                {
                    b.Navigation("MateralCapabilityPropertyChild");
                });

            modelBuilder.Entity("OpMaterialCapabilityType", b =>
                {
                    b.Navigation("AssemblyCapability");

                    b.Navigation("MaterialCapabilityProperty");
                });

            modelBuilder.Entity("OpMaterialRequirementPropertyType", b =>
                {
                    b.Navigation("MaterialRequirementPropertyChild");
                });

            modelBuilder.Entity("OpMaterialRequirementType", b =>
                {
                    b.Navigation("AssemblyRequirement");

                    b.Navigation("MaterialRequirementProperty");
                });

            modelBuilder.Entity("OpMaterialSpecificationPropertyType", b =>
                {
                    b.Navigation("MaterialSpecificationPropertyChild");
                });

            modelBuilder.Entity("OpMaterialSpecificationType", b =>
                {
                    b.Navigation("AssemblySpecification");

                    b.Navigation("MaterialSpecificationProperty");
                });

            modelBuilder.Entity("OpOperationsSegmentCapabilityType", b =>
                {
                    b.Navigation("EquipmentCapability");

                    b.Navigation("HierarchyScope");

                    b.Navigation("MaterialCapability");

                    b.Navigation("OperationsSegmentCapabilityChild");

                    b.Navigation("PersonnelCapability");

                    b.Navigation("PhysicalAssetCapability");
                });

            modelBuilder.Entity("OpPersonnelActualPropertyType", b =>
                {
                    b.Navigation("PersonnelActualPropertyChild");
                });

            modelBuilder.Entity("OpPersonnelActualType", b =>
                {
                    b.Navigation("PersonnelActualChild");

                    b.Navigation("PersonnelActualProperty");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("OpPersonnelCapabilityPropertyType", b =>
                {
                    b.Navigation("PersonnelCapabilityPropertyChild");
                });

            modelBuilder.Entity("OpPersonnelCapabilityType", b =>
                {
                    b.Navigation("PersonnelCapabilityChild");

                    b.Navigation("PersonnelCapabilityProperty");
                });

            modelBuilder.Entity("OpPersonnelRequirementPropertyType", b =>
                {
                    b.Navigation("PersonnelRequirementPropertyChild");
                });

            modelBuilder.Entity("OpPersonnelRequirementType", b =>
                {
                    b.Navigation("PersonnelRequirementChild");

                    b.Navigation("PersonnelRequirementProperty");
                });

            modelBuilder.Entity("OpPersonnelSpecificationPropertyType", b =>
                {
                    b.Navigation("PersonnelSpecificationPropertyChild");
                });

            modelBuilder.Entity("OpPersonnelSpecificationType", b =>
                {
                    b.Navigation("PersonnelSpecificationChild");

                    b.Navigation("PersonnelSpecificationProperty");
                });

            modelBuilder.Entity("OpPhysicalAssetActualPropertyType", b =>
                {
                    b.Navigation("PhysicalAssetActualPropertyChild");
                });

            modelBuilder.Entity("OpPhysicalAssetActualType", b =>
                {
                    b.Navigation("PhysicalAssetActualChild");

                    b.Navigation("PhysicalAssetActualProperty");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("OpPhysicalAssetCapabilityPropertyType", b =>
                {
                    b.Navigation("PhysicalAssetCapabilityPropertyChild");
                });

            modelBuilder.Entity("OpPhysicalAssetCapabilityType", b =>
                {
                    b.Navigation("PhysicalAssetCapabilityChild");

                    b.Navigation("PhysicalAssetCapabilityProperty");
                });

            modelBuilder.Entity("OpPhysicalAssetRequirementPropertyType", b =>
                {
                    b.Navigation("PhysicalAssetRequirementPropertyChild");
                });

            modelBuilder.Entity("OpPhysicalAssetRequirementType", b =>
                {
                    b.Navigation("PhysicalAssetRequirementChild");

                    b.Navigation("PhysicalAssetRequirementProperty");
                });

            modelBuilder.Entity("OpPhysicalAssetSpecificationPropertyType", b =>
                {
                    b.Navigation("PhysicalAssetSpecificationPropertyChild");
                });

            modelBuilder.Entity("OpPhysicalAssetSpecificationType", b =>
                {
                    b.Navigation("PhysicalAssetSpecificationChild");

                    b.Navigation("PhysicalAssetSpecificationProperty");
                });

            modelBuilder.Entity("OpProcessSegmentCapabilityType", b =>
                {
                    b.Navigation("EquipmentCapability");

                    b.Navigation("HierarchyScope");

                    b.Navigation("MaterialCapability");

                    b.Navigation("PersonnelCapability");

                    b.Navigation("PhysicalAssetCapability");

                    b.Navigation("ProcessSegmentCapabilityChild");
                });

            modelBuilder.Entity("OpSegmentDataType", b =>
                {
                    b.Navigation("SegmentDataChild");
                });

            modelBuilder.Entity("OpSegmentRequirementType", b =>
                {
                    b.Navigation("EquipmentRequirement");

                    b.Navigation("MaterialRequirement");

                    b.Navigation("PersonnelRequirement");

                    b.Navigation("PhysicalAssetRequirement");

                    b.Navigation("RequestedSegmentResponse");

                    b.Navigation("SegmentRequirementChild");
                });

            modelBuilder.Entity("OpSegmentResponseType", b =>
                {
                    b.Navigation("EquipmentActual");

                    b.Navigation("MaterialActual");

                    b.Navigation("PersonnelActual");

                    b.Navigation("PhysicalAssetActual");

                    b.Navigation("SegmentData");

                    b.Navigation("SegmentResponseChild");
                });

            modelBuilder.Entity("OperationalLocationClassPropertyType", b =>
                {
                    b.Navigation("OperationalLocationClassPropertyChild");
                });

            modelBuilder.Entity("OperationalLocationClassType", b =>
                {
                    b.Navigation("OperationalLocationClassProperty");
                });

            modelBuilder.Entity("OperationalLocationPropertyType", b =>
                {
                    b.Navigation("OperationalLocationPropertyChild");
                });

            modelBuilder.Entity("OperationalLocationType", b =>
                {
                    b.Navigation("OperationalLocationChild");

                    b.Navigation("OperationalLocationProperty");
                });

            modelBuilder.Entity("OperationsCapabilityType", b =>
                {
                    b.Navigation("EquipmentCapability");

                    b.Navigation("MaterialCapability");

                    b.Navigation("OperationsSegmentCapability");

                    b.Navigation("PersonnelCapability");

                    b.Navigation("PhysicalAssetCapability");

                    b.Navigation("ProcessSegmentCapability");
                });

            modelBuilder.Entity("OperationsDefinitionType", b =>
                {
                    b.Navigation("OperationsSegment");
                });

            modelBuilder.Entity("OperationsEventClassPropertyType", b =>
                {
                    b.Navigation("OperationsEventClassPropertyChild");
                });

            modelBuilder.Entity("OperationsEventClassType", b =>
                {
                    b.Navigation("OperationsEventClassChild");

                    b.Navigation("OperationsEventClassProperty");
                });

            modelBuilder.Entity("OperationsEventDefinitionType", b =>
                {
                    b.Navigation("OperationsEventDefinitionChild");

                    b.Navigation("OperationsEventDefinitionProperty");
                });

            modelBuilder.Entity("OperationsEventType", b =>
                {
                    b.Navigation("OperationsEventChild");

                    b.Navigation("OperationsEventProperty");
                });

            modelBuilder.Entity("OperationsMaterialBillItemType", b =>
                {
                    b.Navigation("AssemblyBillOfMaterialItem");
                });

            modelBuilder.Entity("OperationsMaterialBillType", b =>
                {
                    b.Navigation("OperationsMaterialBillItem");
                });

            modelBuilder.Entity("OperationsPerformanceType", b =>
                {
                    b.Navigation("OperationsResponse");
                });

            modelBuilder.Entity("OperationsRequestType", b =>
                {
                    b.Navigation("RequestedSegmentResponse");

                    b.Navigation("SegmentRequirement");
                });

            modelBuilder.Entity("OperationsResponseType", b =>
                {
                    b.Navigation("SegmentResponse");
                });

            modelBuilder.Entity("OperationsScheduleType", b =>
                {
                    b.Navigation("OperationsRequest");
                });

            modelBuilder.Entity("OperationsSegmentType", b =>
                {
                    b.Navigation("EquipmentSpecification");

                    b.Navigation("MaterialSpecification");

                    b.Navigation("OperationsSegmentChild");

                    b.Navigation("PersonnelSpecification");

                    b.Navigation("PhysicalAssetSpecification");

                    b.Navigation("SegmentDependency");
                });

            modelBuilder.Entity("PersonPropertyType", b =>
                {
                    b.Navigation("PersonPropertyChild");
                });

            modelBuilder.Entity("PersonType", b =>
                {
                    b.Navigation("PersonProperty");
                });

            modelBuilder.Entity("PersonnelClassPropertyType", b =>
                {
                    b.Navigation("PersonnelClassPropertyChild");
                });

            modelBuilder.Entity("PersonnelClassType", b =>
                {
                    b.Navigation("PersonnelClassProperty");
                });

            modelBuilder.Entity("PersonnelSegmentSpecificationPropertyType", b =>
                {
                    b.Navigation("PersonnalSegmentSpecificationPropertyChild");
                });

            modelBuilder.Entity("PersonnelSegmentSpecificationType", b =>
                {
                    b.Navigation("PersonnelSegmentSpecificationChild");

                    b.Navigation("PersonnelSegmentSpecificationProperty");
                });

            modelBuilder.Entity("PhysicalAssetClassPropertyType", b =>
                {
                    b.Navigation("PhysicalAssetClassPropertyChild");
                });

            modelBuilder.Entity("PhysicalAssetClassType", b =>
                {
                    b.Navigation("PhysicalAssetClassChild");

                    b.Navigation("PhysicalAssetClassProperty");
                });

            modelBuilder.Entity("PhysicalAssetPropertyType", b =>
                {
                    b.Navigation("PhysicalAssetPropertyChild");
                });

            modelBuilder.Entity("PhysicalAssetSegmentSpecificationPropertyType", b =>
                {
                    b.Navigation("PhysicalAssetSegmentSpecificationPropertyChild");
                });

            modelBuilder.Entity("PhysicalAssetSegmentSpecificationType", b =>
                {
                    b.Navigation("PhysicalAssetSegmentSpecificationChild");

                    b.Navigation("PhysicalAssetSegmentSpecificationProperty");
                });

            modelBuilder.Entity("PhysicalAssetType", b =>
                {
                    b.Navigation("PhysicalAssetChild");

                    b.Navigation("PhysicalAssetProperty");
                });

            modelBuilder.Entity("ProcessSegmentType", b =>
                {
                    b.Navigation("EquipmentSegmentSpecification");

                    b.Navigation("MaterialSegmentSpecification");

                    b.Navigation("PersonnelSegmentSpecification");

                    b.Navigation("PhysicalAssetSegmentSpecification");

                    b.Navigation("ProcessSegmentChild");

                    b.Navigation("SegmentDependency");
                });

            modelBuilder.Entity("ProductInformationType", b =>
                {
                    b.Navigation("ProductSegments");
                });

            modelBuilder.Entity("ProductSegmentType", b =>
                {
                    b.Navigation("SegmentChilds");
                });

            modelBuilder.Entity("RNCPropertyType", b =>
                {
                    b.Navigation("RNCPropertyChild");
                });

            modelBuilder.Entity("RRNPropertyType", b =>
                {
                    b.Navigation("RRNPropertyChild");
                });

            modelBuilder.Entity("ResourceNetworkConnectionType", b =>
                {
                    b.Navigation("RNCProperty");
                });

            modelBuilder.Entity("ResourceNetworkConnectionTypeType", b =>
                {
                    b.Navigation("RNCTypeProperty");
                });

            modelBuilder.Entity("ResourceReferencePropertyType", b =>
                {
                    b.Navigation("ResourceReferencePropertyChild");
                });

            modelBuilder.Entity("ResourceReferenceType", b =>
                {
                    b.Navigation("ResourceReferenceProperty");
                });

            modelBuilder.Entity("ResourceRelationshipNetworkType", b =>
                {
                    b.Navigation("ResourceNetworkConnection");

                    b.Navigation("RRNProperty");
                });

            modelBuilder.Entity("TestResultType", b =>
                {
                    b.Navigation("TestResultChild");
                });

            modelBuilder.Entity("TestSpecificationPropertyType", b =>
                {
                    b.Navigation("TestSpecificationPropertyChild");
                });

            modelBuilder.Entity("TestSpecificationType", b =>
                {
                    b.Navigation("EvaluatedProperty");

                    b.Navigation("TestSpecificationChild");

                    b.Navigation("TestSpecificationCriteria");

                    b.Navigation("TestSpecificationProperty");
                });

            modelBuilder.Entity("WorkAlertDefinitionPropertyType", b =>
                {
                    b.Navigation("WorkAlertDefinitionPropertyChild");
                });

            modelBuilder.Entity("WorkAlertDefinitionType", b =>
                {
                    b.Navigation("WorkAlertDefinitionProperty");
                });

            modelBuilder.Entity("WorkAlertPropertyType", b =>
                {
                    b.Navigation("WorkAlertPropertyChid");
                });

            modelBuilder.Entity("WorkAlertType", b =>
                {
                    b.Navigation("WorkAlertProperty");
                });

            modelBuilder.Entity("WorkCalendarDefinitionEntryPropertyType", b =>
                {
                    b.Navigation("WorkCalendarDefinitionEntryPropertyChild");
                });

            modelBuilder.Entity("WorkCalendarDefinitionEntryType", b =>
                {
                    b.Navigation("WorkCalendarDefinitionEntryChild");

                    b.Navigation("WorkCalendarDefinitionEntryProperty");
                });

            modelBuilder.Entity("WorkCalendarDefinitionPropertyType", b =>
                {
                    b.Navigation("WorkCalendarDefinitionPropertyChild");
                });

            modelBuilder.Entity("WorkCalendarDefinitionType", b =>
                {
                    b.Navigation("WorkCalendarDefinitionEntry");

                    b.Navigation("WorkCalendarDefinitionProperty");
                });

            modelBuilder.Entity("WorkCalendarEntryPropertyType", b =>
                {
                    b.Navigation("WorkCalendarEntryPropertyChild");
                });

            modelBuilder.Entity("WorkCalendarEntryType", b =>
                {
                    b.Navigation("WorkCalendarEntryChild");

                    b.Navigation("WorkCalendarEntryProperty");
                });

            modelBuilder.Entity("WorkCalendarPropertyType", b =>
                {
                    b.Navigation("WorkCalendarPropertyChild");
                });

            modelBuilder.Entity("WorkCalendarType", b =>
                {
                    b.Navigation("WorkCalendarEntry");

                    b.Navigation("WorkCalendarProperty");
                });

            modelBuilder.Entity("WorkCapabilityType", b =>
                {
                    b.Navigation("EquipmentCapability");

                    b.Navigation("MaterialCapability");

                    b.Navigation("PersonnelCapability");

                    b.Navigation("PhysicalAssetCapability");

                    b.Navigation("WorkMasterCapability");
                });

            modelBuilder.Entity("WorkDirectiveType", b =>
                {
                    b.Navigation("EquipmentSpecification");

                    b.Navigation("MaterialSpecification");

                    b.Navigation("PersonnelSpecification");

                    b.Navigation("PhysicalAssetSpecification");

                    b.Navigation("WorkDirectiveChild");
                });

            modelBuilder.Entity("WorkMasterCapabilityType", b =>
                {
                    b.Navigation("EquipmentCapability");

                    b.Navigation("HierarchyScope");

                    b.Navigation("MaterialCapability");

                    b.Navigation("PersonnelCapability");

                    b.Navigation("PhysicalAssetCapability");

                    b.Navigation("WorkMasterCapability");
                });

            modelBuilder.Entity("WorkMasterType", b =>
                {
                    b.Navigation("EquipmentSpecification");

                    b.Navigation("MaterialSpecification");

                    b.Navigation("PersonnelSpecification");

                    b.Navigation("PhysicalAssetSpecification");

                    b.Navigation("WorkMasterChild");
                });

            modelBuilder.Entity("WorkPerformanceType", b =>
                {
                    b.Navigation("WorkPerformanceChild");

                    b.Navigation("WorkResponse");
                });

            modelBuilder.Entity("WorkRecordEntryType", b =>
                {
                    b.Navigation("WorkRecordEntryChild");
                });

            modelBuilder.Entity("WorkRecordType", b =>
                {
                    b.Navigation("WorkRecordChild");

                    b.Navigation("WorkRecordEntry");
                });

            modelBuilder.Entity("WorkRequestType", b =>
                {
                    b.Navigation("JobOrder");

                    b.Navigation("WorkRequestChild");
                });

            modelBuilder.Entity("WorkResponseType", b =>
                {
                    b.Navigation("JobResponse");

                    b.Navigation("WorkResponseChild");
                });

            modelBuilder.Entity("WorkScheduleType", b =>
                {
                    b.Navigation("WorkRequest");

                    b.Navigation("WorkScheduleChild");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionPropertyType", b =>
                {
                    b.Navigation("WorkflowSpecificationConnectionPropertyChild");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionType", b =>
                {
                    b.Navigation("WorkflowSpecificationConnectionProperty");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionTypePropertyType", b =>
                {
                    b.Navigation("WorkflowSpecificationConnectionTypePropertyChild");
                });

            modelBuilder.Entity("WorkflowSpecificationConnectionTypeType", b =>
                {
                    b.Navigation("WorkflowSpecificationConnectionTypeProperty");
                });

            modelBuilder.Entity("WorkflowSpecificationNodePropertyType", b =>
                {
                    b.Navigation("WorkflowSpecificationNodePropertyChild");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeType", b =>
                {
                    b.Navigation("WorkflowSpecifictionNodeProperty");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeTypePropertyType", b =>
                {
                    b.Navigation("WorkflowSpecificationNodeTypePropertyChild");
                });

            modelBuilder.Entity("WorkflowSpecificationNodeTypeType", b =>
                {
                    b.Navigation("WorkflowSpecificationNodeTypeProperty");
                });

            modelBuilder.Entity("WorkflowSpecificationPropertyType", b =>
                {
                    b.Navigation("WorkflowSpecificationPropertyChild");
                });

            modelBuilder.Entity("WorkflowSpecificationType", b =>
                {
                    b.Navigation("WorkflowSpecificationConnection");

                    b.Navigation("WorkflowSpecificationNode");

                    b.Navigation("WorkflowSpecificationProperty");
                });
#pragma warning restore 612, 618
        }
    }
}
