// <auto-generated />
using System;
using BaseDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BaseDB.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BaseDB.用户", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Key");

                    b.Property<string>("Code")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("头像")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("头像");

                    b.Property<string>("密码")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("密码");

                    b.Property<int?>("年龄")
                        .HasPrecision(10)
                        .HasColumnType("int")
                        .HasColumnName("年龄");

                    b.Property<int?>("性别")
                        .HasPrecision(10)
                        .HasColumnType("int")
                        .HasColumnName("性别");

                    b.Property<string>("手机")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("手机");

                    b.Property<string>("昵称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("昵称");

                    b.Property<string>("生日")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("生日");

                    b.Property<string>("登录用户名")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("登录用户名");

                    b.Property<string>("邮件")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("邮件");

                    b.HasKey("Key");

                    b.ToTable("用户");
                });

            modelBuilder.Entity("BaseDB.用户_组织", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Key");

                    b.Property<Guid>("用户Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("用户Key");

                    b.Property<Guid>("组织Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("组织Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Key", "用户Key", "组织Key");

                    b.HasIndex("用户Key");

                    b.HasIndex("组织Key");

                    b.ToTable("用户_组织");
                });

            modelBuilder.Entity("BaseDB.用户_角色", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Key");

                    b.Property<Guid>("用户Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("用户Key");

                    b.Property<Guid>("角色Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("角色Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Key", "用户Key", "角色Key");

                    b.HasIndex("用户Key");

                    b.HasIndex("角色Key");

                    b.ToTable("用户_角色");
                });

            modelBuilder.Entity("BaseDB.组织", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("上级组织Key")
                        .HasMaxLength(4000)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("上级组织Key");

                    b.Property<string>("全名")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("全名");

                    b.Property<string>("名称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("名称");

                    b.Property<int>("序号")
                        .HasMaxLength(4000)
                        .HasColumnType("int")
                        .HasColumnName("序号");

                    b.Property<string>("编号")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("编号");

                    b.HasKey("Key");

                    b.ToTable("组织");
                });

            modelBuilder.Entity("BaseDB.菜单", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ICON")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ICON");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Url");

                    b.Property<Guid?>("上级菜单Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("上级菜单Key");

                    b.Property<string>("名称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("名称");

                    b.Property<int>("序号")
                        .HasMaxLength(4000)
                        .HasColumnType("int")
                        .HasColumnName("序号");

                    b.Property<string>("编号")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("编号");

                    b.HasKey("Key");

                    b.HasIndex("上级菜单Key");

                    b.ToTable("菜单");
                });

            modelBuilder.Entity("BaseDB.角色", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("名称")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("名称");

                    b.HasKey("Key");

                    b.ToTable("角色");
                });

            modelBuilder.Entity("BaseDB.角色_菜单", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Key");

                    b.Property<Guid>("角色Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("角色Key");

                    b.Property<Guid>("菜单Key")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("菜单Key");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Key", "角色Key", "菜单Key");

                    b.HasIndex("菜单Key");

                    b.HasIndex("角色Key");

                    b.ToTable("角色_菜单");
                });

            modelBuilder.Entity("BaseDB.附件", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Key");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Category");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ContentType");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("FileName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("FilePath");

                    b.Property<string>("Hash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Hash");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasPrecision(19)
                        .HasColumnType("bigint")
                        .HasColumnName("Size")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Source")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Source");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UploadTime");

                    b.HasKey("Key");

                    b.ToTable("附件");
                });

            modelBuilder.Entity("BaseDB.用户_组织", b =>
                {
                    b.HasOne("BaseDB.用户", "用户")
                        .WithMany("所属的组织列表")
                        .HasForeignKey("用户Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseDB.组织", "组织")
                        .WithMany("下辖的用户列表")
                        .HasForeignKey("组织Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("用户");

                    b.Navigation("组织");
                });

            modelBuilder.Entity("BaseDB.用户_角色", b =>
                {
                    b.HasOne("BaseDB.用户", "用户")
                        .WithMany("拥有的角色列表")
                        .HasForeignKey("用户Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseDB.角色", "角色")
                        .WithMany("下辖的用户列表")
                        .HasForeignKey("角色Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("角色");

                    b.Navigation("用户");
                });

            modelBuilder.Entity("BaseDB.菜单", b =>
                {
                    b.HasOne("BaseDB.菜单", "上级菜单")
                        .WithMany("下级菜单列表")
                        .HasForeignKey("上级菜单Key");

                    b.Navigation("上级菜单");
                });

            modelBuilder.Entity("BaseDB.角色_菜单", b =>
                {
                    b.HasOne("BaseDB.菜单", "菜单")
                        .WithMany("可访问的角色列表")
                        .HasForeignKey("菜单Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseDB.角色", "角色")
                        .WithMany("可访问的菜单列表")
                        .HasForeignKey("角色Key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("菜单");

                    b.Navigation("角色");
                });

            modelBuilder.Entity("BaseDB.用户", b =>
                {
                    b.Navigation("所属的组织列表");

                    b.Navigation("拥有的角色列表");
                });

            modelBuilder.Entity("BaseDB.组织", b =>
                {
                    b.Navigation("下辖的用户列表");
                });

            modelBuilder.Entity("BaseDB.菜单", b =>
                {
                    b.Navigation("可访问的角色列表");

                    b.Navigation("下级菜单列表");
                });

            modelBuilder.Entity("BaseDB.角色", b =>
                {
                    b.Navigation("可访问的菜单列表");

                    b.Navigation("下辖的用户列表");
                });
#pragma warning restore 612, 618
        }
    }
}
