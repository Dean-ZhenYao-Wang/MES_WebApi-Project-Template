//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2022/5/27 19:54:32
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BaseDB
{

    /// <summary>
    /// There are no comments for BaseDbContext class in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    public partial class BaseDbContext : DbContext
    {

        /// <summary>
        /// There are no comments for BaseDbContext constructor in the schema.
        /// </summary>
        public BaseDbContext() :
            base()
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for BaseDbContext constructor in the schema.
        /// </summary>
        public BaseDbContext(DbContextOptions<BaseDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for OnConfiguring(DbContextOptionsBuilder optionsBuilder) method in the schema.
        /// </summary>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=SUFACEBOOKPRO2\SQLEXPRESS;Initial Catalog=B2MML;Integrated Security=True;Persist Security Info=True");
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        /// <summary>
        /// Allows you to customize the configuration of model.
        /// </summary>
        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        /// <summary>
        /// There are no comments for 菜单 property in the schema.
        /// </summary>
        public virtual DbSet<菜单> 菜单
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for 角色_菜单s property in the schema.
        /// </summary>
        public virtual DbSet<角色_菜单> 角色_菜单s
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for OnModelCreating in the schema.
        /// </summary>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration<菜单>(new 菜单Configuration());
            modelBuilder.ApplyConfiguration<角色_菜单>(new 角色_菜单Configuration());
            CustomizeMapping(ref modelBuilder);
        }


        /// <summary>
        /// There are no comments for CustomizeMapping in the schema.
        /// </summary>
        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        /// <summary>
        /// There are no comments for HasChanges property in the schema.
        /// </summary>
        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }


        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();
    }
}
