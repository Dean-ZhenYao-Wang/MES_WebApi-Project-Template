//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// Code is generated on: 2022/5/19 17:14:38
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using IRepository_DB;
using BaseDB;

namespace Repository_DB
{
    public partial class EntityFrameworkUnitOfWork : IUnitOfWork
    {
        protected DbContext context = null;

        IRepository<菜单> _菜单;

        IRepository<附件> _附件;

        IRepository<角色> _角色;

        IRepository<角色_菜单> _角色_菜单s;

        IRepository<用户_组织> _用户_组织s;

        IRepository<用户_角色> _用户_角色s;

        IRepository<用户> _用户;

        IRepository<组织> _组织;

        public EntityFrameworkUnitOfWork()
            : this(new BaseDB.BaseDbContext())
        {
        }

        public EntityFrameworkUnitOfWork(DbContext context)
        {
            this.context = context ?? throw new ArgumentNullException("context");
        }

        public DbContext Context
        {
            get
            {
                return context;
            }
        }

        protected virtual void CloseContext()
        {
            if (context != null)
            {
                context.Dispose();
                context = null;
            }
        }

        #region IDisposable Methods

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    CloseContext();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion

        #region IUnitOfWork Members

        public IRepository<菜单> 菜单 {
          get {
            if (_菜单 == null)
              _菜单 = new EntityFrameworkRepository<菜单>(context);
            return _菜单;
          }
        }

        public IRepository<附件> 附件 {
          get {
            if (_附件 == null)
              _附件 = new EntityFrameworkRepository<附件>(context);
            return _附件;
          }
        }

        public IRepository<角色> 角色 {
          get {
            if (_角色 == null)
              _角色 = new EntityFrameworkRepository<角色>(context);
            return _角色;
          }
        }

        public IRepository<角色_菜单> 角色_菜单s {
          get {
            if (_角色_菜单s == null)
              _角色_菜单s = new EntityFrameworkRepository<角色_菜单>(context);
            return _角色_菜单s;
          }
        }

        public IRepository<用户_组织> 用户_组织s {
          get {
            if (_用户_组织s == null)
              _用户_组织s = new EntityFrameworkRepository<用户_组织>(context);
            return _用户_组织s;
          }
        }

        public IRepository<用户_角色> 用户_角色s {
          get {
            if (_用户_角色s == null)
              _用户_角色s = new EntityFrameworkRepository<用户_角色>(context);
            return _用户_角色s;
          }
        }

        public IRepository<用户> 用户 {
          get {
            if (_用户 == null)
              _用户 = new EntityFrameworkRepository<用户>(context);
            return _用户;
          }
        }

        public IRepository<组织> 组织 {
          get {
            if (_组织 == null)
              _组织 = new EntityFrameworkRepository<组织>(context);
            return _组织;
          }
        }

        public virtual void Save()
        {
            if (context == null)
                throw new InvalidOperationException("Context has not been initialized.");
            context.SaveChanges();
        }

        #endregion
    }
}
